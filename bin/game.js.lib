[
  {
    "path": "node_modules\\@dcl\\amd\\dist\\amd.js",
    "content": "\"use strict\";\n// A naive attempt at getting the global `this`. Don’t use `this`!\nconst getGlobalThis = function () {\n    // @ts-ignore\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // @ts-ignore\n    if (typeof self !== 'undefined')\n        return self;\n    // @ts-ignore\n    if (typeof window !== 'undefined')\n        return window;\n    // Note: this might still return the wrong result!\n    // @ts-ignore\n    if (typeof this !== 'undefined')\n        return this;\n    throw new Error('Unable to locate global `this`');\n};\nconst globalObject = getGlobalThis();\nvar loader;\n(function (loader) {\n    'use strict';\n    const MODULE_LOADING = 1;\n    const MODULE_READY = 2;\n    let unnamedModules = 0;\n    const anonymousQueue = [];\n    const cycles = [];\n    const settings = {\n        baseUrl: ''\n    };\n    const registeredModules = {};\n    function config(config) {\n        if (typeof config === 'object') {\n            for (const x in config) {\n                if (config.hasOwnProperty(x)) {\n                    ;\n                    settings[x] = config[x];\n                }\n            }\n        }\n    }\n    loader.config = config;\n    function define(first, second, third) {\n        let moduleToLoad = null;\n        let factory = {};\n        let dependencies = null;\n        if (typeof first === 'function') {\n            factory = first;\n        }\n        else if (typeof first === 'string') {\n            moduleToLoad = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n            else if (second instanceof Array) {\n                dependencies = second;\n                factory = third;\n            }\n        }\n        else if (first instanceof Array) {\n            dependencies = first;\n            if (typeof second === 'function') {\n                factory = second;\n            }\n        }\n        dependencies = dependencies || ['require', 'exports', 'module'];\n        if (moduleToLoad === null) {\n            moduleToLoad = `unnamed-module-${unnamedModules++}`;\n        }\n        moduleToLoad = normalizeModuleId(moduleToLoad);\n        function ready(deps) {\n            const module = registeredModules[moduleToLoad];\n            if (!module)\n                throw new Error('Could not access registered module ' + moduleToLoad);\n            let exports = module.exports;\n            exports =\n                typeof factory === 'function'\n                    ? factory.apply(globalObject, deps) || exports\n                    : factory;\n            module.exports = exports;\n            moduleReady(moduleToLoad);\n        }\n        dependencies = (dependencies || []).map((dep) => resolve(moduleToLoad, dep));\n        if (!registeredModules[moduleToLoad]) {\n            registeredModules[moduleToLoad] = {\n                name: moduleToLoad,\n                parent: null,\n                dclamd: MODULE_LOADING,\n                dependencies,\n                handlers: [],\n                exports: {},\n                dependants: new Set()\n            };\n        }\n        registeredModules[moduleToLoad].dependencies = dependencies;\n        require(dependencies, ready, (err) => {\n            if (typeof onerror === 'function') {\n                onerror(err);\n            }\n            else {\n                throw err;\n            }\n        }, moduleToLoad);\n    }\n    loader.define = define;\n    (function (define) {\n        define.amd = {};\n        define.modules = registeredModules;\n    })(define = loader.define || (loader.define = {}));\n    function moduleReady(moduleName) {\n        const module = registeredModules[moduleName];\n        if (!module)\n            throw new Error('Could not access registered module ' + moduleName);\n        module.dclamd = MODULE_READY;\n        const handlers = module.handlers;\n        if (handlers && handlers.length) {\n            for (let x = 0; x < handlers.length; x++) {\n                handlers[x](registeredModules[moduleName]);\n            }\n        }\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns cycle as array.\n     */\n    function getCyclePath(fromModule, toModule, depth) {\n        if (!registeredModules[fromModule]) {\n            return null;\n        }\n        if (fromModule === toModule || depth === 50)\n            return [fromModule];\n        const dependencies = registeredModules[fromModule].dependencies;\n        for (let i = 0, len = dependencies.length; i < len; i++) {\n            const path = getCyclePath(dependencies[i], toModule, depth + 1);\n            if (path !== null) {\n                path.push(fromModule);\n                return path;\n            }\n        }\n        return null;\n    }\n    /**\n     * Walks (recursively) the dependencies of 'from' in search of 'to'.\n     * Returns true if there is such a path or false otherwise.\n     * @param from Module id to start at\n     * @param to Module id to look for\n     */\n    function hasDependencyPath(fromId, toId) {\n        const from = registeredModules[fromId];\n        if (!from) {\n            return false;\n        }\n        const inQueue = {};\n        for (const i in registeredModules) {\n            inQueue[i] = false;\n        }\n        const queue = [];\n        // Insert 'from' in queue\n        queue.push(from);\n        inQueue[fromId] = true;\n        while (queue.length > 0) {\n            // Pop first inserted element of queue\n            const element = queue.shift();\n            const dependencies = element.dependencies;\n            if (dependencies) {\n                // Walk the element's dependencies\n                for (let i = 0, len = dependencies.length; i < len; i++) {\n                    const dependency = dependencies[i];\n                    if (dependency === toId) {\n                        // There is a path to 'to'\n                        return true;\n                    }\n                    const dependencyModule = registeredModules[dependency];\n                    if (dependencyModule && !inQueue[dependency]) {\n                        // Insert 'dependency' in queue\n                        inQueue[dependency] = true;\n                        queue.push(dependencyModule);\n                    }\n                }\n            }\n        }\n        // There is no path to 'to'\n        return false;\n    }\n    function require(dependencies, callback, errorCallback, parentModule) {\n        const dependenciesResults = new Array(dependencies.length).fill(null);\n        let loadedCount = 0;\n        let hasLoaded = false;\n        if (typeof dependencies === 'string') {\n            if (registeredModules[dependencies]) {\n                if (registeredModules[dependencies].dclamd === MODULE_LOADING) {\n                    throw new Error(`Trying to load ${dependencies} from ${parentModule}. The first module is still loading.`);\n                }\n                return registeredModules[dependencies];\n            }\n            throw new Error(dependencies +\n                ' has not been defined. Please include it as a dependency in ' +\n                parentModule +\n                \"'s define()\");\n        }\n        const depsLength = dependencies.length;\n        for (let index = 0; index < depsLength; index++) {\n            switch (dependencies[index]) {\n                case 'require':\n                    const _require = function (new_module, callback, errorCallback) {\n                        return require(new_module, callback, errorCallback, parentModule);\n                    };\n                    _require.toUrl = function (module) {\n                        return toUrl(module, parentModule);\n                    };\n                    dependenciesResults[index] = _require;\n                    loadedCount++;\n                    break;\n                case 'exports':\n                    if (!registeredModules[parentModule]) {\n                        throw new Error('Parent module ' + parentModule + ' not registered yet');\n                    }\n                    dependenciesResults[index] = registeredModules[parentModule].exports;\n                    loadedCount++;\n                    break;\n                case 'module':\n                    dependenciesResults[index] = {\n                        id: parentModule,\n                        uri: toUrl(parentModule)\n                    };\n                    loadedCount++;\n                    break;\n                default: {\n                    // If we have a circular dependency, then we resolve the module even if it hasn't loaded yet\n                    const dependency = dependencies[index];\n                    const hasCycles = hasDependencyPath(dependency, parentModule);\n                    const handleLoadedModule = () => {\n                        dependenciesResults[index] = registeredModules[dependency].exports;\n                        loadedCount++;\n                        if (loadedCount === depsLength && callback) {\n                            hasLoaded = true;\n                            callback(dependenciesResults);\n                        }\n                    };\n                    if (hasCycles) {\n                        const cyclePath = getCyclePath(dependency, parentModule, 0);\n                        if (cyclePath) {\n                            cyclePath.reverse();\n                            cyclePath.push(dependency);\n                            cycles.push(cyclePath);\n                        }\n                        load(dependency, () => { }, errorCallback, parentModule);\n                        handleLoadedModule();\n                    }\n                    else {\n                        load(dependency, handleLoadedModule, errorCallback, parentModule);\n                    }\n                    break;\n                }\n            }\n        }\n        if (!hasLoaded && loadedCount === depsLength && callback) {\n            callback(dependenciesResults);\n        }\n    }\n    loader.require = require;\n    function createMethodHandler(rpcHandle, method) {\n        return function () {\n            return dcl.callRpc(rpcHandle, method.name, \n            // eslint-disable-next-line prefer-rest-params\n            anonymousQueue.slice.call(arguments, 0));\n        };\n    }\n    // returns: resolvedModuleName\n    function resolve(fromModule, toModule) {\n        return fromModule ? toUrl(toModule, fromModule) : toModule;\n    }\n    function load(moduleName, callback, errorCallback, parentModule) {\n        if (registeredModules[moduleName]) {\n            registeredModules[moduleName].dependants.add(parentModule);\n            if (registeredModules[moduleName].dclamd === MODULE_LOADING) {\n                callback && registeredModules[moduleName].handlers.push(callback);\n            }\n            else {\n                callback && callback(registeredModules[moduleName]);\n            }\n            return;\n        }\n        else {\n            registeredModules[moduleName] = {\n                name: moduleName,\n                parent: parentModule,\n                dclamd: MODULE_LOADING,\n                handlers: [callback],\n                dependencies: [],\n                dependants: new Set([parentModule]),\n                exports: {}\n            };\n        }\n        if (moduleName.indexOf('@') === 0) {\n            const exports = registeredModules[moduleName].exports;\n            if (typeof dcl.loadModule === 'function') {\n                dcl\n                    .loadModule(moduleName, exports)\n                    .then((descriptor) => {\n                    for (const i in descriptor.methods) {\n                        const method = descriptor.methods[i];\n                        exports[method.name] = createMethodHandler(descriptor.rpcHandle, method);\n                    }\n                    moduleReady(moduleName);\n                })\n                    .catch((e) => {\n                    errorCallback(e);\n                });\n            }\n            else {\n                throw new Error('Asynchronous modules will not work because loadModule function is not present');\n            }\n        }\n    }\n    if (typeof dcl !== 'undefined') {\n        dcl.onStart(() => {\n            const unknownModules = new Set();\n            const notLoadedModules = [];\n            for (const i in registeredModules) {\n                if (registeredModules[i]) {\n                    if (registeredModules[i].dclamd === MODULE_LOADING) {\n                        notLoadedModules.push(registeredModules[i]);\n                    }\n                    registeredModules[i].dependencies.forEach(($) => {\n                        if ($ === 'require' || $ === 'exports' || $ === 'module')\n                            return;\n                        if (!registeredModules[$])\n                            unknownModules.add($);\n                    });\n                }\n            }\n            const errorParts = [];\n            if (cycles.length) {\n                errorParts.push(`\\n> Cyclic dependencies: ${cycles\n                    .map(($) => '\\n  - ' + $.join(' -> '))\n                    .join('')}`);\n            }\n            if (unknownModules.size) {\n                errorParts.push(`\\n> Undeclared/unknown modules: ${Array.from(unknownModules)\n                    .map(($) => '\\n  - ' + $)\n                    .join('')}`);\n            }\n            if (notLoadedModules.length) {\n                errorParts.push(`\\n> These modules didn't load: ${notLoadedModules\n                    .map(($) => '\\n  - ' + $.name)\n                    .join('')}.\\n`);\n            }\n            if (errorParts.length) {\n                throw new Error(errorParts.join('\\n'));\n            }\n        });\n    }\n    /**\n     * Normalize 'a/../name' to 'name', etc.\n     */\n    function normalizeModuleId(moduleId) {\n        let r = moduleId, pattern;\n        // replace /./ => /\n        pattern = /\\/\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^./ => nothing\n        r = r.replace(/^\\.\\//g, '');\n        // replace /aa/../ => / (BUT IGNORE /../../)\n        pattern =\n            /\\/(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//;\n        while (pattern.test(r)) {\n            r = r.replace(pattern, '/');\n        }\n        // replace ^aa/../ => nothing (BUT IGNORE ../../)\n        r = r.replace(/^(([^\\/])|([^\\/][^\\/\\.])|([^\\/\\.][^\\/])|([^\\/][^\\/][^\\/]+))\\/\\.\\.\\//, '');\n        // replace ^/ => nothing\n        r = r.replace(/^\\//g, '');\n        return r;\n    }\n    /**\n     * Resolve relative module ids\n     */\n    function resolveModule(moduleId, parentModule) {\n        let result = moduleId;\n        if (!result.startsWith('@')) {\n            if (result.startsWith('./') || result.startsWith('../')) {\n                const currentPath = parentModule.split('/');\n                currentPath.pop();\n                result = normalizeModuleId(currentPath.join('/') + '/' + result);\n            }\n        }\n        return result;\n    }\n    function toUrl(moduleName, parentModule) {\n        switch (moduleName) {\n            case 'require':\n            case 'exports':\n            case 'module':\n                return moduleName;\n        }\n        if (parentModule) {\n            return resolveModule(moduleName, parentModule);\n        }\n        return normalizeModuleId(moduleName);\n    }\n    require.toUrl = toUrl;\n})(loader || (loader = {}));\nglobalObject.define = loader.define;\nglobalObject.dclamd = loader;\n//# sourceMappingURL=data:application/json;base64,",
    "sha256": "1fcc2d76805964317daad52b00a258748d14ac85cfd45892dfdb47e8951b1ef1"
  },
  {
    "path": "node_modules\\decentraland-ecs\\dist\\src\\index.js",
    "content": "(function (exports) {\n  'use strict';\n\n  /**\r\n   * Entities can be attached to each other by using the `setParent` method. However, there are cases where we might want to attach entities\r\n   * to other objects that are not entities created by the same scene (for example, the player's avatar). For those cases, we have this class.\r\n   * @public\r\n   */\r\n  var Attachable = /** @class */ (function () {\r\n      function Attachable() {\r\n      }\r\n      /** Used to attach entities to the avatar. Entities will follow the avatar when it moves */\r\n      Attachable.AVATAR = {\r\n          getEntityRepresentation: function (engine) { return engine.avatarEntity; }\r\n      };\r\n      /** Used to attach entities to the camera. When in first person mode, the attached entities will also rotate with the camera */\r\n      Attachable.FIRST_PERSON_CAMERA = {\r\n          getEntityRepresentation: function (engine) { return engine.firstPersonCameraEntity; }\r\n      };\r\n      return Attachable;\r\n  }());\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation.\r\n\r\n  Permission to use, copy, modify, and/or distribute this software for any\r\n  purpose with or without fee is hereby granted.\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n  PERFORMANCE OF THIS SOFTWARE.\r\n  ***************************************************************************** */\r\n  /* global Reflect, Promise */\r\n\r\n  var extendStatics = function(d, b) {\r\n      extendStatics = Object.setPrototypeOf ||\r\n          ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n          function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n      return extendStatics(d, b);\r\n  };\r\n\r\n  function __extends(d, b) {\r\n      if (typeof b !== \"function\" && b !== null)\r\n          throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n      extendStatics(d, b);\r\n      function __() { this.constructor = d; }\r\n      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n  }\r\n\r\n  var __assign = function() {\r\n      __assign = Object.assign || function __assign(t) {\r\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n              s = arguments[i];\r\n              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n          }\r\n          return t;\r\n      };\r\n      return __assign.apply(this, arguments);\r\n  };\r\n\r\n  function __decorate(decorators, target, key, desc) {\r\n      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n      return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n  }\r\n\r\n  function __metadata(metadataKey, metadataValue) {\r\n      if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n  }\r\n\r\n  function __awaiter(thisArg, _arguments, P, generator) {\r\n      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n      return new (P || (P = Promise))(function (resolve, reject) {\r\n          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n          function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n          step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n      });\r\n  }\r\n\r\n  function __generator(thisArg, body) {\r\n      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n      return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n      function verb(n) { return function (v) { return step([n, v]); }; }\r\n      function step(op) {\r\n          if (f) throw new TypeError(\"Generator is already executing.\");\r\n          while (_) try {\r\n              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n              if (y = 0, t) op = [op[0] & 2, t.value];\r\n              switch (op[0]) {\r\n                  case 0: case 1: t = op; break;\r\n                  case 4: _.label++; return { value: op[1], done: false };\r\n                  case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                  case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                  default:\r\n                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                      if (t[2]) _.ops.pop();\r\n                      _.trys.pop(); continue;\r\n              }\r\n              op = body.call(thisArg, _);\r\n          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n      }\r\n  }\r\n\r\n  function __values(o) {\r\n      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n      if (m) return m.call(o);\r\n      if (o && typeof o.length === \"number\") return {\r\n          next: function () {\r\n              if (o && i >= o.length) o = void 0;\r\n              return { value: o && o[i++], done: !o };\r\n          }\r\n      };\r\n      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n  }\r\n\r\n  function __read(o, n) {\r\n      var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n      if (!m) return o;\r\n      var i = m.call(o), r, ar = [], e;\r\n      try {\r\n          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n      }\r\n      catch (error) { e = { error: error }; }\r\n      finally {\r\n          try {\r\n              if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n          }\r\n          finally { if (e) throw e.error; }\r\n      }\r\n      return ar;\r\n  }\r\n\r\n  function __spreadArray(to, from) {\r\n      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n          to[j] = from[i];\r\n      return to;\r\n  }\n\n  var lastGeneratedId = 0;\r\n  /**\r\n   * Log function. Only works in debug mode, otherwise it does nothing.\r\n   * @param args - any loggable parameter\r\n   * @public\r\n   */\r\n  function log() {\r\n      var args = [];\r\n      for (var _i = 0; _i < arguments.length; _i++) {\r\n          args[_i] = arguments[_i];\r\n      }\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.log.apply(dcl, __spreadArray([], __read(args)));\r\n      }\r\n      else {\r\n          console.log.apply(console, __spreadArray(['DEBUG:'], __read(args)));\r\n      }\r\n  }\r\n  /**\r\n   * Error function. Prints a console error. Only works in debug mode, otherwise it does nothing.\r\n   * @param error - string or Error object.\r\n   * @param data - any debug information.\r\n   * @public\r\n   */\r\n  function error(error, data) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.error(error, data);\r\n      }\r\n      else {\r\n          console.error('ERROR:', error, data);\r\n      }\r\n  }\r\n  /**\r\n   * Generates a new prefixed id\r\n   * @public\r\n   */\r\n  function newId(type) {\r\n      lastGeneratedId++;\r\n      if (type.length === 0)\r\n          throw new Error('newId(type: string): type cannot be empty');\r\n      return type + lastGeneratedId.toString(36);\r\n  }\r\n  /**\r\n   * @internal\r\n   */\r\n  function uuid() {\r\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n          var r = (Math.random() * 16) | 0;\r\n          var v = c === 'x' ? r : (r & 0x3) | 0x8;\r\n          return v.toString(16);\r\n      });\r\n  }\r\n  /**\r\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\r\n   * @param size - the number of element to construct and put in the array\r\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\r\n   * @returns a new array filled with new objects\r\n   * @internal\r\n   */\r\n  function buildArray$1(size, itemBuilder) {\r\n      var a = [];\r\n      for (var i = 0; i < size; ++i) {\r\n          a.push(itemBuilder());\r\n      }\r\n      return a;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function openExternalURL(url) {\r\n      if (typeof dcl !== 'undefined') {\r\n          dcl.openExternalUrl(url);\r\n      }\r\n      else {\r\n          error('ERROR: openExternalURL dcl is undefined');\r\n      }\r\n  }\r\n  /**\r\n   * Popup NFT info dialog\r\n   * @param scr - 'ethereum://contractAddress/tokenID'\r\n   * @param comment - optional. add a comment.\r\n   * @public\r\n   */\r\n  function openNFTDialog(scr, comment) {\r\n      if (comment === void 0) { comment = null; }\r\n      if (typeof dcl !== 'undefined') {\r\n          var regex = /ethereum:\\/\\/(.+)\\/(.+)/;\r\n          var matches = scr.match(regex);\r\n          if (!matches || matches.length < 3) {\r\n              return;\r\n          }\r\n          dcl.openNFTDialog(matches[1], matches[2], comment);\r\n      }\r\n      else {\r\n          error('ERROR: openNFTDialog dcl is undefined');\r\n      }\r\n  }\n\n  var eventNameSymbol = '__event_name__';\r\n  var takenEventNames = [];\r\n  function getEventNameFromConstructor(ctor) {\r\n      if (!(eventNameSymbol in ctor) || typeof ctor[eventNameSymbol] !== 'string') {\r\n          throw new Error('The EventConstructor is not registered');\r\n      }\r\n      return ctor[eventNameSymbol];\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var EventManager = /** @class */ (function () {\r\n      function EventManager() {\r\n          this.listeners = {};\r\n      }\r\n      EventManager.prototype.addListener = function (eventClass, listener, listenerFunction) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              listeners = this.listeners[eventName] = [];\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  throw new Error('The provided listener is already registered');\r\n              }\r\n          }\r\n          listeners.push({\r\n              listener: listener,\r\n              fn: listenerFunction\r\n          });\r\n          return this;\r\n      };\r\n      EventManager.prototype.removeListener = function (listener, eventClass) {\r\n          if (!eventClass || typeof eventClass !== 'function') {\r\n              throw new Error('Invalid EventConstructor');\r\n          }\r\n          var eventName = getEventNameFromConstructor(eventClass);\r\n          var listeners = this.listeners[eventName];\r\n          if (!listeners) {\r\n              return false;\r\n          }\r\n          for (var i = 0; i < listeners.length; i++) {\r\n              var x = listeners[i];\r\n              if (x.listener === listener) {\r\n                  listeners.splice(i, 1);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      EventManager.prototype.fireEvent = function (event) {\r\n          var eventName = getEventNameFromConstructor(event.constructor);\r\n          var listeners = this.listeners[eventName];\r\n          if (listeners) {\r\n              for (var i = 0; i < listeners.length; i++) {\r\n                  try {\r\n                      var l = listeners[i];\r\n                      l.fn.call(l.listener, event);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an instance of Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      return EventManager;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function EventConstructor() {\r\n      var eventName = newId('EV');\r\n      if (takenEventNames.indexOf(eventName) !== -1) {\r\n          throw new Error(\"The event name \".concat(eventName, \" is already taken\"));\r\n      }\r\n      takenEventNames.push(eventName);\r\n      // eslint-disable-next-line @typescript-eslint/ban-types\r\n      return function (target) {\r\n          target[eventNameSymbol] = eventName;\r\n          return target;\r\n      };\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentRemoved = /** @class */ (function () {\r\n      function ComponentRemoved(entity, componentName, component) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      ComponentRemoved = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, String, Object])\r\n      ], ComponentRemoved);\r\n      return ComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ComponentAdded = /** @class */ (function () {\r\n      function ComponentAdded(entity, componentName, classId) {\r\n          this.entity = entity;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      ComponentAdded = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, String, Object])\r\n      ], ComponentAdded);\r\n      return ComponentAdded;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var ParentChanged = /** @class */ (function () {\r\n      function ParentChanged(entity, parent) {\r\n          this.entity = entity;\r\n          this.parent = parent;\r\n          // stub\r\n      }\r\n      ParentChanged = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object, Object])\r\n      ], ParentChanged);\r\n      return ParentChanged;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.UIValueType = void 0;\r\n  (function (UIValueType) {\r\n      UIValueType[UIValueType[\"PERCENT\"] = 0] = \"PERCENT\";\r\n      UIValueType[UIValueType[\"PIXELS\"] = 1] = \"PIXELS\";\r\n  })(exports.UIValueType || (exports.UIValueType = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIValue = /** @class */ (function () {\r\n      function UIValue(value) {\r\n          this.type = exports.UIValueType.PIXELS;\r\n          if (typeof value === 'string') {\r\n              var valueAsString = value;\r\n              if (valueAsString.indexOf('px') > -1) {\r\n                  this.type = exports.UIValueType.PIXELS;\r\n              }\r\n              else if (valueAsString.indexOf('%') > -1) {\r\n                  this.type = exports.UIValueType.PERCENT;\r\n              }\r\n              this.value = parseFloat(valueAsString);\r\n          }\r\n          else {\r\n              this.value = value;\r\n          }\r\n      }\r\n      UIValue.prototype.toString = function () {\r\n          var result = this.value.toString();\r\n          if (this.type === exports.UIValueType.PERCENT) {\r\n              result += '%';\r\n          }\r\n          else {\r\n              result += 'px';\r\n          }\r\n          return result;\r\n      };\r\n      return UIValue;\r\n  }());\n\n  var componentSymbol = '__name__symbol_';\r\n  var componentClassIdSymbol = '__classId__symbol_';\r\n  var componentIdSymbol = '__component__id_';\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentCreated = /** @class */ (function () {\r\n      function DisposableComponentCreated(componentId, componentName, classId) {\r\n          this.componentId = componentId;\r\n          this.componentName = componentName;\r\n          this.classId = classId;\r\n          // stub\r\n      }\r\n      DisposableComponentCreated = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, String, Number])\r\n      ], DisposableComponentCreated);\r\n      return DisposableComponentCreated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentRemoved = /** @class */ (function () {\r\n      function DisposableComponentRemoved(componentId) {\r\n          this.componentId = componentId;\r\n          // stub\r\n      }\r\n      DisposableComponentRemoved = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], DisposableComponentRemoved);\r\n      return DisposableComponentRemoved;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var DisposableComponentUpdated = /** @class */ (function () {\r\n      function DisposableComponentUpdated(componentId, component) {\r\n          this.componentId = componentId;\r\n          this.component = component;\r\n          // stub\r\n      }\r\n      DisposableComponentUpdated = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], DisposableComponentUpdated);\r\n      return DisposableComponentUpdated;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function Component(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \".concat(target.originalClassName, \" with: \").concat(componentName));\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              // eslint-disable-next-line prefer-rest-params\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function DisposableComponent(componentName, classId) {\r\n      return function (target) {\r\n          if (target.isComponent) {\r\n              throw new TypeError(\"You cannot extend a component. Trying to extend \".concat(target.originalClassName, \" with: \").concat(componentName));\r\n          }\r\n          if (typeof classId !== 'number' || isNaN(classId)) {\r\n              throw new Error(\"classId: \".concat(classId, \" is an invalid integer\"));\r\n          }\r\n          var extendedClass = target;\r\n          var RegisteredComponent = function RegisteredComponent() {\r\n              if (!DisposableComponent.engine) {\r\n                  throw new Error('You need to set a DisposableComponent.engine before creating disposable components');\r\n              }\r\n              // eslint-disable-next-line prefer-rest-params\r\n              var args = Array.prototype.slice.call(arguments);\r\n              var ret = new (extendedClass.bind.apply(extendedClass, __spreadArray([void 0], __read(args))))();\r\n              var id = newId('C');\r\n              Object.defineProperty(ret, componentSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: componentName\r\n              });\r\n              Object.defineProperty(ret, componentIdSymbol, {\r\n                  enumerable: false,\r\n                  writable: false,\r\n                  configurable: false,\r\n                  value: id\r\n              });\r\n              if (classId !== undefined) {\r\n                  Object.defineProperty(ret, componentClassIdSymbol, {\r\n                      enumerable: false,\r\n                      writable: false,\r\n                      configurable: false,\r\n                      value: classId\r\n                  });\r\n              }\r\n              if (DisposableComponent.engine) {\r\n                  DisposableComponent.engine.registerComponent(ret);\r\n              }\r\n              return ret;\r\n          };\r\n          if (classId !== undefined) {\r\n              RegisteredComponent[componentClassIdSymbol] = classId;\r\n          }\r\n          RegisteredComponent[componentSymbol] = componentName;\r\n          RegisteredComponent.isComponent = true;\r\n          RegisteredComponent.isDisposableComponent = true;\r\n          RegisteredComponent.originalClassName = componentName;\r\n          RegisteredComponent.prototype = target.prototype;\r\n          RegisteredComponent.prototype.constructor = target;\r\n          return RegisteredComponent;\r\n      };\r\n  }\r\n  /** @internal */\r\n  (function (DisposableComponent) {\r\n      /** @internal */\r\n      // eslint-disable-next-line prefer-const\r\n      DisposableComponent.engine = null;\r\n  })(DisposableComponent || (DisposableComponent = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentName(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentSymbol]) {\r\n          return component[componentSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentClassId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentClassIdSymbol]) {\r\n          return component[componentClassIdSymbol];\r\n      }\r\n      if (!component[componentSymbol]) {\r\n          throw new TypeError(component + ' is not a registered component.');\r\n      }\r\n      return null;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  function getComponentId(component) {\r\n      if (!component) {\r\n          throw new TypeError(component + ' is not a component.');\r\n      }\r\n      if (component[componentIdSymbol]) {\r\n          return component[componentIdSymbol];\r\n      }\r\n      throw new TypeError(component + ' is not a registered disposable component.');\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var ObservableComponent = /** @class */ (function () {\r\n      function ObservableComponent() {\r\n          // @internal\r\n          this.dirty = false;\r\n          // @internal\r\n          this.data = {};\r\n          this.subscriptions = [];\r\n      }\r\n      ObservableComponent.component = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          this.data[propertyKey] = getComponentId(value);\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.field = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      this.data[propertyKey] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.uiValue = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this.data[propertyKey].toString();\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this.data[propertyKey];\r\n                      var finalValue = new UIValue(value);\r\n                      this.data[propertyKey] = finalValue;\r\n                      if (finalValue !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, finalValue, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.readonly = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      if (propertyKey in this.data === false) {\r\n                          throw new Error(\"The field \".concat(propertyKey, \" is uninitialized\"));\r\n                      }\r\n                      return this.data[propertyKey];\r\n                  },\r\n                  set: function (value) {\r\n                      if (propertyKey in this.data) {\r\n                          throw new Error(\"The field \".concat(propertyKey, \" is readonly\"));\r\n                      }\r\n                      this.data[propertyKey] = value;\r\n                      this.dirty = true;\r\n                  },\r\n                  enumerable: true,\r\n                  configurable: false\r\n              });\r\n          }\r\n      };\r\n      ObservableComponent.prototype.onChange = function (fn) {\r\n          this.subscriptions.push(fn);\r\n          return this;\r\n      };\r\n      ObservableComponent.prototype.toJSON = function () {\r\n          return this.data;\r\n      };\r\n      return ObservableComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  function isDisposableComponent(component) {\r\n      return componentIdSymbol in component;\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var ComponentGroup = /** @class */ (function () {\r\n      function ComponentGroup() {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          this.entities = [];\r\n          this.active = false;\r\n          this._requiresNames = [];\r\n          // validate requires list\r\n          if (!requires) {\r\n              throw new Error('ComponentGroup: Could not load the requires list');\r\n          }\r\n          if (!(requires instanceof Array)) {\r\n              throw new Error('ComponentGroup: requires list is not an Array');\r\n          }\r\n          Object.defineProperty(this, 'requires', {\r\n              get: function () {\r\n                  return requires.slice();\r\n              }\r\n          });\r\n          Object.defineProperty(this, 'requiresNames', {\r\n              get: function () {\r\n                  return this._requiresNames.slice();\r\n              }\r\n          });\r\n          var _loop_1 = function (ix) {\r\n              var component = requires[ix];\r\n              var name = null;\r\n              if (!component) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \".concat(ix, \" is invalid\"));\r\n              }\r\n              try {\r\n                  name = getComponentName(component);\r\n              }\r\n              catch (e) {\r\n                  throw new Error(\"ComponentGroup: the required component at location \".concat(ix, \" is not registered as a @Component. Remember to provide the class of the component, not the name\"));\r\n              }\r\n              if (this_1._requiresNames.some(function ($) { return $ === name; })) {\r\n                  throw new Error(\"ComponentGroup: the required component list has a repeated name \".concat(name));\r\n              }\r\n              this_1._requiresNames.push(name);\r\n          };\r\n          var this_1 = this;\r\n          for (var ix = 0; ix < requires.length; ix++) {\r\n              _loop_1(ix);\r\n          }\r\n      }\r\n      ComponentGroup.prototype.hasEntity = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return false;\r\n          return this.entities.indexOf(entity) !== -1;\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.addEntity = function (entity) {\r\n          if (!entity.isAddedToEngine()) {\r\n              throw new TypeError('ComponentGroup: Cannot add a entity that is not added to the engine');\r\n          }\r\n          if (this.entities.indexOf(entity) === -1) {\r\n              this.entities.push(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.removeEntity = function (entity) {\r\n          var id = this.entities.indexOf(entity);\r\n          if (id !== -1) {\r\n              this.entities.splice(id, 1);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.componentRemoved = function (entity, component) {\r\n          if (this._requiresNames.indexOf(component) !== -1) {\r\n              this.removeEntity(entity);\r\n          }\r\n      };\r\n      // @internal\r\n      ComponentGroup.prototype.meetsRequirements = function (entity) {\r\n          for (var i = 0; i < this._requiresNames.length; i++) {\r\n              var componentName = this._requiresNames[i];\r\n              if (!(componentName in entity.components)) {\r\n                  return false;\r\n              }\r\n          }\r\n          return true;\r\n      };\r\n      return ComponentGroup;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Entity = /** @class */ (function () {\r\n      function Entity(name) {\r\n          this.name = name;\r\n          this.children = {};\r\n          this.eventManager = null;\r\n          this.alive = false;\r\n          this.uuid = newId('E');\r\n          this.components = {};\r\n          // @internal\r\n          this.engine = null;\r\n          // @internal\r\n          this._parent = null;\r\n          // stub\r\n      }\r\n      /**\r\n       * Adds or replaces a component in the entity.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponentOrReplace = function (component) {\r\n          if (typeof component === 'function') {\r\n              throw new Error('You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          if (typeof component !== 'object') {\r\n              throw new Error(\"You passed a \".concat(typeof component, \", an instance of component is expected\"));\r\n          }\r\n          var componentName = getComponentName(component);\r\n          if (this.components[componentName]) {\r\n              if (this.components[componentName] === component) {\r\n                  return component;\r\n              }\r\n              this.removeComponent(this.components[componentName], false);\r\n          }\r\n          return this.addComponent(component);\r\n      };\r\n      Entity.prototype.hasComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' &&\r\n              typeOfComponent !== 'object' &&\r\n              typeOfComponent !== 'function') {\r\n              throw new Error('Entity#has(component): component is not a class, name or instance');\r\n          }\r\n          if (component === null)\r\n              return false;\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return false;\r\n          }\r\n          if (typeOfComponent === 'object') {\r\n              return storedComponent === component;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              return storedComponent instanceof component;\r\n          }\r\n          return true;\r\n      };\r\n      Entity.prototype.getComponent = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#get(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              throw new Error(\"Can not get component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  throw new Error(\"Can not get component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\" (by instance)\"));\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      Entity.prototype.getComponentOrNull = function (component) {\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' && typeOfComponent !== 'function') {\r\n              throw new Error('Entity#getOrNull(component): component is not a class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              return null;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  return storedComponent;\r\n              }\r\n              else {\r\n                  return null;\r\n              }\r\n          }\r\n          return storedComponent;\r\n      };\r\n      /**\r\n       * Gets a component, if it doesn't exist, it creates the component and returns it.\r\n       * @param component - component class\r\n       */\r\n      Entity.prototype.getComponentOrCreate = function (component) {\r\n          if (typeof component !== 'function') {\r\n              throw new Error('Entity#getOrCreate(component): component is not a class');\r\n          }\r\n          var ret = this.getComponentOrNull(component);\r\n          if (!ret) {\r\n              ret = new component();\r\n              // Safe-guard to only add registered components to entities\r\n              getComponentName(ret);\r\n              this.addComponentOrReplace(ret);\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Adds a component. If the component already exist, it throws an Error.\r\n       * @param component - component instance.\r\n       */\r\n      Entity.prototype.addComponent = function (component) {\r\n          if (typeof component !== 'object') {\r\n              throw new Error('Entity#add(component): You passed a function or class as a component, an instance of component is expected');\r\n          }\r\n          var componentName = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          if (this.components[componentName]) {\r\n              throw new Error(\"A component of type \\\"\".concat(componentName, \"\\\" is already present in entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n          }\r\n          this.components[componentName] = component;\r\n          if (this.eventManager) {\r\n              this.eventManager.fireEvent(new ComponentAdded(this, componentName, classId));\r\n          }\r\n          var storedComponent = component;\r\n          if (typeof storedComponent.addedToEntity === 'function') {\r\n              storedComponent.addedToEntity(this);\r\n          }\r\n          return component;\r\n      };\r\n      Entity.prototype.removeComponent = function (\r\n      // eslint-disable-next-line @typescript-eslint/ban-types\r\n      component, triggerRemovedEvent) {\r\n          if (triggerRemovedEvent === void 0) { triggerRemovedEvent = true; }\r\n          var typeOfComponent = typeof component;\r\n          if (typeOfComponent !== 'string' &&\r\n              typeOfComponent !== 'function' &&\r\n              typeOfComponent !== 'object') {\r\n              throw new Error('Entity#remove(component): component is not a class, class or name');\r\n          }\r\n          var componentName = typeOfComponent === 'string'\r\n              ? component\r\n              : getComponentName(component);\r\n          var storedComponent = this.components[componentName];\r\n          if (!storedComponent) {\r\n              log(\"Entity Warning: Trying to remove inexisting component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n              return;\r\n          }\r\n          if (typeOfComponent === 'function') {\r\n              if (storedComponent instanceof component) {\r\n                  delete this.components[componentName];\r\n                  if (storedComponent) {\r\n                      if (triggerRemovedEvent && this.eventManager) {\r\n                          this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n                      }\r\n                      if (typeof storedComponent.removedFromEntity === 'function') {\r\n                          storedComponent.removedFromEntity(this);\r\n                      }\r\n                  }\r\n                  return;\r\n              }\r\n              else {\r\n                  log(\"Entity Warning: Trying to remove wrong (by constructor) component \\\"\".concat(componentName, \"\\\" from entity \\\"\").concat(this.identifier, \"\\\"\"));\r\n                  return;\r\n              }\r\n          }\r\n          delete this.components[componentName];\r\n          if (storedComponent) {\r\n              if (triggerRemovedEvent && this.eventManager) {\r\n                  this.eventManager.fireEvent(new ComponentRemoved(this, componentName, storedComponent));\r\n              }\r\n              if (typeof storedComponent.removedFromEntity === 'function') {\r\n                  storedComponent.removedFromEntity(this);\r\n              }\r\n          }\r\n          return;\r\n      };\r\n      /**\r\n       * Returns true if the entity is already added to the engine.\r\n       * Returns false if no engine was defined.\r\n       */\r\n      Entity.prototype.isAddedToEngine = function () {\r\n          if (this.engine &&\r\n              (this.uuid in this.engine.entities || this.engine.rootEntity === this)) {\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Sets the parent entity\r\n       */\r\n      Entity.prototype.setParent = function (_parent) {\r\n          var newParent;\r\n          // Check if parent is of type Attachable\r\n          if (_parent && 'getEntityRepresentation' in _parent) {\r\n              if (!this.engine) {\r\n                  throw new Error(\"In order to set an attachable as parent, you first need to add the entity to the engine.\");\r\n              }\r\n              newParent = _parent.getEntityRepresentation(this.engine);\r\n          }\r\n          else {\r\n              newParent = !_parent && this.engine ? this.engine.rootEntity : _parent;\r\n          }\r\n          var currentParent = this.getParent();\r\n          if (newParent === this) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\".concat(this.identifier, \"\\\": An entity can't set itself as a its own parent\"));\r\n          }\r\n          if (newParent === currentParent) {\r\n              return this;\r\n          }\r\n          var circularAncestor = this.getCircularAncestor(newParent);\r\n          if (circularAncestor) {\r\n              throw new Error(\"Failed to set parent for entity \\\"\".concat(this.identifier, \"\\\": Circular parent references are not allowed (See entity \\\"\").concat(circularAncestor, \"\\\")\"));\r\n          }\r\n          if (currentParent) {\r\n              delete currentParent.children[this.uuid];\r\n          }\r\n          // Make sure that the parent and child are both on the engine, or off the engine, together\r\n          if (newParent !== null && newParent.uuid !== '0') {\r\n              if (!newParent.isAddedToEngine() && this.isAddedToEngine()) {\r\n                  this.engine.removeEntity(this);\r\n              }\r\n              if (newParent.isAddedToEngine() && !this.isAddedToEngine()) {\r\n                  newParent.engine.addEntity(this);\r\n              }\r\n          }\r\n          this._parent = newParent || null;\r\n          this.registerAsChild();\r\n          if (this.eventManager && this.engine) {\r\n              this.eventManager.fireEvent(new ParentChanged(this, newParent));\r\n          }\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the parent entity\r\n       */\r\n      Entity.prototype.getParent = function () {\r\n          return this._parent;\r\n      };\r\n      Object.defineProperty(Entity.prototype, \"identifier\", {\r\n          get: function () {\r\n              return this.name || this.uuid;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Entity.prototype.getCircularAncestor = function (ent) {\r\n          var root = this.engine ? this.engine.rootEntity : null;\r\n          var e = ent;\r\n          while (e && e !== root) {\r\n              var parent = e.getParent();\r\n              if (parent === this) {\r\n                  return e.uuid;\r\n              }\r\n              e = parent;\r\n          }\r\n          return null;\r\n      };\r\n      Entity.prototype.registerAsChild = function () {\r\n          var parent = this.getParent();\r\n          if (this.uuid && parent) {\r\n              parent.children[this.uuid] = this;\r\n          }\r\n      };\r\n      return Entity;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var Engine = /** @class */ (function () {\r\n      function Engine(rootEntity) {\r\n          this.eventManager = new EventManager();\r\n          // @internal\r\n          this.systems = [];\r\n          // @internal\r\n          this.entityLists = {};\r\n          // @internal\r\n          this.addedSystems = [];\r\n          this._entities = {};\r\n          this._disposableComponents = {};\r\n          this._componentGroups = {};\r\n          // systems that doesn't require any component or handle their own logic\r\n          this.simpleSystems = [];\r\n          this.eventManager.addListener(ComponentAdded, this, this.componentAddedHandler);\r\n          this.eventManager.addListener(ComponentRemoved, this, this.componentRemovedHandler);\r\n          this.rootEntity = rootEntity;\r\n          this.firstPersonCameraEntity = new Entity();\r\n          this.firstPersonCameraEntity.uuid =\r\n              'FirstPersonCameraEntityReference';\r\n          this.addEntity(this.firstPersonCameraEntity);\r\n          this.avatarEntity = new Entity();\r\n          this.avatarEntity.uuid = 'AvatarEntityReference';\r\n          this.addEntity(this.avatarEntity);\r\n      }\r\n      Object.defineProperty(Engine.prototype, \"entities\", {\r\n          get: function () {\r\n              return this._entities;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Engine.prototype, \"disposableComponents\", {\r\n          get: function () {\r\n              return this._disposableComponents;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Engine.prototype.addEntity = function (entity) {\r\n          var parent = entity.getParent();\r\n          if (entity.isAddedToEngine()) {\r\n              return entity;\r\n          }\r\n          entity.eventManager = this.eventManager;\r\n          entity.engine = this;\r\n          this._entities[entity.uuid] = entity;\r\n          this.checkRequirementsAndAdd(entity);\r\n          if (!parent) {\r\n              entity.setParent(this.rootEntity);\r\n          }\r\n          else {\r\n              if (!parent.isAddedToEngine() && parent !== this.rootEntity) {\r\n                  log('Engine: warning, added an entity with a parent not present in the engine. Parent id: ' +\r\n                      parent.uuid);\r\n              }\r\n          }\r\n          entity.alive = true;\r\n          for (var i in entity.children) {\r\n              var child = entity.children[i];\r\n              if (child) {\r\n                  if (!child.isAddedToEngine()) {\r\n                      this.addEntity(child);\r\n                  }\r\n              }\r\n          }\r\n          return entity;\r\n      };\r\n      Engine.prototype.removeEntity = function (entity) {\r\n          var id = entity.uuid;\r\n          if (entity.isAddedToEngine()) {\r\n              for (var componentName in entity.components) {\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      for (var groupIndex in componentGroups) {\r\n                          componentGroups[groupIndex].removeEntity(entity);\r\n                      }\r\n                  }\r\n                  delete this.entityLists[componentName][id];\r\n              }\r\n              for (var i = 0; i < this.simpleSystems.length; i++) {\r\n                  var system = this.simpleSystems[i];\r\n                  if (system.onRemoveEntity) {\r\n                      system.onRemoveEntity(entity);\r\n                  }\r\n              }\r\n              for (var i in entity.children) {\r\n                  var child = entity.children[i];\r\n                  if (child) {\r\n                      this.removeEntity(child);\r\n                  }\r\n              }\r\n              entity.alive = false;\r\n              entity.eventManager = null;\r\n              delete this._entities[id];\r\n              return true;\r\n          }\r\n          else {\r\n              log('Engine: Trying to remove non existent entity from engine.');\r\n              if (!entity.isAddedToEngine()) {\r\n                  log(\"Engine: Entity \\\"\".concat(entity.uuid, \"\\\" has not been added to any engine yet.\"));\r\n              }\r\n              else {\r\n                  log('Engine: Entity id: ' + id);\r\n              }\r\n              log(\"Engine: Entity's components:\");\r\n              for (var componentName in entity.components) {\r\n                  log(componentName);\r\n              }\r\n              return false;\r\n          }\r\n      };\r\n      Engine.prototype.addSystem = function (system, priority) {\r\n          if (priority === void 0) { priority = 0; }\r\n          if (this.addedSystems.indexOf(system) !== -1) {\r\n              log('Engine: Trying to add a system that is already added. Aborting');\r\n              return system;\r\n          }\r\n          if (this.systems.length > 0) {\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var entry = this.systems[i];\r\n                  var isLast = i === this.systems.length - 1;\r\n                  if (entry.priority > priority) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n                  else if (isLast) {\r\n                      this.addedSystems.push(system);\r\n                      this.systems.splice(i + 1, 0, { system: system, priority: priority });\r\n                      break;\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.addedSystems.push(system);\r\n              this.systems.splice(1, 0, { system: system, priority: priority });\r\n          }\r\n          this.registerSystem(system);\r\n          return system;\r\n      };\r\n      Engine.prototype.removeSystem = function (system) {\r\n          var idx = this.addedSystems.indexOf(system);\r\n          if (idx !== -1) {\r\n              system.active = false;\r\n              if (system.deactivate) {\r\n                  system.deactivate();\r\n              }\r\n              this.addedSystems.splice(idx, 1);\r\n              for (var i = 0; i < this.systems.length; i++) {\r\n                  var sys = this.systems[i].system;\r\n                  if (sys === system) {\r\n                      this.systems.splice(i, 1);\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.update = function (dt) {\r\n          for (var i in this.systems) {\r\n              var system = this.systems[i].system;\r\n              if (system.active && system.update) {\r\n                  try {\r\n                      system.update(dt);\r\n                  }\r\n                  catch (e) {\r\n                      // TODO: e may not be an Error\r\n                      error(e);\r\n                  }\r\n              }\r\n          }\r\n          return this;\r\n      };\r\n      Engine.prototype.getEntitiesWithComponent = function (component) {\r\n          var componentName = typeof component === 'string' ? component : getComponentName(component);\r\n          if (componentName in this.entityLists) {\r\n              return this.entityLists[componentName];\r\n          }\r\n          else {\r\n              return (this.entityLists[componentName] = {});\r\n          }\r\n      };\r\n      Engine.prototype.registerComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          var name = getComponentName(component);\r\n          var classId = getComponentClassId(component);\r\n          this._disposableComponents[id] = component;\r\n          if (classId !== null) {\r\n              this.eventManager.fireEvent(new DisposableComponentCreated(id, name, classId));\r\n              this.eventManager.fireEvent(new DisposableComponentUpdated(id, component));\r\n          }\r\n      };\r\n      Engine.prototype.disposeComponent = function (component) {\r\n          var id = getComponentId(component);\r\n          if (delete this._disposableComponents[id]) {\r\n              this.eventManager.fireEvent(new DisposableComponentRemoved(id));\r\n              if (component.onDispose) {\r\n                  component.onDispose();\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.updateComponent = function (component) {\r\n          this.eventManager.fireEvent(new DisposableComponentUpdated(getComponentId(component), component));\r\n      };\r\n      Engine.prototype.getComponentGroup = function () {\r\n          var requires = [];\r\n          for (var _i = 0; _i < arguments.length; _i++) {\r\n              requires[_i] = arguments[_i];\r\n          }\r\n          var componentGroup = undefined;\r\n          // Return an already created component-group if it already exists\r\n          if (requires.length > 0) {\r\n              // 1. get component groups for first require\r\n              var componentGroups = this._componentGroups[getComponentName(requires[0])];\r\n              if (componentGroups) {\r\n                  var components = requires.slice();\r\n                  // 2. search for a component group that has all the same requirements\r\n                  for (var i = 0; i < componentGroups.length; i++) {\r\n                      var traversedComponentGroup = componentGroups[i];\r\n                      if (components.length === traversedComponentGroup.requires.length) {\r\n                          for (var j = 0; j < components.length; j++) {\r\n                              if (traversedComponentGroup.requires.indexOf(components[j]) === -1)\r\n                                  break;\r\n                              if (j === components.length - 1) {\r\n                                  componentGroup = traversedComponentGroup;\r\n                              }\r\n                          }\r\n                          if (componentGroup)\r\n                              break;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          if (componentGroup) {\r\n              // 3. Found an existent component group with the exact same requirements\r\n              return componentGroup;\r\n          }\r\n          // Otherwise create and store it\r\n          componentGroup = new (ComponentGroup.bind.apply(ComponentGroup, __spreadArray([void 0], __read(requires))))();\r\n          componentGroup.active = true;\r\n          var requiresNames = componentGroup.requiresNames;\r\n          for (var i = 0; i < requiresNames.length; i++) {\r\n              var componentName = requiresNames[i];\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (!componentGroups) {\r\n                  this._componentGroups[componentName] = componentGroups = [];\r\n              }\r\n              if (componentGroups.indexOf(componentGroup) === -1) {\r\n                  componentGroups.push(componentGroup);\r\n              }\r\n          }\r\n          for (var entityId in this._entities) {\r\n              this.checkRequirements(this._entities[entityId], componentGroup);\r\n          }\r\n          return componentGroup;\r\n      };\r\n      Engine.prototype.removeComponentGroup = function (componentGroup) {\r\n          if (componentGroup.active) {\r\n              componentGroup.active = false;\r\n              var requiresNames = componentGroup.requiresNames;\r\n              for (var i = 0; i < requiresNames.length; i++) {\r\n                  var componentName = requiresNames[i];\r\n                  var componentGroups = this._componentGroups[componentName];\r\n                  if (componentGroups) {\r\n                      var idx = componentGroups.indexOf(componentGroup);\r\n                      if (idx !== -1) {\r\n                          componentGroups.splice(idx, 1);\r\n                      }\r\n                  }\r\n              }\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      Engine.prototype.registerSystem = function (system) {\r\n          system.active = true;\r\n          if (system.activate) {\r\n              system.activate(this);\r\n          }\r\n          this.simpleSystems.push(system);\r\n      };\r\n      Engine.prototype.checkRequirementsAndAdd = function (entity) {\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          for (var componentName in entity.components) {\r\n              if (!(componentName in this.entityLists)) {\r\n                  this.entityLists[componentName] = {};\r\n              }\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n              var componentGroups = this._componentGroups[componentName];\r\n              if (componentGroups) {\r\n                  for (var systemIndex in componentGroups) {\r\n                      this.checkRequirements(entity, componentGroups[systemIndex]);\r\n                  }\r\n              }\r\n          }\r\n          for (var i = 0; i < this.simpleSystems.length; i++) {\r\n              var system = this.simpleSystems[i];\r\n              if (system.onAddEntity) {\r\n                  system.onAddEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.checkRequirements = function (entity, system) {\r\n          if (system.meetsRequirements(entity)) {\r\n              if (!system.hasEntity(entity)) {\r\n                  system.addEntity(entity);\r\n              }\r\n          }\r\n          else {\r\n              if (system.hasEntity(entity)) {\r\n                  system.removeEntity(entity);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentAddedHandler = function (event) {\r\n          var _a;\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          if (!this.entityLists[componentName]) {\r\n              this.entityLists[componentName] = (_a = {}, _a[entity.uuid] = entity, _a);\r\n          }\r\n          else {\r\n              this.entityLists[componentName][entity.uuid] = entity;\r\n          }\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      Engine.prototype.componentRemovedHandler = function (event) {\r\n          // In case a single component gets removed from an entity, we inform\r\n          // all systems that this entity lost this specific component.\r\n          var entity = event.entity, componentName = event.componentName;\r\n          if (!entity.isAddedToEngine())\r\n              return;\r\n          delete this.entityLists[componentName][entity.uuid];\r\n          var componentGroups = this._componentGroups[componentName];\r\n          if (componentGroups) {\r\n              for (var i in componentGroups) {\r\n                  this.checkRequirements(entity, componentGroups[i]);\r\n              }\r\n          }\r\n      };\r\n      return Engine;\r\n  }());\n\n  var _defer = Promise.resolve().then.bind(Promise.resolve());\r\n  /**\r\n   * Executes an asynchronous task\r\n   * @param task - the task to execute\r\n   * @public\r\n   */\r\n  function executeTask(task) {\r\n      var result = _defer(task);\r\n      result.isComplete = false;\r\n      result\r\n          .then(function ($) {\r\n          result.isComplete = true;\r\n          result.result = $;\r\n          result.didFail = false;\r\n      })\r\n          .catch(function ($) {\r\n          result.isComplete = true;\r\n          result.error = $;\r\n          result.didFail = true;\r\n          error('executeTask: FAILED ' + $.toString(), $);\r\n      });\r\n      return result;\r\n  }\n\n  /**\r\n   * A class serves as a medium between the observable and its observers\r\n   * @public\r\n   */\r\n  var ObserverEventState = /** @class */ (function () {\r\n      /**\r\n       * Create a new EventState\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       */\r\n      function ObserverEventState(mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.initalize(mask, skipNextObservers, target, currentTarget);\r\n      }\r\n      /**\r\n       * Initialize the current event state\r\n       * @param mask - defines the mask associated with this state\r\n       * @param skipNextObservers - defines a flag which will instruct the observable to skip following observers when set to true\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns the current event state\r\n       */\r\n      ObserverEventState.prototype.initalize = function (mask, skipNextObservers, target, currentTarget) {\r\n          if (skipNextObservers === void 0) { skipNextObservers = false; }\r\n          this.mask = mask;\r\n          this.skipNextObservers = skipNextObservers;\r\n          this.target = target;\r\n          this.currentTarget = currentTarget;\r\n          return this;\r\n      };\r\n      return ObserverEventState;\r\n  }());\r\n  /**\r\n   * Represent an Observer registered to a given Observable object.\r\n   * @public\r\n   */\r\n  var Observer = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observer\r\n       * @param callback - defines the callback to call when the observer is notified\r\n       * @param mask - defines the mask of the observer (used to filter notifications)\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       */\r\n      function Observer(\r\n      /**\r\n       * Defines the callback to call when the observer is notified\r\n       */\r\n      callback, \r\n      /**\r\n       * Defines the mask of the observer (used to filter notifications)\r\n       */\r\n      mask, \r\n      /**\r\n       * Defines the current scope used to restore the JS context\r\n       */\r\n      scope) {\r\n          if (scope === void 0) { scope = null; }\r\n          this.callback = callback;\r\n          this.mask = mask;\r\n          this.scope = scope;\r\n          /**\r\n           * Gets or sets a property defining that the observer as to be unregistered after the next notification\r\n           */\r\n          this.unregisterOnNextCall = false;\r\n          /** For internal usage */\r\n          this._willBeUnregistered = false;\r\n      }\r\n      return Observer;\r\n  }());\r\n  /**\r\n   * Represent a list of observers registered to multiple Observables object.\r\n   * @public\r\n   */\r\n  var MultiObserver = /** @class */ (function () {\r\n      function MultiObserver() {\r\n          this._observers = null;\r\n          this._observables = null;\r\n      }\r\n      /**\r\n       * Raise a callback when one of the observable will notify\r\n       * @param observables - defines a list of observables to watch\r\n       * @param callback - defines the callback to call on notification\r\n       * @param mask - defines the mask used to filter notifications\r\n       * @param scope - defines the current scope used to restore the JS context\r\n       * @returns the new MultiObserver\r\n       */\r\n      MultiObserver.Watch = function (observables, callback, mask, scope) {\r\n          var e_1, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (scope === void 0) { scope = null; }\r\n          var result = new MultiObserver();\r\n          result._observers = new Array();\r\n          result._observables = observables;\r\n          try {\r\n              for (var observables_1 = __values(observables), observables_1_1 = observables_1.next(); !observables_1_1.done; observables_1_1 = observables_1.next()) {\r\n                  var observable = observables_1_1.value;\r\n                  var observer = observable.add(callback, mask, false, scope);\r\n                  if (observer) {\r\n                      result._observers.push(observer);\r\n                  }\r\n              }\r\n          }\r\n          catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n          finally {\r\n              try {\r\n                  if (observables_1_1 && !observables_1_1.done && (_a = observables_1.return)) _a.call(observables_1);\r\n              }\r\n              finally { if (e_1) throw e_1.error; }\r\n          }\r\n          return result;\r\n      };\r\n      /**\r\n       * Release associated resources\r\n       */\r\n      MultiObserver.prototype.dispose = function () {\r\n          if (this._observers && this._observables) {\r\n              for (var index = 0; index < this._observers.length; index++) {\r\n                  this._observables[index].remove(this._observers[index]);\r\n              }\r\n          }\r\n          this._observers = null;\r\n          this._observables = null;\r\n      };\r\n      return MultiObserver;\r\n  }());\r\n  /**\r\n   * The Observable class is a simple implementation of the Observable pattern.\r\n   *\r\n   * There's one slight particularity though: a given Observable can notify its observer using a particular mask value, only the Observers registered with this mask value will be notified.\r\n   * This enable a more fine grained execution without having to rely on multiple different Observable objects.\r\n   * For instance you may have a given Observable that have four different types of notifications: Move (mask = 0x01), Stop (mask = 0x02), Turn Right (mask = 0X04), Turn Left (mask = 0X08).\r\n   * A given observer can register itself with only Move and Stop (mask = 0x03), then it will only be notified when one of these two occurs and will never be for Turn Left/Right.\r\n   *\r\n   * @public\r\n   */\r\n  var Observable = /** @class */ (function () {\r\n      /**\r\n       * Creates a new observable\r\n       * @param onObserverAdded - defines a callback to call when a new observer is added\r\n       */\r\n      function Observable(onObserverAdded) {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n          this._eventState = new ObserverEventState(0);\r\n          if (onObserverAdded) {\r\n              this._onObserverAdded = onObserverAdded;\r\n          }\r\n      }\r\n      /**\r\n       * Create a new Observer with the specified callback\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @param mask - the mask used to filter observers\r\n       * @param insertFirst - if true the callback will be inserted at the first position, hence executed before the others ones. If false (default behavior) the callback will be inserted at the last position, executed after all the others already present.\r\n       * @param scope - optional scope for the callback to be called from\r\n       * @param unregisterOnFirstCall - defines if the observer as to be unregistered after the next notification\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.add = function (callback, mask, insertFirst, scope, unregisterOnFirstCall) {\r\n          if (mask === void 0) { mask = -1; }\r\n          if (insertFirst === void 0) { insertFirst = false; }\r\n          if (scope === void 0) { scope = null; }\r\n          if (unregisterOnFirstCall === void 0) { unregisterOnFirstCall = false; }\r\n          if (!callback) {\r\n              return null;\r\n          }\r\n          var observer = new Observer(callback, mask, scope);\r\n          observer.unregisterOnNextCall = unregisterOnFirstCall;\r\n          if (insertFirst) {\r\n              this._observers.unshift(observer);\r\n          }\r\n          else {\r\n              this._observers.push(observer);\r\n          }\r\n          if (this._onObserverAdded) {\r\n              this._onObserverAdded(observer);\r\n          }\r\n          return observer;\r\n      };\r\n      /**\r\n       * Create a new Observer with the specified callback and unregisters after the next notification\r\n       * @param callback - the callback that will be executed for that Observer\r\n       * @returns the new observer created for the callback\r\n       */\r\n      Observable.prototype.addOnce = function (callback) {\r\n          return this.add(callback, undefined, undefined, undefined, true);\r\n      };\r\n      /**\r\n       * Remove an Observer from the Observable object\r\n       * @param observer - the instance of the Observer to remove\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._deferUnregister(observer);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Remove a callback from the Observable object\r\n       * @param callback - the callback to remove\r\n       * @param scope - optional scope. If used only the callbacks with this scope will be removed\r\n       * @returns false if it doesn't belong to this Observable\r\n       */\r\n      Observable.prototype.removeCallback = function (callback, scope) {\r\n          for (var index = 0; index < this._observers.length; index++) {\r\n              if (this._observers[index].callback === callback &&\r\n                  (!scope || scope === this._observers[index].scope)) {\r\n                  this._deferUnregister(this._observers[index]);\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n      };\r\n      /**\r\n       * Notify all Observers by calling their respective callback with the given data\r\n       * Will return true if all observers were executed, false if an observer set skipNextObservers to true, then prevent the subsequent ones to execute\r\n       * @param eventData - defines the data to send to all observers\r\n       * @param mask - defines the mask of the current notification (observers with incompatible mask (ie mask & observer.mask === 0) will not be notified)\r\n       * @param target - defines the original target of the state\r\n       * @param currentTarget - defines the current target of the state\r\n       * @returns false if the complete observer chain was not processed (because one observer set the skipNextObservers to true)\r\n       */\r\n      Observable.prototype.notifyObservers = function (eventData, mask, target, currentTarget) {\r\n          var e_2, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          if (!this._observers.length) {\r\n              return true;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          state.lastReturnValue = eventData;\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs._willBeUnregistered) {\r\n                      continue;\r\n                  }\r\n                  if (obs.mask & mask) {\r\n                      if (obs.scope) {\r\n                          state.lastReturnValue = obs.callback.apply(obs.scope, [\r\n                              eventData,\r\n                              state\r\n                          ]);\r\n                      }\r\n                      else {\r\n                          state.lastReturnValue = obs.callback(eventData, state);\r\n                      }\r\n                      if (obs.unregisterOnNextCall) {\r\n                          this._deferUnregister(obs);\r\n                      }\r\n                  }\r\n                  if (state.skipNextObservers) {\r\n                      return false;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_2) throw e_2.error; }\r\n          }\r\n          return true;\r\n      };\r\n      /**\r\n       * Calling this will execute each callback, expecting it to be a promise or return a value.\r\n       * If at any point in the chain one function fails, the promise will fail and the execution will not continue.\r\n       * This is useful when a chain of events (sometimes async events) is needed to initialize a certain object\r\n       * and it is crucial that all callbacks will be executed.\r\n       * The order of the callbacks is kept, callbacks are not executed parallel.\r\n       *\r\n       * @param eventData - The data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       * @param target - defines the callback target (see EventState)\r\n       * @param currentTarget - defines he current object in the bubbling phase\r\n       * @returns will return a Promise than resolves when all callbacks executed successfully.\r\n       */\r\n      Observable.prototype.notifyObserversWithPromise = function (eventData, mask, target, currentTarget) {\r\n          var _this = this;\r\n          if (mask === void 0) { mask = -1; }\r\n          // create an empty promise\r\n          var p = Promise.resolve(eventData);\r\n          // no observers? return this promise.\r\n          if (!this._observers.length) {\r\n              return p;\r\n          }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.target = target;\r\n          state.currentTarget = currentTarget;\r\n          state.skipNextObservers = false;\r\n          // execute one callback after another (not using Promise.all, the order is important)\r\n          this._observers.forEach(function (obs) {\r\n              if (state.skipNextObservers) {\r\n                  return;\r\n              }\r\n              if (obs._willBeUnregistered) {\r\n                  return;\r\n              }\r\n              if (obs.mask & mask) {\r\n                  if (obs.scope) {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback.apply(obs.scope, [eventData, state]);\r\n                      });\r\n                  }\r\n                  else {\r\n                      p = p.then(function (lastReturnedValue) {\r\n                          state.lastReturnValue = lastReturnedValue;\r\n                          return obs.callback(eventData, state);\r\n                      });\r\n                  }\r\n                  if (obs.unregisterOnNextCall) {\r\n                      _this._deferUnregister(obs);\r\n                  }\r\n              }\r\n          });\r\n          // return the eventData\r\n          return p.then(function () {\r\n              return eventData;\r\n          });\r\n      };\r\n      /**\r\n       * Notify a specific observer\r\n       * @param observer - defines the observer to notify\r\n       * @param eventData - defines the data to be sent to each callback\r\n       * @param mask - is used to filter observers defaults to -1\r\n       */\r\n      Observable.prototype.notifyObserver = function (observer, eventData, mask) {\r\n          if (mask === void 0) { mask = -1; }\r\n          var state = this._eventState;\r\n          state.mask = mask;\r\n          state.skipNextObservers = false;\r\n          observer.callback(eventData, state);\r\n      };\r\n      /**\r\n       * Gets a boolean indicating if the observable has at least one observer\r\n       * @returns true is the Observable has at least one Observer registered\r\n       */\r\n      Observable.prototype.hasObservers = function () {\r\n          return this._observers.length > 0;\r\n      };\r\n      /**\r\n       * Clear the list of observers\r\n       */\r\n      Observable.prototype.clear = function () {\r\n          this._observers = new Array();\r\n          this._onObserverAdded = null;\r\n      };\r\n      /**\r\n       * Clone the current observable\r\n       * @returns a new observable\r\n       */\r\n      Observable.prototype.clone = function () {\r\n          var result = new Observable();\r\n          result._observers = this._observers.slice(0);\r\n          return result;\r\n      };\r\n      /**\r\n       * Does this observable handles observer registered with a given mask\r\n       * @param mask - defines the mask to be tested\r\n       * @returns whether or not one observer registered with the given mask is handeled\r\n       */\r\n      Observable.prototype.hasSpecificMask = function (mask) {\r\n          var e_3, _a;\r\n          if (mask === void 0) { mask = -1; }\r\n          try {\r\n              for (var _b = __values(this._observers), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                  var obs = _c.value;\r\n                  if (obs.mask & mask || obs.mask === mask) {\r\n                      return true;\r\n                  }\r\n              }\r\n          }\r\n          catch (e_3_1) { e_3 = { error: e_3_1 }; }\r\n          finally {\r\n              try {\r\n                  if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n              }\r\n              finally { if (e_3) throw e_3.error; }\r\n          }\r\n          return false;\r\n      };\r\n      Observable.prototype._deferUnregister = function (observer) {\r\n          var _this = this;\r\n          observer.unregisterOnNextCall = false;\r\n          observer._willBeUnregistered = true;\r\n          void executeTask(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\r\n              return [2 /*return*/, this._remove(observer)];\r\n          }); }); });\r\n      };\r\n      // This should only be called when not iterating over _observers to avoid callback skipping.\r\n      // Removes an observer from the _observer Array.\r\n      Observable.prototype._remove = function (observer) {\r\n          if (!observer) {\r\n              return false;\r\n          }\r\n          var index = this._observers.indexOf(observer);\r\n          if (index !== -1) {\r\n              this._observers.splice(index, 1);\r\n              return true;\r\n          }\r\n          return false;\r\n      };\r\n      return Observable;\r\n  }());\n\n  var modulePromise;\r\n  /**\r\n   * teleport player to a destination\r\n   * @param destination - \"coordX,coordY\", \"magic\", \"crowd\"\r\n   * @public\r\n   */\r\n  function teleportTo(destination) {\r\n      // error(`teleportTo(destination) was deprecated. Please use:\r\n      // import {requestTeleport} from '@decentraland/UserActionModule'\r\n      // executeTask(async () => {\r\n      //   await requestTeleport(destination)\r\n      // })`)\r\n      callModuleRpc('requestTeleport', [destination]);\r\n  }\r\n  function ensureModule() {\r\n      if (typeof modulePromise === 'undefined' && typeof dcl !== 'undefined') {\r\n          modulePromise = dcl.loadModule('@decentraland/UserActionModule', {});\r\n      }\r\n      return typeof modulePromise !== 'undefined' && typeof dcl !== 'undefined';\r\n  }\r\n  function callModuleRpc(methodName, args) {\r\n      if (ensureModule()) {\r\n          modulePromise.then(function ($) {\r\n              void dcl.callRpc($.rpcHandle, methodName, args);\r\n          });\r\n      }\r\n  }\n\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEvent = /** @class */ (function () {\r\n      function UUIDEvent(uuid, payload) {\r\n          this.uuid = uuid;\r\n          this.payload = payload;\r\n      }\r\n      UUIDEvent = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], UUIDEvent);\r\n      return UUIDEvent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var RaycastResponse = /** @class */ (function () {\r\n      function RaycastResponse(payload) {\r\n          this.payload = payload;\r\n      }\r\n      RaycastResponse = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], RaycastResponse);\r\n      return RaycastResponse;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEvent = /** @class */ (function () {\r\n      function PointerEvent(payload) {\r\n          this.payload = payload;\r\n      }\r\n      PointerEvent = __decorate([\r\n          EventConstructor(),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], PointerEvent);\r\n      return PointerEvent;\r\n  }());\r\n  var internalDcl;\r\n  /**\r\n   * @internal\r\n   * This function generates a callback that is passed to the Observable\r\n   * constructor to subscribe to the events of the DecentralandInterface\r\n   */\r\n  function createSubscriber(eventName) {\r\n      return function () {\r\n          if (internalDcl) {\r\n              internalDcl.subscribe(eventName);\r\n          }\r\n      };\r\n  }\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onCameraModeChangedObservable = new Observable(createSubscriber('cameraModeChanged'));\r\n  /**\r\n   * This event is triggered when you change your camera between 1st and 3rd person\r\n   * @public\r\n   */\r\n  var onIdleStateChangedObservable = new Observable(createSubscriber('idleStateChanged'));\r\n  /**\r\n   * These events are triggered after your character enters the scene.\r\n   * @public\r\n   */\r\n  var onEnterSceneObservable = new Observable(createSubscriber('onEnterScene'));\r\n  /** @public @deprecated Use onEnterSceneObservable instead. */\r\n  var onEnterScene = onEnterSceneObservable;\r\n  /**\r\n   * These events are triggered after your character leaves the scene.\r\n   * @public\r\n   */\r\n  var onLeaveSceneObservable = new Observable(createSubscriber('onLeaveScene'));\r\n  /** @public @deprecated Use onLeaveSceneObservable instead. */\r\n  var onLeaveScene = onLeaveSceneObservable;\r\n  /**\r\n   * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)\r\n   * @public\r\n   */\r\n  var onSceneReadyObservable = new Observable(createSubscriber('sceneStart'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerExpressionObservable = new Observable(createSubscriber('playerExpression'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPointerLockedStateChange = new Observable(createSubscriber('onPointerLock'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onVideoEvent = new Observable(createSubscriber('videoEvent'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onProfileChanged = new Observable(createSubscriber('profileChanged'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerConnectedObservable = new Observable(createSubscriber('playerConnected'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerDisconnectedObservable = new Observable(createSubscriber('playerDisconnected'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onRealmChangedObservable = new Observable(createSubscriber('onRealmChanged'));\r\n  /**\r\n   * @public\r\n   */\r\n  var onPlayerClickedObservable = new Observable(createSubscriber('playerClicked'));\r\n  /**\r\n   * @internal\r\n   * This function adds _one_ listener to the onEvent event of dcl interface.\r\n   * Leveraging a switch to route events to the Observable handlers.\r\n   */\r\n  function _initEventObservables(dcl) {\r\n      // store internal reference to dcl, it is going to be used to subscribe to the events\r\n      internalDcl = dcl;\r\n      if (internalDcl) {\r\n          internalDcl.onEvent(function (event) {\r\n              switch (event.type) {\r\n                  case 'onEnterScene': {\r\n                      onEnterSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onLeaveScene': {\r\n                      onLeaveSceneObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'cameraModeChanged': {\r\n                      onCameraModeChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'idleStateChanged': {\r\n                      onIdleStateChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'sceneStart': {\r\n                      onSceneReadyObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerExpression': {\r\n                      onPlayerExpressionObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'videoEvent': {\r\n                      var videoData = event.data;\r\n                      var component = DisposableComponent.engine.disposableComponents[videoData.componentId];\r\n                      if (component) {\r\n                          component.update(videoData);\r\n                      }\r\n                      onVideoEvent.notifyObservers(videoData);\r\n                      return;\r\n                  }\r\n                  case 'profileChanged': {\r\n                      onProfileChanged.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onPointerLock': {\r\n                      onPointerLockedStateChange.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerConnected': {\r\n                      onPlayerConnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerDisconnected': {\r\n                      onPlayerDisconnectedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'onRealmChanged': {\r\n                      onRealmChangedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n                  case 'playerClicked': {\r\n                      onPlayerClickedObservable.notifyObservers(event.data);\r\n                      return;\r\n                  }\r\n              }\r\n          });\r\n      }\r\n  }\n\n  // This number is defined in the protocol ECS.SetEntityParent.3\r\n  var ROOT_ENTITY_ID = '0';\r\n  var DecentralandSynchronizationSystem = /** @class */ (function () {\r\n      function DecentralandSynchronizationSystem(dcl) {\r\n          this.dcl = dcl;\r\n          this.cachedComponents = {};\r\n      }\r\n      DecentralandSynchronizationSystem.prototype.activate = function (engine) {\r\n          var _this = this;\r\n          this.engine = engine;\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentCreated, this, this.disposableComponentCreated);\r\n          engine.eventManager.addListener(DisposableComponentRemoved, this, this.disposableComponentRemoved);\r\n          engine.eventManager.addListener(DisposableComponentUpdated, this, this.disposableComponentUpdated);\r\n          engine.eventManager.addListener(ParentChanged, this, this.parentChanged);\r\n          var rootId = engine.rootEntity.uuid;\r\n          this.dcl.addEntity(rootId);\r\n          // TODO(agus): send disposableComponents if exist\r\n          this.dcl.onUpdate(function (dt) {\r\n              engine.update(dt);\r\n              _this.presentEntities();\r\n          });\r\n          this.dcl.onEvent(function (event) {\r\n              var data = event.data;\r\n              switch (event.type) {\r\n                  case 'uuidEvent':\r\n                      engine.eventManager.fireEvent(new UUIDEvent(data.uuid, data.payload));\r\n                      break;\r\n                  case 'raycastResponse':\r\n                      if (data.queryType === 'HitFirst') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      else if (data.queryType === 'HitAll') {\r\n                          engine.eventManager.fireEvent(new RaycastResponse(data));\r\n                      }\r\n                      break;\r\n                  case 'actionButtonEvent':\r\n                      engine.eventManager.fireEvent(new PointerEvent(data.payload));\r\n                      break;\r\n              }\r\n          });\r\n      };\r\n      /**\r\n       * system.onAddEntity is called by the engine when a entity is added to the\r\n       * engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onAddEntity = function (entity) {\r\n          if (entity && entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              var parent = entity.getParent();\r\n              this.dcl.addEntity(entityId);\r\n              if (parent) {\r\n                  // If the entity has a parent, we send the the enparenting signal\r\n                  // otherwise the engine will know the entity is set as a child of\r\n                  // engine.rootEntity by default\r\n                  this.dcl.setParent(entityId, parent.uuid);\r\n              }\r\n              // This creates a cache dictionary to avoid send redundant information to\r\n              // the engine in order to avoid unnecessary work in the main thread.\r\n              this.cachedComponents[entityId] = {};\r\n              // this iterator sends the current components of te engine at the moment\r\n              // of addition\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null) {\r\n                      if (isDisposableComponent(component)) {\r\n                          // Send the attach component signal\r\n                          this.dcl.attachEntityComponent(entity.uuid, componentName, getComponentId(component));\r\n                      }\r\n                      else {\r\n                          var componentJson = JSON.stringify(component);\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entityId, componentName, classId, componentJson);\r\n                          // Update the cached copy of the sent component\r\n                          this.cachedComponents[entityId][componentName] = componentJson;\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * system.onRemoveEntity is called by the engine when a entity gets removed\r\n       * from the engine.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.onRemoveEntity = function (entity) {\r\n          if (entity.isAddedToEngine()) {\r\n              var entityId = entity.uuid;\r\n              // Send the removeEntity signal\r\n              this.dcl.removeEntity(entityId);\r\n              // Remove the caches from local memory\r\n              delete this.cachedComponents[entityId];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called at the end of every update cycle.\r\n       * It finds and sends updates in components of the engine entities.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.presentEntities = function () {\r\n          for (var i in this.engine.entities) {\r\n              var entity = this.engine.entities[i];\r\n              for (var componentName in entity.components) {\r\n                  var component = entity.components[componentName];\r\n                  var classId = getComponentClassId(component);\r\n                  if (classId !== null && !isDisposableComponent(component)) {\r\n                      var jsonRepresentation = this.getJsonIfDirty(entity.uuid, componentName, component);\r\n                      if (jsonRepresentation) {\r\n                          // Send the updated component\r\n                          this.dcl.updateEntityComponent(entity.uuid, componentName, classId, jsonRepresentation);\r\n                          this.clearDirty(entity.uuid, componentName, component, jsonRepresentation);\r\n                      }\r\n                  }\r\n              }\r\n          }\r\n          for (var id in this.engine.disposableComponents) {\r\n              var component = this.engine.disposableComponents[id];\r\n              if (component instanceof ObservableComponent && component.dirty) {\r\n                  this.dcl.componentUpdated(id, JSON.stringify(component));\r\n                  component.dirty = false;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a component is added to an entity. The event\r\n       * (param 1) contains the necessary information to notify the engine about the\r\n       * component that was added and the entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (isDisposableComponent(component)) {\r\n                  this.dcl.attachEntityComponent(event.entity.uuid, event.componentName, getComponentId(component));\r\n              }\r\n              else if (event.classId !== null) {\r\n                  var componentJson = JSON.stringify(component);\r\n                  // Send the updated component\r\n                  this.dcl.updateEntityComponent(event.entity.uuid, event.componentName, event.classId, componentJson);\r\n                  // Update the cached copy of the sent component\r\n                  this.cachedComponents[event.entity.uuid][event.componentName] =\r\n                      componentJson;\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * This method is called when a component is removed from an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              this.dcl.removeEntityComponent(event.entity.uuid, event.componentName);\r\n              // Remove the cached component so we can send it again when re-adding\r\n              delete this.cachedComponents[event.entity.uuid][event.componentName];\r\n          }\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is created.\r\n       * It instantiates the component in the engine, the event that updates the\r\n       * created component is fired immediatly after.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentCreated = function (event) {\r\n          this.dcl.componentCreated(event.componentId, event.componentName, event.classId);\r\n      };\r\n      /**\r\n       * This method is called after a disposableComponent is updated, once per\r\n       * update cycle and once after creation.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentRemoved = function (event) {\r\n          this.dcl.componentDisposed(event.componentId);\r\n      };\r\n      /**\r\n       * This method is called right after a diposableComponent gets disposed. That\r\n       * process is manual.\r\n       *\r\n       * TODO(menduz,dani): What happens if a disposableComponent gets disposed and\r\n       * it remains attached to some entities?\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.disposableComponentUpdated = function (event) {\r\n          this.dcl.componentUpdated(event.componentId, JSON.stringify(event.component));\r\n      };\r\n      /**\r\n       * This method is called when a parent changes in an entity.\r\n       */\r\n      DecentralandSynchronizationSystem.prototype.parentChanged = function (event) {\r\n          this.dcl.setParent(event.entity.uuid, event.parent ? event.parent.uuid : ROOT_ENTITY_ID);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.getJsonIfDirty = function (entityId, componentName, component) {\r\n          var jsonRepresentation = JSON.stringify(component);\r\n          return (jsonRepresentation !== this.cachedComponents[entityId][componentName] &&\r\n              jsonRepresentation);\r\n      };\r\n      DecentralandSynchronizationSystem.prototype.clearDirty = function (entityId, componentName, component, jsonRepresentation) {\r\n          this.cachedComponents[entityId][componentName] = jsonRepresentation;\r\n      };\r\n      return DecentralandSynchronizationSystem;\r\n  }());\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  var dist = {};\n\n  var types = {};\n\n  (function (exports) {\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  exports.RAD2DEG = exports.DEG2RAD = exports.Epsilon = exports.ToLinearSpace = exports.ToGammaSpace = exports.Space = exports.Orientation = void 0;\n  (function (Orientation) {\n      /**\n       * Clockwise\n       */\n      Orientation[Orientation[\"CW\"] = 0] = \"CW\";\n      /** Counter clockwise */\n      Orientation[Orientation[\"CCW\"] = 1] = \"CCW\";\n  })(exports.Orientation || (exports.Orientation = {}));\n  (function (Space) {\n      /** Local (object) space */\n      Space[Space[\"LOCAL\"] = 0] = \"LOCAL\";\n      /** World space */\n      Space[Space[\"WORLD\"] = 1] = \"WORLD\";\n      /** Bone space */\n      Space[Space[\"BONE\"] = 2] = \"BONE\";\n  })(exports.Space || (exports.Space = {}));\n  /**\n   * Constant used to convert a value to gamma space\n   * @public\n   */\n  exports.ToGammaSpace = 1 / 2.2;\n  /**\n   * Constant used to convert a value to linear space\n   * @public\n   */\n  exports.ToLinearSpace = 2.2;\n  /**\n   * Constant used to define the minimal number value in Babylon.js\n   * @public\n   */\n  exports.Epsilon = 0.000001;\n  /**\n   * Constant used to convert from Euler degrees to radians\n   * @public\n   */\n  exports.DEG2RAD = Math.PI / 180;\n  /**\n   * Constant used to convert from radians to Euler degrees\n   * @public\n   */\n  exports.RAD2DEG = 360 / (Math.PI * 2);\n\n  }(types));\n\n  var preallocatedVariables = {};\n\n  var utils = {};\n\n  Object.defineProperty(utils, \"__esModule\", { value: true });\n  utils.buildArray = void 0;\n  /**\n   * @internal\n   * Returns an array of the given size filled with element built from the given constructor and the paramters\n   * @param size - the number of element to construct and put in the array\n   * @param itemBuilder - a callback responsible for creating new instance of item. Called once per array entry.\n   * @returns a new array filled with new objects\n   * @internal\n   */\n  function buildArray(size, itemBuilder) {\n      const a = [];\n      for (let i = 0; i < size; ++i) {\n          a.push(itemBuilder());\n      }\n      return a;\n  }\n  utils.buildArray = buildArray;\n\n  var Vector3$1 = {};\n\n  var Quaternion$1 = {};\n\n  var Matrix$1 = {};\n\n  var Vector4$1 = {};\n\n  var Scalar$1 = {};\n\n  Object.defineProperty(Scalar$1, \"__esModule\", { value: true });\n  Scalar$1.Scalar = void 0;\n  /**\n   * Scalar computation library\n   * @public\n   */\n  class Scalar {\n      /**\n       * Boolean : true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n       * @param a - number\n       * @param b - number\n       * @param epsilon - (default = 1.401298E-45)\n       * @returns true if the absolute difference between a and b is lower than epsilon (default = 1.401298E-45)\n       */\n      static WithinEpsilon(a, b, epsilon = 1.401298e-45) {\n          const num = a - b;\n          return -epsilon <= num && num <= epsilon;\n      }\n      /**\n       * Returns a string : the upper case translation of the number i to hexadecimal.\n       * @param i - number\n       * @returns the upper case translation of the number i to hexadecimal.\n       */\n      static ToHex(i) {\n          const str = i.toString(16);\n          if (i <= 15) {\n              return ('0' + str).toUpperCase();\n          }\n          return str.toUpperCase();\n      }\n      /**\n       * Returns -1 if value is negative and +1 is value is positive.\n       * @param _value - the value\n       * @returns the value itself if it's equal to zero.\n       */\n      static Sign(value) {\n          const _value = +value; // convert to a number\n          if (_value === 0 || isNaN(_value)) {\n              return _value;\n          }\n          return _value > 0 ? 1 : -1;\n      }\n      /**\n       * Returns the value itself if it's between min and max.\n       * Returns min if the value is lower than min.\n       * Returns max if the value is greater than max.\n       * @param value - the value to clmap\n       * @param min - the min value to clamp to (default: 0)\n       * @param max - the max value to clamp to (default: 1)\n       * @returns the clamped value\n       */\n      static Clamp(value, min = 0, max = 1) {\n          return Math.min(max, Math.max(min, value));\n      }\n      /**\n       * the log2 of value.\n       * @param value - the value to compute log2 of\n       * @returns the log2 of value.\n       */\n      static Log2(value) {\n          return Math.log(value) * Math.LOG2E;\n      }\n      /**\n       * Loops the value, so that it is never larger than length and never smaller than 0.\n       *\n       * This is similar to the modulo operator but it works with floating point numbers.\n       * For example, using 3.0 for t and 2.5 for length, the result would be 0.5.\n       * With t = 5 and length = 2.5, the result would be 0.0.\n       * Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator\n       * @param value - the value\n       * @param length - the length\n       * @returns the looped value\n       */\n      static Repeat(value, length) {\n          return value - Math.floor(value / length) * length;\n      }\n      /**\n       * Normalize the value between 0.0 and 1.0 using min and max values\n       * @param value - value to normalize\n       * @param min - max to normalize between\n       * @param max - min to normalize between\n       * @returns the normalized value\n       */\n      static Normalize(value, min, max) {\n          return (value - min) / (max - min);\n      }\n      /**\n       * Denormalize the value from 0.0 and 1.0 using min and max values\n       * @param normalized - value to denormalize\n       * @param min - max to denormalize between\n       * @param max - min to denormalize between\n       * @returns the denormalized value\n       */\n      static Denormalize(normalized, min, max) {\n          return normalized * (max - min) + min;\n      }\n      /**\n       * Calculates the shortest difference between two given angles given in degrees.\n       * @param current - current angle in degrees\n       * @param target - target angle in degrees\n       * @returns the delta\n       */\n      static DeltaAngle(current, target) {\n          let num = Scalar.Repeat(target - current, 360.0);\n          if (num > 180.0) {\n              num -= 360.0;\n          }\n          return num;\n      }\n      /**\n       * PingPongs the value t, so that it is never larger than length and never smaller than 0.\n       * @param tx - value\n       * @param length - length\n       * @returns The returned value will move back and forth between 0 and length\n       */\n      static PingPong(tx, length) {\n          const t = Scalar.Repeat(tx, length * 2.0);\n          return length - Math.abs(t - length);\n      }\n      /**\n       * Interpolates between min and max with smoothing at the limits.\n       *\n       * This function interpolates between min and max in a similar way to Lerp. However, the interpolation will gradually speed up\n       * from the start and slow down toward the end. This is useful for creating natural-looking animation, fading and other transitions.\n       * @param from - from\n       * @param to - to\n       * @param tx - value\n       * @returns the smooth stepped value\n       */\n      static SmoothStep(from, to, tx) {\n          let t = Scalar.Clamp(tx);\n          t = -2.0 * t * t * t + 3.0 * t * t;\n          return to * t + from * (1.0 - t);\n      }\n      /**\n       * Moves a value current towards target.\n       *\n       * This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.\n       * Negative values of maxDelta pushes the value away from target.\n       * @param current - current value\n       * @param target - target value\n       * @param maxDelta - max distance to move\n       * @returns resulting value\n       */\n      static MoveTowards(current, target, maxDelta) {\n          let result = 0;\n          if (Math.abs(target - current) <= maxDelta) {\n              result = target;\n          }\n          else {\n              result = current + Scalar.Sign(target - current) * maxDelta;\n          }\n          return result;\n      }\n      /**\n       * Same as MoveTowards but makes sure the values interpolate correctly when they wrap around 360 degrees.\n       *\n       * Variables current and target are assumed to be in degrees. For optimization reasons, negative values of maxDelta\n       *  are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.\n       * @param current - current value\n       * @param target - target value\n       * @param maxDelta - max distance to move\n       * @returns resulting angle\n       */\n      static MoveTowardsAngle(current, target, maxDelta) {\n          const num = Scalar.DeltaAngle(current, target);\n          let result = 0;\n          if (-maxDelta < num && num < maxDelta) {\n              result = target;\n          }\n          else {\n              result = Scalar.MoveTowards(current, current + num, maxDelta);\n          }\n          return result;\n      }\n      /**\n       * Creates a new scalar with values linearly interpolated of \"amount\" between the start scalar and the end scalar.\n       * @param start - start value\n       * @param end - target value\n       * @param amount - amount to lerp between\n       * @returns the lerped value\n       */\n      static Lerp(start, end, amount) {\n          return start + (end - start) * amount;\n      }\n      /**\n       * Same as Lerp but makes sure the values interpolate correctly when they wrap around 360 degrees.\n       * The parameter t is clamped to the range [0, 1]. Variables a and b are assumed to be in degrees.\n       * @param start - start value\n       * @param end - target value\n       * @param amount - amount to lerp between\n       * @returns the lerped value\n       */\n      static LerpAngle(start, end, amount) {\n          let num = Scalar.Repeat(end - start, 360.0);\n          if (num > 180.0) {\n              num -= 360.0;\n          }\n          return start + num * Scalar.Clamp(amount);\n      }\n      /**\n       * Calculates the linear parameter t that produces the interpolant value within the range [a, b].\n       * @param a - start value\n       * @param b - target value\n       * @param value - value between a and b\n       * @returns the inverseLerp value\n       */\n      static InverseLerp(a, b, value) {\n          let result = 0;\n          if (a !== b) {\n              result = Scalar.Clamp((value - a) / (b - a));\n          }\n          else {\n              result = 0.0;\n          }\n          return result;\n      }\n      /**\n       * Returns a new scalar located for \"amount\" (float) on the Hermite spline defined by the scalars \"value1\", \"value3\", \"tangent1\", \"tangent2\".\n       * {@link http://mathworld.wolfram.com/HermitePolynomial.html}\n       * @param value1 - spline value\n       * @param tangent1 - spline value\n       * @param value2 - spline value\n       * @param tangent2 - spline value\n       * @param amount - input value\n       * @returns hermite result\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          return value1 * part1 + value2 * part2 + tangent1 * part3 + tangent2 * part4;\n      }\n      /**\n       * Returns a random float number between and min and max values\n       * @param min - min value of random\n       * @param max - max value of random\n       * @returns random value\n       */\n      static RandomRange(min, max) {\n          if (min === max) {\n              return min;\n          }\n          return Math.random() * (max - min) + min;\n      }\n      /**\n       * This function returns percentage of a number in a given range.\n       *\n       * RangeToPercent(40,20,60) will return 0.5 (50%)\n       * RangeToPercent(34,0,100) will return 0.34 (34%)\n       * @param num - to convert to percentage\n       * @param min - min range\n       * @param max - max range\n       * @returns the percentage\n       */\n      static RangeToPercent(num, min, max) {\n          return (num - min) / (max - min);\n      }\n      /**\n       * This function returns number that corresponds to the percentage in a given range.\n       *\n       * PercentToRange(0.34,0,100) will return 34.\n       * @param percent - to convert to number\n       * @param min - min range\n       * @param max - max range\n       * @returns the number\n       */\n      static PercentToRange(percent, min, max) {\n          return (max - min) * percent + min;\n      }\n      /**\n       * Returns the angle converted to equivalent value between -Math.PI and Math.PI radians.\n       * @param angle - The angle to normalize in radian.\n       * @returns The converted angle.\n       */\n      static NormalizeRadians(angle) {\n          // More precise but slower version kept for reference.\n          // tslint:disable:no-commented-out-code\n          /*\n            // angle = angle % Tools.TwoPi;\n            // angle = (angle + Tools.TwoPi) % Tools.TwoPi;\n      \n            //if (angle > Math.PI) {\n            //\tangle -= Tools.TwoPi;\n            //}\n             */\n          return angle - Scalar.TwoPi * Math.floor((angle + Math.PI) / Scalar.TwoPi);\n      }\n  }\n  Scalar$1.Scalar = Scalar;\n  /**\n   * Two pi constants convenient for computation.\n   */\n  Scalar.TwoPi = Math.PI * 2;\n\n  Object.defineProperty(Vector4$1, \"__esModule\", { value: true });\n  Vector4$1.Vector4 = void 0;\n  const types_1$8 = types;\n  const Scalar_1$6 = Scalar$1;\n  const Vector3_1$7 = Vector3$1;\n  /**\n   * Vector4 class created for EulerAngle class conversion to Quaternion\n   * @public\n   */\n  class Vector4 {\n      /**\n       * Creates a Vector4 object from the given floats.\n       * @param x - x value of the vector\n       * @param y - y value of the vector\n       * @param z - z value of the vector\n       * @param w - w value of the vector\n       */\n      constructor(\n      /** x value of the vector */\n      x, \n      /** y value of the vector */\n      y, \n      /** z value of the vector */\n      z, \n      /** w value of the vector */\n      w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n      }\n      // Statics\n      /**\n       * Returns a new Vector4 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector4(vector1.x, vector1.y, vector1.z, vector1.w).addInPlace(vector2);\n      }\n      /**\n       * Returns a new Vector4 set from the starting index of the given array.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @returns the new vector\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Updates the given vector \"result\" from the starting index of the given array.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @param result - the vector to store the result in\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n          result.z = array[offset + 2];\n          result.w = array[offset + 3];\n      }\n      /**\n       * Updates the given vector \"result\" from the starting index of the given FloatArray.\n       * @param array - the array to pull values from\n       * @param offset - the offset into the array to start at\n       * @param result - the vector to store the result in\n       */\n      static FromFloatArrayToRef(array, offset, result) {\n          Vector4.FromArrayToRef(array, offset, result);\n      }\n      /**\n       * Updates the given vector \"result\" coordinates from the given floats.\n       * @param x - float to set from\n       * @param y - float to set from\n       * @param z - float to set from\n       * @param w - float to set from\n       * @param result - the vector to the floats in\n       */\n      static FromFloatsToRef(x, y, z, w, result) {\n          result.x = x;\n          result.y = y;\n          result.z = z;\n          result.w = w;\n      }\n      /**\n       * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n       * @returns the new vector\n       */\n      static Zero() {\n          return new Vector4(0.0, 0.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n       * @returns the new vector\n       */\n      static One() {\n          return new Vector4(1.0, 1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a new normalized Vector4 from the given one.\n       * @param vector - the vector to normalize\n       * @returns the vector\n       */\n      static Normalize(vector) {\n          const result = Vector4.Zero();\n          Vector4.NormalizeToRef(vector, result);\n          return result;\n      }\n      /**\n       * Updates the given vector \"result\" from the normalization of the given one.\n       * @param vector - the vector to normalize\n       * @param result - the vector to store the result in\n       */\n      static NormalizeToRef(vector, result) {\n          result.copyFrom(vector);\n          result.normalize();\n      }\n      /**\n       * Returns a vector with the minimum values from the left and right vectors\n       * @param left - left vector to minimize\n       * @param right - right vector to minimize\n       * @returns a new vector with the minimum of the left and right vector values\n       */\n      static Minimize(left, right) {\n          const min = new Vector4(left.x, left.y, left.z, left.w);\n          min.minimizeInPlace(right);\n          return min;\n      }\n      /**\n       * Returns a vector with the maximum values from the left and right vectors\n       * @param left - left vector to maximize\n       * @param right - right vector to maximize\n       * @returns a new vector with the maximum of the left and right vector values\n       */\n      static Maximize(left, right) {\n          const max = new Vector4(left.x, left.y, left.z, left.w);\n          max.maximizeInPlace(right);\n          return max;\n      }\n      /**\n       * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the distance between\n       * @param value2 - value to calulate the distance between\n       * @returns the distance between the two vectors\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the distance between\n       * @param value2 - value to calulate the distance between\n       * @returns the distance between the two vectors squared\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          const z = value1.z - value2.z;\n          const w = value1.w - value2.w;\n          return x * x + y * y + z * z + w * w;\n      }\n      /**\n       * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n       * @param value1 - value to calulate the center between\n       * @param value2 - value to calulate the center between\n       * @returns the center between the two vectors\n       */\n      static Center(value1, value2) {\n          const center = Vector4.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n       * This methods computes transformed normalized direction vectors only.\n       * @param vector - the vector to transform\n       * @param transformation - the transformation matrix to apply\n       * @returns the new vector\n       */\n      static TransformNormal(vector, transformation) {\n          const result = Vector4.Zero();\n          Vector4.TransformNormalToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\n       * This methods computes transformed normalized direction vectors only.\n       * @param vector - the vector to transform\n       * @param transformation - the transformation matrix to apply\n       * @param result - the vector to store the result in\n       */\n      static TransformNormalToRef(vector, transformation, result) {\n          const m = transformation.m;\n          const x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n          const y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n          const z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n          result.x = x;\n          result.y = y;\n          result.z = z;\n          result.w = vector.w;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n       * This methods computes transformed normalized direction vectors only.\n       * @param x - value to transform\n       * @param y - value to transform\n       * @param z - value to transform\n       * @param w - value to transform\n       * @param transformation - the transformation matrix to apply\n       * @param result - the vector to store the results in\n       */\n      static TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {\n          const m = transformation.m;\n          result.x = x * m[0] + y * m[4] + z * m[8];\n          result.y = x * m[1] + y * m[5] + z * m[9];\n          result.z = x * m[2] + y * m[6] + z * m[10];\n          result.w = w;\n      }\n      /**\n       * Returns the string with the Vector4 coordinates.\n       * @returns a string containing all the vector values\n       */\n      toString() {\n          return ('{X: ' + this.x + ' Y:' + this.y + ' Z:' + this.z + ' W:' + this.w + '}');\n      }\n      /**\n       * Returns the string \"Vector4\".\n       * @returns \"Vector4\"\n       */\n      getClassName() {\n          return 'Vector4';\n      }\n      /**\n       * Returns the Vector4 hash code.\n       * @returns a unique hash code\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          hash = (hash * 397) ^ (this.w || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Returns a new array populated with 4 elements : the Vector4 coordinates.\n       * @returns the resulting array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Populates the given array from the given index with the Vector4 coordinates.\n       * @param array - array to populate\n       * @param index - index of the array to start at (default: 0)\n       * @returns the Vector4.\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          array[index + 2] = this.z;\n          array[index + 3] = this.w;\n          return this;\n      }\n      /**\n       * Adds the given vector to the current Vector4.\n       * @param otherVector - the vector to add\n       * @returns the updated Vector4.\n       */\n      addInPlace(otherVector) {\n          this.x += otherVector.x;\n          this.y += otherVector.y;\n          this.z += otherVector.z;\n          this.w += otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n       * @param otherVector - the vector to add\n       * @returns the resulting vector\n       */\n      add(otherVector) {\n          return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n       * @param otherVector - the vector to add\n       * @param result - the vector to store the result\n       * @returns the current Vector4.\n       */\n      addToRef(otherVector, result) {\n          result.x = this.x + otherVector.x;\n          result.y = this.y + otherVector.y;\n          result.z = this.z + otherVector.z;\n          result.w = this.w + otherVector.w;\n          return this;\n      }\n      /**\n       * Subtract in place the given vector from the current Vector4.\n       * @param otherVector - the vector to subtract\n       * @returns the updated Vector4.\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          this.z -= otherVector.z;\n          this.w -= otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n       * @param otherVector - the vector to add\n       * @returns the new vector with the result\n       */\n      subtract(otherVector) {\n          return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n       * @param otherVector - the vector to subtract\n       * @param result - the vector to store the result\n       * @returns the current Vector4.\n       */\n      subtractToRef(otherVector, result) {\n          result.x = this.x - otherVector.x;\n          result.y = this.y - otherVector.y;\n          result.z = this.z - otherVector.z;\n          result.w = this.w - otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       */\n      /**\n       * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       * @param x - value to subtract\n       * @param y - value to subtract\n       * @param z - value to subtract\n       * @param w - value to subtract\n       * @returns new vector containing the result\n       */\n      subtractFromFloats(x, y, z, w) {\n          return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n      }\n      /**\n       * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n       * @param x - value to subtract\n       * @param y - value to subtract\n       * @param z - value to subtract\n       * @param w - value to subtract\n       * @param result - the vector to store the result in\n       * @returns the current Vector4.\n       */\n      subtractFromFloatsToRef(x, y, z, w, result) {\n          result.x = this.x - x;\n          result.y = this.y - y;\n          result.z = this.z - z;\n          result.w = this.w - w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the current Vector4 negated coordinates.\n       * @returns a new vector with the negated values\n       */\n      negate() {\n          return new Vector4(-this.x, -this.y, -this.z, -this.w);\n      }\n      /**\n       * Multiplies the current Vector4 coordinates by scale (float).\n       * @param scale - the number to scale with\n       * @returns the updated Vector4.\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          this.z *= scale;\n          this.w *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n       * @param scale - the number to scale with\n       * @returns a new vector with the result\n       */\n      scale(scale) {\n          return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n      }\n      /**\n       * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n       * @param scale - the number to scale with\n       * @param result - a vector to store the result in\n       * @returns the current Vector4.\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          result.z = this.z * scale;\n          result.w = this.w * scale;\n          return this;\n      }\n      /**\n       * Scale the current Vector4 values by a factor and add the result to a given Vector4\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector4 object where to store the result\n       * @returns the unmodified current Vector4\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          result.z += this.z * scale;\n          result.w += this.w * scale;\n          return this;\n      }\n      /**\n       * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n       * @param otherVector - the vector to compare against\n       * @returns true if they are equal\n       */\n      equals(otherVector) {\n          return (otherVector &&\n              this.x === otherVector.x &&\n              this.y === otherVector.y &&\n              this.z === otherVector.z &&\n              this.w === otherVector.w);\n      }\n      /**\n       * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n       * @param otherVector - vector to compare against\n       * @param epsilon - (Default: very small number)\n       * @returns true if they are equal\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$8.Epsilon) {\n          return (otherVector &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) &&\n              Scalar_1$6.Scalar.WithinEpsilon(this.w, otherVector.w, epsilon));\n      }\n      /**\n       * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n       * @param x - x value to compare against\n       * @param y - y value to compare against\n       * @param z - z value to compare against\n       * @param w - w value to compare against\n       * @returns true if equal\n       */\n      equalsToFloats(x, y, z, w) {\n          return this.x === x && this.y === y && this.z === z && this.w === w;\n      }\n      /**\n       * Multiplies in place the current Vector4 by the given one.\n       * @param otherVector - vector to multiple with\n       * @returns the updated Vector4.\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          this.z *= otherVector.z;\n          this.w *= otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n       * @param otherVector - vector to multiple with\n       * @returns resulting new vector\n       */\n      multiply(otherVector) {\n          return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n       * @param otherVector - vector to multiple with\n       * @param result - vector to store the result\n       * @returns the current Vector4.\n       */\n      multiplyToRef(otherVector, result) {\n          result.x = this.x * otherVector.x;\n          result.y = this.y * otherVector.y;\n          result.z = this.z * otherVector.z;\n          result.w = this.w * otherVector.w;\n          return this;\n      }\n      /**\n       * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n       * @param x - x value multiply with\n       * @param y - y value multiply with\n       * @param z - z value multiply with\n       * @param w - w value multiply with\n       * @returns resulting new vector\n       */\n      multiplyByFloats(x, y, z, w) {\n          return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n      }\n      /**\n       * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n       * @param otherVector - vector to devide with\n       * @returns resulting new vector\n       */\n      divide(otherVector) {\n          return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n      }\n      /**\n       * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n       * @param otherVector - vector to devide with\n       * @param result - vector to store the result\n       * @returns the current Vector4.\n       */\n      divideToRef(otherVector, result) {\n          result.x = this.x / otherVector.x;\n          result.y = this.y / otherVector.y;\n          result.z = this.z / otherVector.z;\n          result.w = this.w / otherVector.w;\n          return this;\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones.\n       * @param otherVector - vector to devide with\n       * @returns the updated Vector3.\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector4\n       */\n      minimizeInPlace(other) {\n          if (other.x < this.x) {\n              this.x = other.x;\n          }\n          if (other.y < this.y) {\n              this.y = other.y;\n          }\n          if (other.z < this.z) {\n              this.z = other.z;\n          }\n          if (other.w < this.w) {\n              this.w = other.w;\n          }\n          return this;\n      }\n      /**\n       * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector4\n       */\n      maximizeInPlace(other) {\n          if (other.x > this.x) {\n              this.x = other.x;\n          }\n          if (other.y > this.y) {\n              this.y = other.y;\n          }\n          if (other.z > this.z) {\n              this.z = other.z;\n          }\n          if (other.w > this.w) {\n              this.w = other.w;\n          }\n          return this;\n      }\n      /**\n       * Gets a new Vector4 from current Vector4 floored values\n       * @returns a new Vector4\n       */\n      floor() {\n          return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n      }\n      /**\n       * Gets a new Vector4 from current Vector3 floored values\n       * @returns a new Vector4\n       */\n      fract() {\n          return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n      }\n      // Properties\n      /**\n       * Returns the Vector4 length (float).\n       * @returns the length\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n      }\n      /**\n       * Returns the Vector4 squared length (float).\n       * @returns the length squared\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n      // Methods\n      /**\n       * Normalizes in place the Vector4.\n       * @returns the updated Vector4.\n       */\n      normalize() {\n          const len = this.length();\n          if (len === 0) {\n              return this;\n          }\n          return this.scaleInPlace(1.0 / len);\n      }\n      /**\n       * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n       * @returns this converted to a new vector3\n       */\n      toVector3() {\n          return new Vector3_1$7.Vector3(this.x, this.y, this.z);\n      }\n      /**\n       * Returns a new Vector4 copied from the current one.\n       * @returns the new cloned vector\n       */\n      clone() {\n          return new Vector4(this.x, this.y, this.z, this.w);\n      }\n      /**\n       * Updates the current Vector4 with the given one coordinates.\n       * @param source - the source vector to copy from\n       * @returns the updated Vector4.\n       */\n      copyFrom(source) {\n          this.x = source.x;\n          this.y = source.y;\n          this.z = source.z;\n          this.w = source.w;\n          return this;\n      }\n      /**\n       * Updates the current Vector4 coordinates with the given floats.\n       * @param x - float to copy from\n       * @param y - float to copy from\n       * @param z - float to copy from\n       * @param w - float to copy from\n       * @returns the updated Vector4.\n       */\n      copyFromFloats(x, y, z, w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n          return this;\n      }\n      /**\n       * Updates the current Vector4 coordinates with the given floats.\n       * @param x - float to set from\n       * @param y - float to set from\n       * @param z - float to set from\n       * @param w - float to set from\n       * @returns the updated Vector4.\n       */\n      set(x, y, z, w) {\n          return this.copyFromFloats(x, y, z, w);\n      }\n      /**\n       * Copies the given float to the current Vector3 coordinates\n       * @param v - defines the x, y, z and w coordinates of the operand\n       * @returns the current updated Vector3\n       */\n      setAll(v) {\n          this.x = this.y = this.z = this.w = v;\n          return this;\n      }\n  }\n  Vector4$1.Vector4 = Vector4;\n\n  Object.defineProperty(Matrix$1, \"__esModule\", { value: true });\n  Matrix$1.Matrix = void 0;\n  const Vector3_1$6 = Vector3$1;\n  const Quaternion_1$2 = Quaternion$1;\n  const preallocatedVariables_1$3 = preallocatedVariables;\n  const Vector4_1 = Vector4$1;\n  /**\n   * Class used to store matrix data (4x4)\n   * @public\n   */\n  class Matrix {\n      /**\n       * Creates an empty matrix (filled with zeros)\n       */\n      constructor() {\n          this._isIdentity = false;\n          this._isIdentityDirty = true;\n          this._isIdentity3x2 = true;\n          this._isIdentity3x2Dirty = true;\n          this._m = [\n              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n          ];\n          this._updateIdentityStatus(false);\n      }\n      /**\n       * Gets the internal data of the matrix\n       */\n      get m() {\n          return this._m;\n      }\n      /**\n       * Gets an identity matrix that must not be updated\n       */\n      static get IdentityReadOnly() {\n          return Matrix._identityReadOnly;\n      }\n      // Statics\n      /**\n       * Creates a matrix from an array\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @returns a new Matrix set from the starting index of the given array\n       */\n      static FromArray(array, offset = 0) {\n          const result = new Matrix();\n          Matrix.FromArrayToRef(array, offset, result);\n          return result;\n      }\n      /**\n       * Copy the content of an array into a given matrix\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @param result - defines the target matrix\n       */\n      static FromArrayToRef(array, offset, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = array[index + offset];\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Stores an array into a matrix after having multiplied each component by a given factor\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param scale - defines the scaling factor\n       * @param result - defines the target matrix\n       */\n      static FromFloatArrayToRefScaled(array, offset, scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = array[index + offset] * scale;\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Stores a list of values (16) inside a given matrix\n       * @param initialM11 - defines 1st value of 1st row\n       * @param initialM12 - defines 2nd value of 1st row\n       * @param initialM13 - defines 3rd value of 1st row\n       * @param initialM14 - defines 4th value of 1st row\n       * @param initialM21 - defines 1st value of 2nd row\n       * @param initialM22 - defines 2nd value of 2nd row\n       * @param initialM23 - defines 3rd value of 2nd row\n       * @param initialM24 - defines 4th value of 2nd row\n       * @param initialM31 - defines 1st value of 3rd row\n       * @param initialM32 - defines 2nd value of 3rd row\n       * @param initialM33 - defines 3rd value of 3rd row\n       * @param initialM34 - defines 4th value of 3rd row\n       * @param initialM41 - defines 1st value of 4th row\n       * @param initialM42 - defines 2nd value of 4th row\n       * @param initialM43 - defines 3rd value of 4th row\n       * @param initialM44 - defines 4th value of 4th row\n       * @param result - defines the target matrix\n       */\n      static FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n          const m = result._m;\n          m[0] = initialM11;\n          m[1] = initialM12;\n          m[2] = initialM13;\n          m[3] = initialM14;\n          m[4] = initialM21;\n          m[5] = initialM22;\n          m[6] = initialM23;\n          m[7] = initialM24;\n          m[8] = initialM31;\n          m[9] = initialM32;\n          m[10] = initialM33;\n          m[11] = initialM34;\n          m[12] = initialM41;\n          m[13] = initialM42;\n          m[14] = initialM43;\n          m[15] = initialM44;\n          result._markAsUpdated();\n      }\n      /**\n       * Creates new matrix from a list of values (16)\n       * @param initialM11 - defines 1st value of 1st row\n       * @param initialM12 - defines 2nd value of 1st row\n       * @param initialM13 - defines 3rd value of 1st row\n       * @param initialM14 - defines 4th value of 1st row\n       * @param initialM21 - defines 1st value of 2nd row\n       * @param initialM22 - defines 2nd value of 2nd row\n       * @param initialM23 - defines 3rd value of 2nd row\n       * @param initialM24 - defines 4th value of 2nd row\n       * @param initialM31 - defines 1st value of 3rd row\n       * @param initialM32 - defines 2nd value of 3rd row\n       * @param initialM33 - defines 3rd value of 3rd row\n       * @param initialM34 - defines 4th value of 3rd row\n       * @param initialM41 - defines 1st value of 4th row\n       * @param initialM42 - defines 2nd value of 4th row\n       * @param initialM43 - defines 3rd value of 4th row\n       * @param initialM44 - defines 4th value of 4th row\n       * @returns the new matrix\n       */\n      static FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n          const result = new Matrix();\n          const m = result._m;\n          m[0] = initialM11;\n          m[1] = initialM12;\n          m[2] = initialM13;\n          m[3] = initialM14;\n          m[4] = initialM21;\n          m[5] = initialM22;\n          m[6] = initialM23;\n          m[7] = initialM24;\n          m[8] = initialM31;\n          m[9] = initialM32;\n          m[10] = initialM33;\n          m[11] = initialM34;\n          m[12] = initialM41;\n          m[13] = initialM42;\n          m[14] = initialM43;\n          m[15] = initialM44;\n          result._markAsUpdated();\n          return result;\n      }\n      /**\n       * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n       * @param scale - defines the scale vector3\n       * @param rotation - defines the rotation quaternion\n       * @param translation - defines the translation vector3\n       * @returns a new matrix\n       */\n      static Compose(scale, rotation, translation) {\n          const result = new Matrix();\n          Matrix.ComposeToRef(scale, rotation, translation, result);\n          return result;\n      }\n      /**\n       * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n       * @param scale - defines the scale vector3\n       * @param rotation - defines the rotation quaternion\n       * @param translation - defines the translation vector3\n       * @param result - defines the target matrix\n       */\n      static ComposeToRef(scale, rotation, translation, result) {\n          Matrix.ScalingToRef(scale.x, scale.y, scale.z, preallocatedVariables_1$3.MathTmp.Matrix[1]);\n          rotation.toRotationMatrix(preallocatedVariables_1$3.MathTmp.Matrix[0]);\n          preallocatedVariables_1$3.MathTmp.Matrix[1].multiplyToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], result);\n          result.setTranslation(translation);\n      }\n      /**\n       * Creates a new identity matrix\n       * @returns a new identity matrix\n       */\n      static Identity() {\n          const identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n          identity._updateIdentityStatus(true);\n          return identity;\n      }\n      /**\n       * Creates a new identity matrix and stores the result in a given matrix\n       * @param result - defines the target matrix\n       */\n      static IdentityToRef(result) {\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(true);\n      }\n      /**\n       * Creates a new zero matrix\n       * @returns a new zero matrix\n       */\n      static Zero() {\n          const zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n          zero._updateIdentityStatus(false);\n          return zero;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the X axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationX(angle) {\n          const result = new Matrix();\n          Matrix.RotationXToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new matrix as the invert of a given matrix\n       * @param source - defines the source matrix\n       * @returns the new matrix\n       */\n      static Invert(source) {\n          const result = new Matrix();\n          source.invertToRef(result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationXToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationY(angle) {\n          const result = new Matrix();\n          Matrix.RotationYToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationYToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationZ(angle) {\n          const result = new Matrix();\n          Matrix.RotationZToRef(angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationZToRef(angle, result) {\n          const s = Math.sin(angle);\n          const c = Math.cos(angle);\n          Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(c === 1 && s === 0);\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the given axis\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle (in radians) to use\n       * @returns the new matrix\n       */\n      static RotationAxis(axis, angle) {\n          const result = new Matrix();\n          Matrix.RotationAxisToRef(axis, angle, result);\n          return result;\n      }\n      /**\n       * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle (in radians) to use\n       * @param result - defines the target matrix\n       */\n      static RotationAxisToRef(axis, angle, result) {\n          const s = Math.sin(-angle);\n          const c = Math.cos(-angle);\n          const c1 = 1 - c;\n          axis.normalize();\n          const m = result._m;\n          m[0] = axis.x * axis.x * c1 + c;\n          m[1] = axis.x * axis.y * c1 - axis.z * s;\n          m[2] = axis.x * axis.z * c1 + axis.y * s;\n          m[3] = 0.0;\n          m[4] = axis.y * axis.x * c1 + axis.z * s;\n          m[5] = axis.y * axis.y * c1 + c;\n          m[6] = axis.y * axis.z * c1 - axis.x * s;\n          m[7] = 0.0;\n          m[8] = axis.z * axis.x * c1 - axis.y * s;\n          m[9] = axis.z * axis.y * c1 + axis.x * s;\n          m[10] = axis.z * axis.z * c1 + c;\n          m[11] = 0.0;\n          m[12] = 0.0;\n          m[13] = 0.0;\n          m[14] = 0.0;\n          m[15] = 1.0;\n          result._markAsUpdated();\n      }\n      /**\n       * Creates a rotation matrix\n       * @param yaw - defines the yaw angle in radians (Y axis)\n       * @param pitch - defines the pitch angle in radians (X axis)\n       * @param roll - defines the roll angle in radians (X axis)\n       * @returns the new rotation matrix\n       */\n      static RotationYawPitchRoll(yaw, pitch, roll) {\n          const result = new Matrix();\n          Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n          return result;\n      }\n      /**\n       * Creates a rotation matrix and stores it in a given matrix\n       * @param yaw - defines the yaw angle in radians (Y axis)\n       * @param pitch - defines the pitch angle in radians (X axis)\n       * @param roll - defines the roll angle in radians (X axis)\n       * @param result - defines the target matrix\n       */\n      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n          Quaternion_1$2.Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, preallocatedVariables_1$3.MathTmp.Quaternion[0]);\n          preallocatedVariables_1$3.MathTmp.Quaternion[0].toRotationMatrix(result);\n      }\n      /**\n       * Creates a scaling matrix\n       * @param x - defines the scale factor on X axis\n       * @param y - defines the scale factor on Y axis\n       * @param z - defines the scale factor on Z axis\n       * @returns the new matrix\n       */\n      static Scaling(x, y, z) {\n          const result = new Matrix();\n          Matrix.ScalingToRef(x, y, z, result);\n          return result;\n      }\n      /**\n       * Creates a scaling matrix and stores it in a given matrix\n       * @param x - defines the scale factor on X axis\n       * @param y - defines the scale factor on Y axis\n       * @param z - defines the scale factor on Z axis\n       * @param result - defines the target matrix\n       */\n      static ScalingToRef(x, y, z, result) {\n          Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n      }\n      /**\n       * Creates a translation matrix\n       * @param x - defines the translation on X axis\n       * @param y - defines the translation on Y axis\n       * @param z - defines the translationon Z axis\n       * @returns the new matrix\n       */\n      static Translation(x, y, z) {\n          const result = new Matrix();\n          Matrix.TranslationToRef(x, y, z, result);\n          return result;\n      }\n      /**\n       * Creates a translation matrix and stores it in a given matrix\n       * @param x - defines the translation on X axis\n       * @param y - defines the translation on Y axis\n       * @param z - defines the translationon Z axis\n       * @param result - defines the target matrix\n       */\n      static TranslationToRef(x, y, z, result) {\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n          result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n      }\n      /**\n       * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n       * @param startValue - defines the start value\n       * @param endValue - defines the end value\n       * @param gradient - defines the gradient factor\n       * @returns the new matrix\n       */\n      static Lerp(startValue, endValue, gradient) {\n          const result = new Matrix();\n          Matrix.LerpToRef(startValue, endValue, gradient, result);\n          return result;\n      }\n      /**\n       * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n       * @param startValue - defines the start value\n       * @param endValue - defines the end value\n       * @param gradient - defines the gradient factor\n       * @param result - defines the Matrix object where to store data\n       */\n      static LerpToRef(startValue, endValue, gradient, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] =\n                  startValue._m[index] * (1.0 - gradient) + endValue._m[index] * gradient;\n          }\n          result._markAsUpdated();\n      }\n      /**\n       * Builds a new matrix whose values are computed by:\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n       * @param startValue - defines the first matrix\n       * @param endValue - defines the second matrix\n       * @param gradient - defines the gradient between the two matrices\n       * @returns the new matrix\n       */\n      static DecomposeLerp(startValue, endValue, gradient) {\n          const result = new Matrix();\n          Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n          return result;\n      }\n      /**\n       * Update a matrix to values which are computed by:\n       * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n       * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n       * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n       * @param startValue - defines the first matrix\n       * @param endValue - defines the second matrix\n       * @param gradient - defines the gradient between the two matrices\n       * @param result - defines the target matrix\n       */\n      static DecomposeLerpToRef(startValue, endValue, gradient, result) {\n          const startScale = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const startRotation = preallocatedVariables_1$3.MathTmp.Quaternion[0];\n          const startTranslation = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          startValue.decompose(startScale, startRotation, startTranslation);\n          const endScale = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          const endRotation = preallocatedVariables_1$3.MathTmp.Quaternion[1];\n          const endTranslation = preallocatedVariables_1$3.MathTmp.Vector3[3];\n          endValue.decompose(endScale, endRotation, endTranslation);\n          const resultScale = preallocatedVariables_1$3.MathTmp.Vector3[4];\n          Vector3_1$6.Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n          const resultRotation = preallocatedVariables_1$3.MathTmp.Quaternion[2];\n          Quaternion_1$2.Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n          const resultTranslation = preallocatedVariables_1$3.MathTmp.Vector3[5];\n          Vector3_1$6.Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n          Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n      }\n      /**\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n       * This function works in left handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @returns the new matrix\n       */\n      static LookAtLH(eye, target, up) {\n          const result = new Matrix();\n          Matrix.LookAtLHToRef(eye, target, up, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n       * This function works in left handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @param result - defines the target matrix\n       */\n      static LookAtLHToRef(eye, target, up, result) {\n          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          // Z axis\n          target.subtractToRef(eye, zAxis);\n          zAxis.normalize();\n          // X axis\n          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);\n          const xSquareLength = xAxis.lengthSquared();\n          if (xSquareLength === 0) {\n              xAxis.x = 1.0;\n          }\n          else {\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n          }\n          // Y axis\n          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n          yAxis.normalize();\n          // Eye angles\n          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);\n          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);\n          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n      }\n      /**\n       * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n       * This function works in right handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @returns the new matrix\n       */\n      static LookAtRH(eye, target, up) {\n          const result = new Matrix();\n          Matrix.LookAtRHToRef(eye, target, up, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n       * This function works in right handed mode\n       * @param eye - defines the final position of the entity\n       * @param target - defines where the entity should look at\n       * @param up - defines the up vector for the entity\n       * @param result - defines the target matrix\n       */\n      static LookAtRHToRef(eye, target, up, result) {\n          const xAxis = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          const yAxis = preallocatedVariables_1$3.MathTmp.Vector3[1];\n          const zAxis = preallocatedVariables_1$3.MathTmp.Vector3[2];\n          // Z axis\n          eye.subtractToRef(target, zAxis);\n          zAxis.normalize();\n          // X axis\n          Vector3_1$6.Vector3.CrossToRef(up, zAxis, xAxis);\n          const xSquareLength = xAxis.lengthSquared();\n          if (xSquareLength === 0) {\n              xAxis.x = 1.0;\n          }\n          else {\n              xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n          }\n          // Y axis\n          Vector3_1$6.Vector3.CrossToRef(zAxis, xAxis, yAxis);\n          yAxis.normalize();\n          // Eye angles\n          const ex = -Vector3_1$6.Vector3.Dot(xAxis, eye);\n          const ey = -Vector3_1$6.Vector3.Dot(yAxis, eye);\n          const ez = -Vector3_1$6.Vector3.Dot(zAxis, eye);\n          Matrix.FromValuesToRef(xAxis.x, yAxis.x, zAxis.x, 0.0, xAxis.y, yAxis.y, zAxis.y, 0.0, xAxis.z, yAxis.z, zAxis.z, 0.0, ex, ey, ez, 1.0, result);\n      }\n      /**\n       * Create a left-handed orthographic projection matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed orthographic projection matrix\n       */\n      static OrthoLH(width, height, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Store a left-handed orthographic projection to a given matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoLHToRef(width, height, znear, zfar, result) {\n          const n = znear;\n          const f = zfar;\n          const a = 2.0 / width;\n          const b = 2.0 / height;\n          const c = 2.0 / (f - n);\n          const d = -(f + n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n          result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n      }\n      /**\n       * Create a left-handed orthographic projection matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed orthographic projection matrix\n       */\n      static OrthoOffCenterLH(left, right, bottom, top, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a left-handed orthographic projection into a given matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result) {\n          const n = znear;\n          const f = zfar;\n          const a = 2.0 / (right - left);\n          const b = 2.0 / (top - bottom);\n          const c = 2.0 / (f - n);\n          const d = -(f + n) / (f - n);\n          const i0 = (left + right) / (left - right);\n          const i1 = (top + bottom) / (bottom - top);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n          result._markAsUpdated();\n      }\n      /**\n       * Creates a right-handed orthographic projection matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a right-handed orthographic projection matrix\n       */\n      static OrthoOffCenterRH(left, right, bottom, top, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a right-handed orthographic projection into a given matrix\n       * @param left - defines the viewport left coordinate\n       * @param right - defines the viewport right coordinate\n       * @param bottom - defines the viewport bottom coordinate\n       * @param top - defines the viewport top coordinate\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       */\n      static OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result) {\n          Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n          result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n      }\n      /**\n       * Creates a left-handed perspective projection matrix\n       * @param width - defines the viewport width\n       * @param height - defines the viewport height\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed perspective projection matrix\n       */\n      static PerspectiveLH(width, height, znear, zfar) {\n          const matrix = new Matrix();\n          const n = znear;\n          const f = zfar;\n          const a = (2.0 * n) / width;\n          const b = (2.0 * n) / height;\n          const c = (f + n) / (f - n);\n          const d = (-2.0 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n          matrix._updateIdentityStatus(false);\n          return matrix;\n      }\n      /**\n       * Creates a left-handed perspective projection matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a left-handed perspective projection matrix\n       */\n      static PerspectiveFovLH(fov, aspect, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a left-handed perspective projection into a given matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n       */\n      static PerspectiveFovLHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n          const n = znear;\n          const f = zfar;\n          const t = 1.0 / Math.tan(fov * 0.5);\n          const a = isVerticalFovFixed ? t / aspect : t;\n          const b = isVerticalFovFixed ? t : t * aspect;\n          const c = (f + n) / (f - n);\n          const d = (-2.0 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n          result._updateIdentityStatus(false);\n      }\n      /**\n       * Creates a right-handed perspective projection matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @returns a new matrix as a right-handed perspective projection matrix\n       */\n      static PerspectiveFovRH(fov, aspect, znear, zfar) {\n          const matrix = new Matrix();\n          Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n          return matrix;\n      }\n      /**\n       * Stores a right-handed perspective projection into a given matrix\n       * @param fov - defines the horizontal field of view\n       * @param aspect - defines the aspect ratio\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param isVerticalFovFixed - defines it the fov is vertically fixed (default) or horizontally\n       */\n      static PerspectiveFovRHToRef(fov, aspect, znear, zfar, result, isVerticalFovFixed = true) {\n          /* alternatively this could be expressed as:\n          //    m = PerspectiveFovLHToRef\n          //    m[10] *= -1.0;\n          //    m[11] *= -1.0;\n          */\n          const n = znear;\n          const f = zfar;\n          const t = 1.0 / Math.tan(fov * 0.5);\n          const a = isVerticalFovFixed ? t / aspect : t;\n          const b = isVerticalFovFixed ? t : t * aspect;\n          const c = -(f + n) / (f - n);\n          const d = (-2 * f * n) / (f - n);\n          Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n          result._updateIdentityStatus(false);\n      }\n      /**\n       * Stores a perspective projection for WebVR info a given matrix\n       * @param fov - defines the field of view\n       * @param znear - defines the near clip plane\n       * @param zfar - defines the far clip plane\n       * @param result - defines the target matrix\n       * @param rightHanded - defines if the matrix must be in right-handed mode (false by default)\n       */\n      static PerspectiveFovWebVRToRef(fov, znear, zfar, result, rightHanded = false) {\n          const rightHandedFactor = rightHanded ? -1 : 1;\n          const upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n          const downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n          const leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n          const rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n          const xScale = 2.0 / (leftTan + rightTan);\n          const yScale = 2.0 / (upTan + downTan);\n          const m = result._m;\n          m[0] = xScale;\n          m[1] = m[2] = m[3] = m[4] = 0.0;\n          m[5] = yScale;\n          m[6] = m[7] = 0.0;\n          m[8] = (leftTan - rightTan) * xScale * 0.5;\n          m[9] = -((upTan - downTan) * yScale * 0.5);\n          m[10] = -zfar / (znear - zfar);\n          m[11] = 1.0 * rightHandedFactor;\n          m[12] = m[13] = m[15] = 0.0;\n          m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n          result._markAsUpdated();\n      }\n      /**\n       * Extracts a 2x2 matrix from a given matrix and store the result in a FloatArray\n       * @param matrix - defines the matrix to use\n       * @returns a new FloatArray array with 4 elements : the 2x2 matrix extracted from the given matrix\n       */\n      static GetAsMatrix2x2(matrix) {\n          return [matrix._m[0], matrix._m[1], matrix._m[4], matrix._m[5]];\n      }\n      /**\n       * Extracts a 3x3 matrix from a given matrix and store the result in a FloatArray\n       * @param matrix - defines the matrix to use\n       * @returns a new FloatArray array with 9 elements : the 3x3 matrix extracted from the given matrix\n       */\n      static GetAsMatrix3x3(matrix) {\n          return [\n              matrix._m[0],\n              matrix._m[1],\n              matrix._m[2],\n              matrix._m[4],\n              matrix._m[5],\n              matrix._m[6],\n              matrix._m[8],\n              matrix._m[9],\n              matrix._m[10]\n          ];\n      }\n      /**\n       * Compute the transpose of a given matrix\n       * @param matrix - defines the matrix to transpose\n       * @returns the new matrix\n       */\n      static Transpose(matrix) {\n          const result = new Matrix();\n          Matrix.TransposeToRef(matrix, result);\n          return result;\n      }\n      /**\n       * Compute the transpose of a matrix and store it in a target matrix\n       * @param matrix - defines the matrix to transpose\n       * @param result - defines the target matrix\n       */\n      static TransposeToRef(matrix, result) {\n          const rm = result._m;\n          const mm = matrix._m;\n          rm[0] = mm[0];\n          rm[1] = mm[4];\n          rm[2] = mm[8];\n          rm[3] = mm[12];\n          rm[4] = mm[1];\n          rm[5] = mm[5];\n          rm[6] = mm[9];\n          rm[7] = mm[13];\n          rm[8] = mm[2];\n          rm[9] = mm[6];\n          rm[10] = mm[10];\n          rm[11] = mm[14];\n          rm[12] = mm[3];\n          rm[13] = mm[7];\n          rm[14] = mm[11];\n          rm[15] = mm[15];\n          // identity-ness does not change when transposing\n          result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n      }\n      /**\n       * Computes a reflection matrix from a plane\n       * @param plane - defines the reflection plane\n       * @returns a new matrix\n       */\n      static Reflection(plane) {\n          const matrix = new Matrix();\n          Matrix.ReflectionToRef(plane, matrix);\n          return matrix;\n      }\n      /**\n       * Computes a reflection matrix from a plane\n       * @param plane - defines the reflection plane\n       * @param result - defines the target matrix\n       */\n      static ReflectionToRef(plane, result) {\n          plane.normalize();\n          const x = plane.normal.x;\n          const y = plane.normal.y;\n          const z = plane.normal.z;\n          const temp = -2 * x;\n          const temp2 = -2 * y;\n          const temp3 = -2 * z;\n          Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n      }\n      /**\n       * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n       * @param xaxis - defines the value of the 1st axis\n       * @param yaxis - defines the value of the 2nd axis\n       * @param zaxis - defines the value of the 3rd axis\n       * @param result - defines the target matrix\n       */\n      static FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {\n          Matrix.FromValuesToRef(xaxis.x, xaxis.y, xaxis.z, 0.0, yaxis.x, yaxis.y, yaxis.z, 0.0, zaxis.x, zaxis.y, zaxis.z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      }\n      /**\n       * Creates a rotation matrix from a quaternion and stores it in a target matrix\n       * @param quat - defines the quaternion to use\n       * @param result - defines the target matrix\n       */\n      static FromQuaternionToRef(quat, result) {\n          const xx = quat.x * quat.x;\n          const yy = quat.y * quat.y;\n          const zz = quat.z * quat.z;\n          const xy = quat.x * quat.y;\n          const zw = quat.z * quat.w;\n          const zx = quat.z * quat.x;\n          const yw = quat.y * quat.w;\n          const yz = quat.y * quat.z;\n          const xw = quat.x * quat.w;\n          result._m[0] = 1.0 - 2.0 * (yy + zz);\n          result._m[1] = 2.0 * (xy + zw);\n          result._m[2] = 2.0 * (zx - yw);\n          result._m[3] = 0.0;\n          result._m[4] = 2.0 * (xy - zw);\n          result._m[5] = 1.0 - 2.0 * (zz + xx);\n          result._m[6] = 2.0 * (yz + xw);\n          result._m[7] = 0.0;\n          result._m[8] = 2.0 * (zx + yw);\n          result._m[9] = 2.0 * (yz - xw);\n          result._m[10] = 1.0 - 2.0 * (yy + xx);\n          result._m[11] = 0.0;\n          result._m[12] = 0.0;\n          result._m[13] = 0.0;\n          result._m[14] = 0.0;\n          result._m[15] = 1.0;\n          result._markAsUpdated();\n      }\n      /** @internal */\n      _markAsUpdated() {\n          this.updateFlag = Matrix._updateFlagSeed++;\n          this._isIdentity = false;\n          this._isIdentity3x2 = false;\n          this._isIdentityDirty = true;\n          this._isIdentity3x2Dirty = true;\n      }\n      // Properties\n      /**\n       * Check if the current matrix is identity\n       * @returns true is the matrix is the identity matrix\n       */\n      isIdentity() {\n          if (this._isIdentityDirty) {\n              this._isIdentityDirty = false;\n              const m = this._m;\n              this._isIdentity =\n                  m[0] === 1.0 &&\n                      m[1] === 0.0 &&\n                      m[2] === 0.0 &&\n                      m[3] === 0.0 &&\n                      m[4] === 0.0 &&\n                      m[5] === 1.0 &&\n                      m[6] === 0.0 &&\n                      m[7] === 0.0 &&\n                      m[8] === 0.0 &&\n                      m[9] === 0.0 &&\n                      m[10] === 1.0 &&\n                      m[11] === 0.0 &&\n                      m[12] === 0.0 &&\n                      m[13] === 0.0 &&\n                      m[14] === 0.0 &&\n                      m[15] === 1.0;\n          }\n          return this._isIdentity;\n      }\n      /**\n       * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n       * @returns true is the matrix is the identity matrix\n       */\n      isIdentityAs3x2() {\n          if (this._isIdentity3x2Dirty) {\n              this._isIdentity3x2Dirty = false;\n              if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n                  this._isIdentity3x2 = false;\n              }\n              else if (this._m[1] !== 0.0 ||\n                  this._m[2] !== 0.0 ||\n                  this._m[3] !== 0.0 ||\n                  this._m[4] !== 0.0 ||\n                  this._m[6] !== 0.0 ||\n                  this._m[7] !== 0.0 ||\n                  this._m[8] !== 0.0 ||\n                  this._m[9] !== 0.0 ||\n                  this._m[10] !== 0.0 ||\n                  this._m[11] !== 0.0 ||\n                  this._m[12] !== 0.0 ||\n                  this._m[13] !== 0.0 ||\n                  this._m[14] !== 0.0) {\n                  this._isIdentity3x2 = false;\n              }\n              else {\n                  this._isIdentity3x2 = true;\n              }\n          }\n          return this._isIdentity3x2;\n      }\n      /**\n       * Gets the determinant of the matrix\n       * @returns the matrix determinant\n       */\n      determinant() {\n          if (this._isIdentity === true) {\n              return 1;\n          }\n          const m = this._m;\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n          // tslint:disable-next-line:one-variable-per-declaration\n          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n          /*\n          // https://en.wikipedia.org/wiki/Laplace_expansion\n          // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n          // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n          // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n          // where\n          //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n          //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n          //\n          // Here we do that for the 1st row.\n          */\n          // tslint:disable:variable-name\n          const det_22_33 = m22 * m33 - m32 * m23;\n          const det_21_33 = m21 * m33 - m31 * m23;\n          const det_21_32 = m21 * m32 - m31 * m22;\n          const det_20_33 = m20 * m33 - m30 * m23;\n          const det_20_32 = m20 * m32 - m22 * m30;\n          const det_20_31 = m20 * m31 - m30 * m21;\n          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n          // tslint:enable:variable-name\n          return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n      }\n      // Methods\n      /**\n       * Returns the matrix as a FloatArray\n       * @returns the matrix underlying array\n       */\n      toArray() {\n          return this._m;\n      }\n      /**\n       * Returns the matrix as a FloatArray\n       * @returns the matrix underlying array.\n       */\n      asArray() {\n          return this._m;\n      }\n      /**\n       * Inverts the current matrix in place\n       * @returns the current inverted matrix\n       */\n      invert() {\n          this.invertToRef(this);\n          return this;\n      }\n      /**\n       * Sets all the matrix elements to zero\n       * @returns the current matrix\n       */\n      reset() {\n          Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n          this._updateIdentityStatus(false);\n          return this;\n      }\n      /**\n       * Adds the current matrix with a second one\n       * @param other - defines the matrix to add\n       * @returns a new matrix as the addition of the current matrix and the given one\n       */\n      add(other) {\n          const result = new Matrix();\n          this.addToRef(other, result);\n          return result;\n      }\n      /**\n       * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n       * @param other - defines the matrix to add\n       * @param result - defines the target matrix\n       * @returns the current matrix\n       */\n      addToRef(other, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = this._m[index] + other._m[index];\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Adds in place the given matrix to the current matrix\n       * @param other - defines the second operand\n       * @returns the current updated matrix\n       */\n      addToSelf(other) {\n          for (let index = 0; index < 16; index++) {\n              this._m[index] += other._m[index];\n          }\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Sets the given matrix to the current inverted Matrix\n       * @param other - defines the target matrix\n       * @returns the unmodified current matrix\n       */\n      invertToRef(other) {\n          if (this._isIdentity === true) {\n              Matrix.IdentityToRef(other);\n              return this;\n          }\n          // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n          const m = this._m;\n          // tslint:disable:one-variable-per-declaration\n          const m00 = m[0], m01 = m[1], m02 = m[2], m03 = m[3];\n          const m10 = m[4], m11 = m[5], m12 = m[6], m13 = m[7];\n          const m20 = m[8], m21 = m[9], m22 = m[10], m23 = m[11];\n          const m30 = m[12], m31 = m[13], m32 = m[14], m33 = m[15];\n          // tslint:enable:one-variable-per-declaration\n          // tslint:disable:variable-name\n          const det_22_33 = m22 * m33 - m32 * m23;\n          const det_21_33 = m21 * m33 - m31 * m23;\n          const det_21_32 = m21 * m32 - m31 * m22;\n          const det_20_33 = m20 * m33 - m30 * m23;\n          const det_20_32 = m20 * m32 - m22 * m30;\n          const det_20_31 = m20 * m31 - m30 * m21;\n          const cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n          const cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n          const cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n          const cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n          const det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n          if (det === 0) {\n              // not invertible\n              other.copyFrom(this);\n              return this;\n          }\n          const detInv = 1 / det;\n          const det_12_33 = m12 * m33 - m32 * m13;\n          const det_11_33 = m11 * m33 - m31 * m13;\n          const det_11_32 = m11 * m32 - m31 * m12;\n          const det_10_33 = m10 * m33 - m30 * m13;\n          const det_10_32 = m10 * m32 - m30 * m12;\n          const det_10_31 = m10 * m31 - m30 * m11;\n          const det_12_23 = m12 * m23 - m22 * m13;\n          const det_11_23 = m11 * m23 - m21 * m13;\n          const det_11_22 = m11 * m22 - m21 * m12;\n          const det_10_23 = m10 * m23 - m20 * m13;\n          const det_10_22 = m10 * m22 - m20 * m12;\n          const det_10_21 = m10 * m21 - m20 * m11;\n          const cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n          const cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n          const cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n          const cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n          const cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n          const cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n          const cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n          const cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n          const cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n          const cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n          const cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n          const cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n          Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n          // tslint:enable:variable-name\n          return this;\n      }\n      /**\n       * add a value at the specified position in the current Matrix\n       * @param index - the index of the value within the matrix. between 0 and 15.\n       * @param value - the value to be added\n       * @returns the current updated matrix\n       */\n      addAtIndex(index, value) {\n          this._m[index] += value;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * mutiply the specified position in the current Matrix by a value\n       * @param index - the index of the value within the matrix. between 0 and 15.\n       * @param value - the value to be added\n       * @returns the current updated matrix\n       */\n      multiplyAtIndex(index, value) {\n          this._m[index] *= value;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Inserts the translation vector (using 3 floats) in the current matrix\n       * @param x - defines the 1st component of the translation\n       * @param y - defines the 2nd component of the translation\n       * @param z - defines the 3rd component of the translation\n       * @returns the current updated matrix\n       */\n      setTranslationFromFloats(x, y, z) {\n          this._m[12] = x;\n          this._m[13] = y;\n          this._m[14] = z;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Inserts the translation vector in the current matrix\n       * @param vector3 - defines the translation to insert\n       * @returns the current updated matrix\n       */\n      setTranslation(vector3) {\n          return this.setTranslationFromFloats(vector3.x, vector3.y, vector3.z);\n      }\n      /**\n       * Gets the translation value of the current matrix\n       * @returns a new Vector3 as the extracted translation from the matrix\n       */\n      getTranslation() {\n          return new Vector3_1$6.Vector3(this._m[12], this._m[13], this._m[14]);\n      }\n      /**\n       * Fill a Vector3 with the extracted translation from the matrix\n       * @param result - defines the Vector3 where to store the translation\n       * @returns the current matrix\n       */\n      getTranslationToRef(result) {\n          result.x = this._m[12];\n          result.y = this._m[13];\n          result.z = this._m[14];\n          return this;\n      }\n      /**\n       * Remove rotation and scaling part from the matrix\n       * @returns the updated matrix\n       */\n      removeRotationAndScaling() {\n          const m = this.m;\n          Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n          this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n          return this;\n      }\n      /**\n       * Multiply two matrices\n       * @param other - defines the second operand\n       * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n       */\n      multiply(other) {\n          const result = new Matrix();\n          this.multiplyToRef(other, result);\n          return result;\n      }\n      /**\n       * Copy the current matrix from the given one\n       * @param other - defines the source matrix\n       * @returns the current updated matrix\n       */\n      copyFrom(other) {\n          other.copyToArray(this._m);\n          const o = other;\n          this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n          return this;\n      }\n      /**\n       * Populates the given array from the starting index with the current matrix values\n       * @param array - defines the target array\n       * @param offset - defines the offset in the target array where to start storing values\n       * @returns the current matrix\n       */\n      copyToArray(array, offset = 0) {\n          for (let index = 0; index < 16; index++) {\n              array[offset + index] = this._m[index];\n          }\n          return this;\n      }\n      /**\n       * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n       * @param other - defines the second operand\n       * @param result - defines the matrix where to store the multiplication\n       * @returns the current matrix\n       */\n      multiplyToRef(other, result) {\n          if (this._isIdentity) {\n              result.copyFrom(other);\n              return this;\n          }\n          if (other._isIdentity) {\n              result.copyFrom(this);\n              return this;\n          }\n          this.multiplyToArray(other, result._m, 0);\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Sets the FloatArray \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n       * @param other - defines the second operand\n       * @param result - defines the array where to store the multiplication\n       * @param offset - defines the offset in the target array where to start storing values\n       * @returns the current matrix\n       */\n      multiplyToArray(other, result, offset) {\n          const m = this._m;\n          const otherM = other.m;\n          // tslint:disable:one-variable-per-declaration\n          const tm0 = m[0], tm1 = m[1], tm2 = m[2], tm3 = m[3];\n          const tm4 = m[4], tm5 = m[5], tm6 = m[6], tm7 = m[7];\n          const tm8 = m[8], tm9 = m[9], tm10 = m[10], tm11 = m[11];\n          const tm12 = m[12], tm13 = m[13], tm14 = m[14], tm15 = m[15];\n          const om0 = otherM[0], om1 = otherM[1], om2 = otherM[2], om3 = otherM[3];\n          const om4 = otherM[4], om5 = otherM[5], om6 = otherM[6], om7 = otherM[7];\n          const om8 = otherM[8], om9 = otherM[9], om10 = otherM[10], om11 = otherM[11];\n          const om12 = otherM[12], om13 = otherM[13], om14 = otherM[14], om15 = otherM[15];\n          // tslint:enable:one-variable-per-declaration\n          result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n          result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n          result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n          result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n          result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n          result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n          result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n          result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n          result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n          result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n          result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n          result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n          result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n          result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n          result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n          result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n          return this;\n      }\n      /**\n       * Check equality between this matrix and a second one\n       * @param value - defines the second matrix to compare\n       * @returns true is the current matrix and the given one values are strictly equal\n       */\n      equals(value) {\n          const other = value;\n          if (!other) {\n              return false;\n          }\n          if (this._isIdentity || other._isIdentity) {\n              if (!this._isIdentityDirty && !other._isIdentityDirty) {\n                  return this._isIdentity && other._isIdentity;\n              }\n          }\n          const m = this.m;\n          const om = other.m;\n          return (m[0] === om[0] &&\n              m[1] === om[1] &&\n              m[2] === om[2] &&\n              m[3] === om[3] &&\n              m[4] === om[4] &&\n              m[5] === om[5] &&\n              m[6] === om[6] &&\n              m[7] === om[7] &&\n              m[8] === om[8] &&\n              m[9] === om[9] &&\n              m[10] === om[10] &&\n              m[11] === om[11] &&\n              m[12] === om[12] &&\n              m[13] === om[13] &&\n              m[14] === om[14] &&\n              m[15] === om[15]);\n      }\n      /**\n       * Clone the current matrix\n       * @returns a new matrix from the current matrix\n       */\n      clone() {\n          const matrix = new Matrix();\n          matrix.copyFrom(this);\n          return matrix;\n      }\n      /**\n       * Returns the name of the current matrix class\n       * @returns the string \"Matrix\"\n       */\n      getClassName() {\n          return 'Matrix';\n      }\n      /**\n       * Gets the hash code of the current matrix\n       * @returns the hash code\n       */\n      getHashCode() {\n          let hash = this._m[0] || 0;\n          for (let i = 1; i < 16; i++) {\n              hash = (hash * 397) ^ (this._m[i] || 0);\n          }\n          return hash;\n      }\n      /**\n       * Decomposes the current Matrix into a translation, rotation and scaling components\n       * @param scale - defines the scale vector3 given as a reference to update\n       * @param rotation - defines the rotation quaternion given as a reference to update\n       * @param translation - defines the translation vector3 given as a reference to update\n       * @returns true if operation was successful\n       */\n      decompose(scale, rotation, translation) {\n          if (this._isIdentity) {\n              if (translation) {\n                  translation.setAll(0);\n              }\n              if (scale) {\n                  scale.setAll(1);\n              }\n              if (rotation) {\n                  rotation.copyFromFloats(0, 0, 0, 1);\n              }\n              return true;\n          }\n          const m = this._m;\n          if (translation) {\n              translation.copyFromFloats(m[12], m[13], m[14]);\n          }\n          const usedScale = scale || preallocatedVariables_1$3.MathTmp.Vector3[0];\n          usedScale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n          usedScale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n          usedScale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n          if (this.determinant() <= 0) {\n              usedScale.y *= -1;\n          }\n          if (usedScale.x === 0 || usedScale.y === 0 || usedScale.z === 0) {\n              if (rotation) {\n                  rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n              }\n              return false;\n          }\n          if (rotation) {\n              // tslint:disable-next-line:one-variable-per-declaration\n              const sx = 1 / usedScale.x, sy = 1 / usedScale.y, sz = 1 / usedScale.z;\n              Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, preallocatedVariables_1$3.MathTmp.Matrix[0]);\n              Quaternion_1$2.Quaternion.FromRotationMatrixToRef(preallocatedVariables_1$3.MathTmp.Matrix[0], rotation);\n          }\n          return true;\n      }\n      /**\n       * Gets specific row of the matrix\n       * @param index - defines the number of the row to get\n       * @returns the index-th row of the current matrix as a new Vector4\n       */\n      getRow(index) {\n          if (index < 0 || index > 3) {\n              return null;\n          }\n          const i = index * 4;\n          return new Vector4_1.Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n      }\n      /**\n       * Sets the index-th row of the current matrix to the vector4 values\n       * @param index - defines the number of the row to set\n       * @param row - defines the target vector4\n       * @returns the updated current matrix\n       */\n      setRow(index, row) {\n          return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n      }\n      /**\n       * Compute the transpose of the matrix\n       * @returns the new transposed matrix\n       */\n      transpose() {\n          return Matrix.Transpose(this);\n      }\n      /**\n       * Compute the transpose of the matrix and store it in a given matrix\n       * @param result - defines the target matrix\n       * @returns the current matrix\n       */\n      transposeToRef(result) {\n          Matrix.TransposeToRef(this, result);\n          return this;\n      }\n      /**\n       * Sets the index-th row of the current matrix with the given 4 x float values\n       * @param index - defines the row index\n       * @param x - defines the x component to set\n       * @param y - defines the y component to set\n       * @param z - defines the z component to set\n       * @param w - defines the w component to set\n       * @returns the updated current matrix\n       */\n      setRowFromFloats(index, x, y, z, w) {\n          if (index < 0 || index > 3) {\n              return this;\n          }\n          const i = index * 4;\n          this._m[i + 0] = x;\n          this._m[i + 1] = y;\n          this._m[i + 2] = z;\n          this._m[i + 3] = w;\n          this._markAsUpdated();\n          return this;\n      }\n      /**\n       * Compute a new matrix set with the current matrix values multiplied by scale (float)\n       * @param scale - defines the scale factor\n       * @returns a new matrix\n       */\n      scale(scale) {\n          const result = new Matrix();\n          this.scaleToRef(scale, result);\n          return result;\n      }\n      /**\n       * Scale the current matrix values by a factor to a given result matrix\n       * @param scale - defines the scale factor\n       * @param result - defines the matrix to store the result\n       * @returns the current matrix\n       */\n      scaleToRef(scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] = this._m[index] * scale;\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Scale the current matrix values by a factor and add the result to a given matrix\n       * @param scale - defines the scale factor\n       * @param result - defines the Matrix to store the result\n       * @returns the current matrix\n       */\n      scaleAndAddToRef(scale, result) {\n          for (let index = 0; index < 16; index++) {\n              result._m[index] += this._m[index] * scale;\n          }\n          result._markAsUpdated();\n          return this;\n      }\n      /**\n       * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n       * @param ref - matrix to store the result\n       */\n      toNormalMatrix(ref) {\n          const tmp = preallocatedVariables_1$3.MathTmp.Matrix[0];\n          this.invertToRef(tmp);\n          tmp.transposeToRef(ref);\n          const m = ref._m;\n          Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n      }\n      /**\n       * Gets only rotation part of the current matrix\n       * @returns a new matrix sets to the extracted rotation matrix from the current one\n       */\n      getRotationMatrix() {\n          const result = new Matrix();\n          this.getRotationMatrixToRef(result);\n          return result;\n      }\n      /**\n       * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n       * @param result - defines the target matrix to store data to\n       * @returns the current matrix\n       */\n      getRotationMatrixToRef(result) {\n          const scale = preallocatedVariables_1$3.MathTmp.Vector3[0];\n          if (!this.decompose(scale)) {\n              Matrix.IdentityToRef(result);\n              return this;\n          }\n          const m = this._m;\n          // tslint:disable-next-line:one-variable-per-declaration\n          const sx = 1 / scale.x, sy = 1 / scale.y, sz = 1 / scale.z;\n          Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n          return this;\n      }\n      /**\n       * Toggles model matrix from being right handed to left handed in place and vice versa\n       */\n      toggleModelMatrixHandInPlace() {\n          const m = this._m;\n          m[2] *= -1;\n          m[6] *= -1;\n          m[8] *= -1;\n          m[9] *= -1;\n          m[14] *= -1;\n          this._markAsUpdated();\n      }\n      /**\n       * Toggles projection matrix from being right handed to left handed in place and vice versa\n       */\n      toggleProjectionMatrixHandInPlace() {\n          const m = this._m;\n          m[8] *= -1;\n          m[9] *= -1;\n          m[10] *= -1;\n          m[11] *= -1;\n          this._markAsUpdated();\n      }\n      /** @internal */\n      _updateIdentityStatus(isIdentity, isIdentityDirty = false, isIdentity3x2 = false, isIdentity3x2Dirty = true) {\n          this.updateFlag = Matrix._updateFlagSeed++;\n          this._isIdentity = isIdentity;\n          this._isIdentity3x2 = isIdentity || isIdentity3x2;\n          this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n          this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n      }\n  }\n  Matrix$1.Matrix = Matrix;\n  Matrix._updateFlagSeed = 0;\n  Matrix._identityReadOnly = Matrix.Identity();\n\n  Object.defineProperty(Quaternion$1, \"__esModule\", { value: true });\n  Quaternion$1.Quaternion = void 0;\n  const Matrix_1$2 = Matrix$1;\n  const Vector3_1$5 = Vector3$1;\n  const preallocatedVariables_1$2 = preallocatedVariables;\n  const types_1$7 = types;\n  const Scalar_1$5 = Scalar$1;\n  /**\n   * Class used to store quaternion data\n   * {@link https://en.wikipedia.org/wiki/Quaternion }\n   * {@link http://doc.babylonjs.com/features/position,_rotation,_scaling }\n   * @public\n   */\n  class Quaternion {\n      /**\n       * Creates a new Quaternion from the given floats\n       * @param x - defines the first component (0 by default)\n       * @param y - defines the second component (0 by default)\n       * @param z - defines the third component (0 by default)\n       * @param w - defines the fourth component (1.0 by default)\n       */\n      constructor(\n      /** defines the first component (0 by default) */\n      x = 0.0, \n      /** defines the second component (0 by default) */\n      y = 0.0, \n      /** defines the third component (0 by default) */\n      z = 0.0, \n      /** defines the fourth component (1.0 by default) */\n      w = 1.0) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n      }\n      // Statics\n      /**\n       * Creates a new quaternion from a rotation matrix\n       * @param matrix - defines the source matrix\n       * @returns a new quaternion created from the given rotation matrix values\n       */\n      static FromRotationMatrix(matrix) {\n          const result = new Quaternion();\n          Quaternion.FromRotationMatrixToRef(matrix, result);\n          return result;\n      }\n      /**\n       * Updates the given quaternion with the given rotation matrix values\n       * @param matrix - defines the source matrix\n       * @param result - defines the target quaternion\n       */\n      static FromRotationMatrixToRef(matrix, result) {\n          const data = matrix.m;\n          // tslint:disable:one-variable-per-declaration\n          const m11 = data[0], m12 = data[4], m13 = data[8];\n          const m21 = data[1], m22 = data[5], m23 = data[9];\n          const m31 = data[2], m32 = data[6], m33 = data[10];\n          // tslint:enable:one-variable-per-declaration\n          const trace = m11 + m22 + m33;\n          let s;\n          if (trace > 0) {\n              s = 0.5 / Math.sqrt(trace + 1.0);\n              result.w = 0.25 / s;\n              result.x = (m32 - m23) * s;\n              result.y = (m13 - m31) * s;\n              result.z = (m21 - m12) * s;\n          }\n          else if (m11 > m22 && m11 > m33) {\n              s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n              result.w = (m32 - m23) / s;\n              result.x = 0.25 * s;\n              result.y = (m12 + m21) / s;\n              result.z = (m13 + m31) / s;\n          }\n          else if (m22 > m33) {\n              s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n              result.w = (m13 - m31) / s;\n              result.x = (m12 + m21) / s;\n              result.y = 0.25 * s;\n              result.z = (m23 + m32) / s;\n          }\n          else {\n              s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n              result.w = (m21 - m12) / s;\n              result.x = (m13 + m31) / s;\n              result.y = (m23 + m32) / s;\n              result.z = 0.25 * s;\n          }\n      }\n      /**\n       * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the dot product\n       */\n      static Dot(left, right) {\n          return (left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w);\n      }\n      /**\n       * Checks if the two quaternions are close to each other\n       * @param quat0 - defines the first quaternion to check\n       * @param quat1 - defines the second quaternion to check\n       * @returns true if the two quaternions are close to each other\n       */\n      static AreClose(quat0, quat1) {\n          const dot = Quaternion.Dot(quat0, quat1);\n          return dot >= 0;\n      }\n      /**\n       * Creates an empty quaternion\n       * @returns a new quaternion set to (0.0, 0.0, 0.0)\n       */\n      static Zero() {\n          return new Quaternion(0.0, 0.0, 0.0, 0.0);\n      }\n      /**\n       * Inverse a given quaternion\n       * @param q - defines the source quaternion\n       * @returns a new quaternion as the inverted current quaternion\n       */\n      static Inverse(q) {\n          return new Quaternion(-q.x, -q.y, -q.z, q.w);\n      }\n      /**\n       * Gets a boolean indicating if the given quaternion is identity\n       * @param quaternion - defines the quaternion to check\n       * @returns true if the quaternion is identity\n       */\n      static IsIdentity(quaternion) {\n          return (quaternion &&\n              quaternion.x === 0 &&\n              quaternion.y === 0 &&\n              quaternion.z === 0 &&\n              quaternion.w === 1);\n      }\n      /**\n       * Creates a quaternion from a rotation around an axis\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle to use (in Euler degrees)\n       * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n       */\n      static RotationAxis(axis, angle) {\n          const angleRad = angle * types_1$7.DEG2RAD;\n          return Quaternion.RotationAxisToRef(axis, angleRad, new Quaternion());\n      }\n      /**\n       * Creates a rotation around an axis and stores it into the given quaternion\n       * @param axis - defines the axis to use\n       * @param angle - defines the angle to use (in Euler degrees)\n       * @param result - defines the target quaternion\n       * @returns the target quaternion\n       */\n      static RotationAxisToRef(axis, angle, result) {\n          const angleRad = angle * types_1$7.DEG2RAD;\n          const sin = Math.sin(angleRad / 2);\n          axis.normalize();\n          result.w = Math.cos(angleRad / 2);\n          result.x = axis.x * sin;\n          result.y = axis.y * sin;\n          result.z = axis.z * sin;\n          return result;\n      }\n      /**\n       * Creates a new quaternion from data stored into an array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the source array where the data starts\n       * @returns a new quaternion\n       */\n      static FromArray(array, offset = 0) {\n          return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Creates a new quaternion from a set of euler angles and stores it in the target quaternion\n       */\n      static FromEulerAnglesRef(x, y, z, result) {\n          return Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, result);\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles (y, x, z)\n       * @param yaw - defines the rotation around Y axis\n       * @param pitch - defines the rotation around X axis\n       * @param roll - defines the rotation around Z axis\n       * @returns the new quaternion\n       */\n      static RotationYawPitchRoll(yaw, pitch, roll) {\n          const q = new Quaternion();\n          Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n          return q;\n      }\n      /**\n       * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n       * @param yaw - defines the rotation around Y axis\n       * @param pitch - defines the rotation around X axis\n       * @param roll - defines the rotation around Z axis\n       * @param result - defines the target quaternion\n       */\n      static RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n          // Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n          const halfPitch = pitch * 0.5;\n          const halfYaw = yaw * 0.5;\n          const halfRoll = roll * 0.5;\n          const c1 = Math.cos(halfPitch);\n          const c2 = Math.cos(halfYaw);\n          const c3 = Math.cos(halfRoll);\n          const s1 = Math.sin(halfPitch);\n          const s2 = Math.sin(halfYaw);\n          const s3 = Math.sin(halfRoll);\n          result.x = c2 * s1 * c3 + s2 * c1 * s3;\n          result.y = s2 * c1 * c3 - c2 * s1 * s3;\n          result.z = c2 * c1 * s3 - s2 * s1 * c3;\n          result.w = c2 * c1 * c3 + s2 * s1 * s3;\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n       * @param alpha - defines the rotation around first axis\n       * @param beta - defines the rotation around second axis\n       * @param gamma - defines the rotation around third axis\n       * @returns the new quaternion\n       */\n      static RotationAlphaBetaGamma(alpha, beta, gamma) {\n          const result = new Quaternion();\n          Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n          return result;\n      }\n      /**\n       * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n       * @param alpha - defines the rotation around first axis\n       * @param beta - defines the rotation around second axis\n       * @param gamma - defines the rotation around third axis\n       * @param result - defines the target quaternion\n       */\n      static RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {\n          // Produces a quaternion from Euler angles in the z-x-z orientation\n          const halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n          const halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n          const halfBeta = beta * 0.5;\n          result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n          result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n          result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n          result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n      }\n      /**\n       * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @returns the new quaternion\n       */\n      static RotationQuaternionFromAxis(axis1, axis2, axis3) {\n          const quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n          Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n          return quat;\n      }\n      /**\n       * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @param ref - defines the target quaternion\n       */\n      static RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {\n          const rotMat = preallocatedVariables_1$2.MathTmp.Matrix[0];\n          Matrix_1$2.Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n          Quaternion.FromRotationMatrixToRef(rotMat, ref);\n      }\n      /**\n       * Interpolates between two quaternions\n       * @param left - defines first quaternion\n       * @param right - defines second quaternion\n       * @param amount - defines the gradient to use\n       * @returns the new interpolated quaternion\n       */\n      static Slerp(left, right, amount) {\n          const result = Quaternion.Identity;\n          Quaternion.SlerpToRef(left, right, amount, result);\n          return result;\n      }\n      /**\n       * Interpolates between two quaternions and stores it into a target quaternion\n       * @param left - defines first quaternion\n       * @param right - defines second quaternion\n       * @param amount - defines the gradient to use\n       * @param result - defines the target quaternion\n       */\n      static SlerpToRef(left, right, amount, result) {\n          let num2;\n          let num3;\n          let num4 = left.x * right.x + left.y * right.y + left.z * right.z + left.w * right.w;\n          let flag = false;\n          if (num4 < 0) {\n              flag = true;\n              num4 = -num4;\n          }\n          if (num4 > 0.999999) {\n              num3 = 1 - amount;\n              num2 = flag ? -amount : amount;\n          }\n          else {\n              const num5 = Math.acos(num4);\n              const num6 = 1.0 / Math.sin(num5);\n              num3 = Math.sin((1.0 - amount) * num5) * num6;\n              num2 = flag\n                  ? -Math.sin(amount * num5) * num6\n                  : Math.sin(amount * num5) * num6;\n          }\n          result.x = num3 * left.x + num2 * right.x;\n          result.y = num3 * left.y + num2 * right.y;\n          result.z = num3 * left.z + num2 * right.z;\n          result.w = num3 * left.w + num2 * right.w;\n      }\n      /**\n       * Interpolate between two quaternions using Hermite interpolation\n       * @param value1 - defines first quaternion\n       * @param tangent1 - defines the incoming tangent\n       * @param value2 - defines second quaternion\n       * @param tangent2 - defines the outgoing tangent\n       * @param amount - defines the target quaternion\n       * @returns the new interpolated quaternion\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          const z = value1.z * part1 +\n              value2.z * part2 +\n              tangent1.z * part3 +\n              tangent2.z * part4;\n          const w = value1.w * part1 +\n              value2.w * part2 +\n              tangent1.w * part3 +\n              tangent2.w * part4;\n          return new Quaternion(x, y, z, w);\n      }\n      /**\n       * Creates an identity quaternion\n       * @returns - the identity quaternion\n       */\n      static get Identity() {\n          return new Quaternion(0.0, 0.0, 0.0, 1.0);\n      }\n      /**\n       * Returns the angle in degrees between two rotations a and b.\n       * @param quat1 - defines the first quaternion\n       * @param quat2 - defines the second quaternion\n       */\n      static Angle(quat1, quat2) {\n          const dot = Quaternion.Dot(quat1, quat2);\n          return Math.acos(Math.min(Math.abs(dot), 1)) * 2 * types_1$7.RAD2DEG;\n      }\n      /**\n       * Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis.\n       * @param x - the rotation on the x axis in euler degrees\n       * @param y - the rotation on the y axis in euler degrees\n       * @param z - the rotation on the z axis in euler degrees\n       */\n      static Euler(x, y, z) {\n          return Quaternion.RotationYawPitchRoll(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD);\n      }\n      /**\n       * Creates a rotation with the specified forward and upwards directions.\n       * @param forward - the direction to look in\n       * @param up - the vector that defines in which direction up is\n       */\n      static LookRotation(forward, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          const forwardNew = Vector3_1$5.Vector3.Normalize(forward);\n          const right = Vector3_1$5.Vector3.Normalize(Vector3_1$5.Vector3.Cross(up, forwardNew));\n          const upNew = Vector3_1$5.Vector3.Cross(forwardNew, right);\n          const m00 = right.x;\n          const m01 = right.y;\n          const m02 = right.z;\n          const m10 = upNew.x;\n          const m11 = upNew.y;\n          const m12 = upNew.z;\n          const m20 = forwardNew.x;\n          const m21 = forwardNew.y;\n          const m22 = forwardNew.z;\n          const num8 = m00 + m11 + m22;\n          const quaternion = new Quaternion();\n          if (num8 > 0) {\n              let num = Math.sqrt(num8 + 1);\n              quaternion.w = num * 0.5;\n              num = 0.5 / num;\n              quaternion.x = (m12 - m21) * num;\n              quaternion.y = (m20 - m02) * num;\n              quaternion.z = (m01 - m10) * num;\n              return quaternion;\n          }\n          if (m00 >= m11 && m00 >= m22) {\n              const num7 = Math.sqrt(1 + m00 - m11 - m22);\n              const num4 = 0.5 / num7;\n              quaternion.x = 0.5 * num7;\n              quaternion.y = (m01 + m10) * num4;\n              quaternion.z = (m02 + m20) * num4;\n              quaternion.w = (m12 - m21) * num4;\n              return quaternion;\n          }\n          if (m11 > m22) {\n              const num6 = Math.sqrt(1 + m11 - m00 - m22);\n              const num3 = 0.5 / num6;\n              quaternion.x = (m10 + m01) * num3;\n              quaternion.y = 0.5 * num6;\n              quaternion.z = (m21 + m12) * num3;\n              quaternion.w = (m20 - m02) * num3;\n              return quaternion;\n          }\n          const num5 = Math.sqrt(1 + m22 - m00 - m11);\n          const num2 = 0.5 / num5;\n          quaternion.x = (m20 + m02) * num2;\n          quaternion.y = (m21 + m12) * num2;\n          quaternion.z = 0.5 * num5;\n          quaternion.w = (m01 - m10) * num2;\n          return quaternion;\n      }\n      /**\n       * The from quaternion is rotated towards to by an angular step of maxDegreesDelta.\n       * @param from - defines the first quaternion\n       * @param to - defines the second quaternion\n       * @param maxDegreesDelta - the interval step\n       */\n      static RotateTowards(from, to, maxDegreesDelta) {\n          const num = Quaternion.Angle(from, to);\n          if (num === 0) {\n              return to;\n          }\n          const t = Math.min(1, maxDegreesDelta / num);\n          return Quaternion.Slerp(from, to, t);\n      }\n      /**\n       * Creates a rotation which rotates from fromDirection to toDirection.\n       * @param from - defines the first direction Vector\n       * @param to - defines the target direction Vector\n       */\n      static FromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          // Unity-based calculations implemented from https://forum.unity.com/threads/quaternion-lookrotation-around-an-axis.608470/#post-4069888\n          const v0 = from.normalize();\n          const v1 = to.normalize();\n          const a = Vector3_1$5.Vector3.Cross(v0, v1);\n          const w = Math.sqrt(v0.lengthSquared() * v1.lengthSquared()) + Vector3_1$5.Vector3.Dot(v0, v1);\n          if (a.lengthSquared() < 0.0001) {\n              // the vectors are parallel, check w to find direction\n              // if w is 0 then values are opposite, and we sould rotate 180 degrees around the supplied axis\n              // otherwise the vectors in the same direction and no rotation should occur\n              return Math.abs(w) < 0.0001\n                  ? new Quaternion(up.x, up.y, up.z, 0).normalized\n                  : Quaternion.Identity;\n          }\n          else {\n              return new Quaternion(a.x, a.y, a.z, w).normalized;\n          }\n      }\n      /**\n       * Converts this quaternion to one with the same orientation but with a magnitude of 1.\n       */\n      get normalized() {\n          return this.normalize();\n      }\n      /**\n       * Creates a rotation which rotates from fromDirection to toDirection.\n       * @param from - defines the first Vector\n       * @param to - defines the second Vector\n       * @param up - defines the direction\n       */\n      setFromToRotation(from, to, up = preallocatedVariables_1$2.MathTmp.staticUp) {\n          const result = Quaternion.FromToRotation(from, to, up);\n          this.x = result.x;\n          this.y = result.y;\n          this.z = result.z;\n          this.w = result.w;\n      }\n      set eulerAngles(euler) {\n          this.setEuler(euler.x, euler.y, euler.z);\n      }\n      /**\n       * Gets or sets the euler angle representation of the rotation.\n       * Implemented unity-based calculations from: https://stackoverflow.com/a/56055813\n       */\n      get eulerAngles() {\n          const out = new Vector3_1$5.Vector3();\n          // if the input quaternion is normalized, this is exactly one. Otherwise, this acts as a correction factor for the quaternion's not-normalizedness\n          const unit = this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n          // this will have a magnitude of 0.5 or greater if and only if this is a singularity case\n          const test = this.x * this.w - this.y * this.z;\n          if (test > 0.4995 * unit) {\n              // singularity at north pole\n              out.x = Math.PI / 2;\n              out.y = 2 * Math.atan2(this.y, this.x);\n              out.z = 0;\n          }\n          else if (test < -0.4995 * unit) {\n              // singularity at south pole\n              out.x = -Math.PI / 2;\n              out.y = -2 * Math.atan2(this.y, this.x);\n              out.z = 0;\n          }\n          else {\n              // no singularity - this is the majority of cases\n              out.x = Math.asin(2 * (this.w * this.x - this.y * this.z));\n              out.y = Math.atan2(2 * this.w * this.y + 2 * this.z * this.x, 1 - 2 * (this.x * this.x + this.y * this.y));\n              out.z = Math.atan2(2 * this.w * this.z + 2 * this.x * this.y, 1 - 2 * (this.z * this.z + this.x * this.x));\n          }\n          out.x *= types_1$7.RAD2DEG;\n          out.y *= types_1$7.RAD2DEG;\n          out.z *= types_1$7.RAD2DEG;\n          // ensure the degree values are between 0 and 360\n          out.x = Scalar_1$5.Scalar.Repeat(out.x, 360);\n          out.y = Scalar_1$5.Scalar.Repeat(out.y, 360);\n          out.z = Scalar_1$5.Scalar.Repeat(out.z, 360);\n          return out;\n      }\n      /**\n       * Gets a string representation for the current quaternion\n       * @returns a string with the Quaternion coordinates\n       */\n      toString() {\n          return `(${this.x}, ${this.y}, ${this.z}, ${this.w})`;\n      }\n      /**\n       * Gets length of current quaternion\n       * @returns the quaternion length (float)\n       */\n      get length() {\n          return Math.sqrt(this.lengthSquared);\n      }\n      /**\n       * Gets length of current quaternion\n       * @returns the quaternion length (float)\n       */\n      get lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n      }\n      /**\n       * Gets the class name of the quaternion\n       * @returns the string \"Quaternion\"\n       */\n      getClassName() {\n          return 'Quaternion';\n      }\n      /**\n       * Gets a hash code for this quaternion\n       * @returns the quaternion hash code\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          hash = (hash * 397) ^ (this.w || 0);\n          return hash;\n      }\n      /**\n       * Copy the quaternion to an array\n       * @returns a new array populated with 4 elements from the quaternion coordinates\n       */\n      asArray() {\n          return [this.x, this.y, this.z, this.w];\n      }\n      /**\n       * Check if two quaternions are equals\n       * @param otherQuaternion - defines the second operand\n       * @returns true if the current quaternion and the given one coordinates are strictly equals\n       */\n      equals(otherQuaternion) {\n          return (otherQuaternion &&\n              this.x === otherQuaternion.x &&\n              this.y === otherQuaternion.y &&\n              this.z === otherQuaternion.z &&\n              this.w === otherQuaternion.w);\n      }\n      /**\n       * Clone the current quaternion\n       * @returns a new quaternion copied from the current one\n       */\n      clone() {\n          return new Quaternion(this.x, this.y, this.z, this.w);\n      }\n      /**\n       * Copy a quaternion to the current one\n       * @param other - defines the other quaternion\n       * @returns the updated current quaternion\n       */\n      copyFrom(other) {\n          this.x = other.x;\n          this.y = other.y;\n          this.z = other.z;\n          this.w = other.w;\n          return this;\n      }\n      /**\n       * Updates the current quaternion with the given float coordinates\n       * @param x - defines the x coordinate\n       * @param y - defines the y coordinate\n       * @param z - defines the z coordinate\n       * @param w - defines the w coordinate\n       * @returns the updated current quaternion\n       */\n      copyFromFloats(x, y, z, w) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          this.w = w;\n          return this;\n      }\n      /**\n       * Updates the current quaternion from the given float coordinates\n       * @param x - defines the x coordinate\n       * @param y - defines the y coordinate\n       * @param z - defines the z coordinate\n       * @param w - defines the w coordinate\n       * @returns the updated current quaternion\n       */\n      set(x, y, z, w) {\n          return this.copyFromFloats(x, y, z, w);\n      }\n      /**\n       * Updates the current quaternion from the given euler angles\n       * @returns the updated current quaternion\n       */\n      setEuler(x, y, z) {\n          Quaternion.RotationYawPitchRollToRef(y * types_1$7.DEG2RAD, x * types_1$7.DEG2RAD, z * types_1$7.DEG2RAD, this);\n          return this;\n      }\n      /**\n       * @internal\n       * Adds two quaternions\n       * @param other - defines the second operand\n       * @returns a new quaternion as the addition result of the given one and the current quaternion\n       */\n      add(other) {\n          return new Quaternion(this.x + other.x, this.y + other.y, this.z + other.z, this.w + other.w);\n      }\n      /**\n       * @internal\n       * Add a quaternion to the current one\n       * @param other - defines the quaternion to add\n       * @returns the current quaternion\n       */\n      addInPlace(other) {\n          this.x += other.x;\n          this.y += other.y;\n          this.z += other.z;\n          this.w += other.w;\n          return this;\n      }\n      /**\n       * Subtract two quaternions\n       * @param other - defines the second operand\n       * @returns a new quaternion as the subtraction result of the given one from the current one\n       */\n      subtract(other) {\n          return new Quaternion(this.x - other.x, this.y - other.y, this.z - other.z, this.w - other.w);\n      }\n      /**\n       * Multiplies the current quaternion by a scale factor\n       * @param value - defines the scale factor\n       * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n       */\n      scale(value) {\n          return new Quaternion(this.x * value, this.y * value, this.z * value, this.w * value);\n      }\n      /**\n       * Scale the current quaternion values by a factor and stores the result to a given quaternion\n       * @param scale - defines the scale factor\n       * @param result - defines the Quaternion object where to store the result\n       * @returns the unmodified current quaternion\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          result.z = this.z * scale;\n          result.w = this.w * scale;\n          return this;\n      }\n      /**\n       * Multiplies in place the current quaternion by a scale factor\n       * @param value - defines the scale factor\n       * @returns the current modified quaternion\n       */\n      scaleInPlace(value) {\n          this.x *= value;\n          this.y *= value;\n          this.z *= value;\n          this.w *= value;\n          return this;\n      }\n      /**\n       * Scale the current quaternion values by a factor and add the result to a given quaternion\n       * @param scale - defines the scale factor\n       * @param result - defines the Quaternion object where to store the result\n       * @returns the unmodified current quaternion\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          result.z += this.z * scale;\n          result.w += this.w * scale;\n          return this;\n      }\n      /**\n       * Multiplies two quaternions\n       * @param q1 - defines the second operand\n       * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n       */\n      multiply(q1) {\n          const result = new Quaternion(0, 0, 0, 1.0);\n          this.multiplyToRef(q1, result);\n          return result;\n      }\n      /**\n       * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n       * @param q1 - defines the second operand\n       * @param result - defines the target quaternion\n       * @returns the current quaternion\n       */\n      multiplyToRef(q1, result) {\n          const x = this.x * q1.w + this.y * q1.z - this.z * q1.y + this.w * q1.x;\n          const y = -this.x * q1.z + this.y * q1.w + this.z * q1.x + this.w * q1.y;\n          const z = this.x * q1.y - this.y * q1.x + this.z * q1.w + this.w * q1.z;\n          const w = -this.x * q1.x - this.y * q1.y - this.z * q1.z + this.w * q1.w;\n          result.copyFromFloats(x, y, z, w);\n          return this;\n      }\n      /**\n       * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n       * @param q1 - defines the second operand\n       * @returns the currentupdated quaternion\n       */\n      multiplyInPlace(q1) {\n          this.multiplyToRef(q1, this);\n          return this;\n      }\n      /**\n       * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\n       * @param ref - defines the target quaternion\n       * @returns the current quaternion\n       */\n      conjugateToRef(ref) {\n          ref.copyFromFloats(-this.x, -this.y, -this.z, this.w);\n          return this;\n      }\n      /**\n       * Conjugates in place (1-q) the current quaternion\n       * @returns the current updated quaternion\n       */\n      conjugateInPlace() {\n          this.x *= -1;\n          this.y *= -1;\n          this.z *= -1;\n          return this;\n      }\n      /**\n       * Conjugates in place (1-q) the current quaternion\n       * @returns a new quaternion\n       */\n      conjugate() {\n          const result = new Quaternion(-this.x, -this.y, -this.z, this.w);\n          return result;\n      }\n      /**\n       * Normalize in place the current quaternion\n       * @returns the current updated quaternion\n       */\n      normalize() {\n          const length = 1.0 / this.length;\n          this.x *= length;\n          this.y *= length;\n          this.z *= length;\n          this.w *= length;\n          return this;\n      }\n      angleAxis(degress, axis) {\n          if (axis.lengthSquared() === 0) {\n              return Quaternion.Identity;\n          }\n          const result = Quaternion.Identity;\n          let radians = degress * types_1$7.DEG2RAD;\n          radians *= 0.5;\n          let a2 = axis.normalize();\n          a2 = axis.scaleInPlace(Math.sin(radians));\n          result.x = a2.x;\n          result.y = a2.y;\n          result.z = a2.z;\n          result.w = Math.cos(radians);\n          return result.normalize();\n      }\n      /**\n       * Updates the given rotation matrix with the current quaternion values\n       * @param result - defines the target matrix\n       * @returns the current unchanged quaternion\n       */\n      toRotationMatrix(result) {\n          Matrix_1$2.Matrix.FromQuaternionToRef(this, result);\n          return this;\n      }\n      /**\n       * Updates the current quaternion from the given rotation matrix values\n       * @param matrix - defines the source matrix\n       * @returns the current updated quaternion\n       */\n      fromRotationMatrix(matrix) {\n          Quaternion.FromRotationMatrixToRef(matrix, this);\n          return this;\n      }\n  }\n  Quaternion$1.Quaternion = Quaternion;\n\n  Object.defineProperty(Vector3$1, \"__esModule\", { value: true });\n  Vector3$1.Vector3 = void 0;\n  const preallocatedVariables_1$1 = preallocatedVariables;\n  const types_1$6 = types;\n  const Quaternion_1$1 = Quaternion$1;\n  const Scalar_1$4 = Scalar$1;\n  /**\n   * Classed used to store (x,y,z) vector representation\n   * A Vector3 is the main object used in 3D geometry\n   * It can represent etiher the coordinates of a point the space, either a direction\n   * Reminder: Babylon.js uses a left handed forward facing system\n   * @public\n   */\n  class Vector3 {\n      /**\n       * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n       * @param x - defines the first coordinates (on X axis)\n       * @param y - defines the second coordinates (on Y axis)\n       * @param z - defines the third coordinates (on Z axis)\n       */\n      constructor(\n      /**\n       * Defines the first coordinates (on X axis)\n       */\n      x = 0, \n      /**\n       * Defines the second coordinates (on Y axis)\n       */\n      y = 0, \n      /**\n       * Defines the third coordinates (on Z axis)\n       */\n      z = 0) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n      }\n      /**\n       * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n       */\n      get isNonUniform() {\n          const absX = Math.abs(this.x);\n          const absY = Math.abs(this.y);\n          if (absX !== absY) {\n              return true;\n          }\n          const absZ = Math.abs(this.z);\n          if (absX !== absZ) {\n              return true;\n          }\n          if (absY !== absZ) {\n              return true;\n          }\n          return false;\n      }\n      // Statics\n      /**\n       * Returns a new Vector3 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector3(vector1.x, vector1.y, vector1.z).addInPlace(vector2);\n      }\n      /**\n       * Get the clip factor between two vectors\n       * @param vector0 - defines the first operand\n       * @param vector1 - defines the second operand\n       * @param axis - defines the axis to use\n       * @param size - defines the size along the axis\n       * @returns the clip factor\n       */\n      static GetClipFactor(vector0, vector1, axis, size) {\n          const d0 = Vector3.Dot(vector0, axis) - size;\n          const d1 = Vector3.Dot(vector1, axis) - size;\n          const s = d0 / (d0 - d1);\n          return s;\n      }\n      /**\n       * Get angle between two vectors\n       * @param vector0 - angle between vector0 and vector1\n       * @param vector1 - angle between vector0 and vector1\n       * @param normal - direction of the normal\n       * @returns the angle between vector0 and vector1\n       */\n      static GetAngleBetweenVectors(vector0, vector1, normal) {\n          const v0 = vector0.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[1]);\n          const v1 = vector1.normalizeToRef(preallocatedVariables_1$1.MathTmp.Vector3[2]);\n          const dot = Vector3.Dot(v0, v1);\n          const n = preallocatedVariables_1$1.MathTmp.Vector3[3];\n          Vector3.CrossToRef(v0, v1, n);\n          if (Vector3.Dot(n, normal) > 0) {\n              return Math.acos(dot);\n          }\n          return -Math.acos(dot);\n      }\n      /**\n       * Returns a new Vector3 set from the index \"offset\" of the given array\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @returns the new Vector3\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n      }\n      /**\n       * Returns a new Vector3 set from the index \"offset\" of the given FloatArray\n       * This function is deprecated.  Use FromArray instead\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @returns the new Vector3\n       */\n      static FromFloatArray(array, offset) {\n          return Vector3.FromArray(array, offset);\n      }\n      /**\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n          result.z = array[offset + 2];\n      }\n      /**\n       * Sets the given vector \"result\" with the element values from the index \"offset\" of the given FloatArray\n       * This function is deprecated.  Use FromArrayToRef instead.\n       * @param array - defines the source array\n       * @param offset - defines the offset in the source array\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromFloatArrayToRef(array, offset, result) {\n          return Vector3.FromArrayToRef(array, offset, result);\n      }\n      /**\n       * Sets the given vector \"result\" with the given floats.\n       * @param x - defines the x coordinate of the source\n       * @param y - defines the y coordinate of the source\n       * @param z - defines the z coordinate of the source\n       * @param result - defines the Vector3 where to store the result\n       */\n      static FromFloatsToRef(x, y, z, result) {\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n       * @returns a new empty Vector3\n       */\n      static Zero() {\n          return new Vector3(0.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n       * @returns a new unit Vector3\n       */\n      static One() {\n          return new Vector3(1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n       * @returns a new up Vector3\n       */\n      static Up() {\n          return new Vector3(0.0, 1.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n       * @returns a new down Vector3\n       */\n      static Down() {\n          return new Vector3(0.0, -1.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n       * @returns a new forward Vector3\n       */\n      static Forward() {\n          return new Vector3(0.0, 0.0, 1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n       * @returns a new forward Vector3\n       */\n      static Backward() {\n          return new Vector3(0.0, 0.0, -1.0);\n      }\n      /**\n       * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n       * @returns a new right Vector3\n       */\n      static Right() {\n          return new Vector3(1.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n       * @returns a new left Vector3\n       */\n      static Left() {\n          return new Vector3(-1.0, 0.0, 0.0);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @returns the transformed Vector3\n       */\n      static TransformCoordinates(vector, transformation) {\n          const result = Vector3.Zero();\n          Vector3.TransformCoordinatesToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n       * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformCoordinatesToRef(vector, transformation, result) {\n          return Vector3.TransformCoordinatesFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n      }\n      /**\n       * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n       * This method computes tranformed coordinates only, not transformed direction vectors\n       * @param x - define the x coordinate of the source vector\n       * @param y - define the y coordinate of the source vector\n       * @param z - define the z coordinate of the source vector\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n          const m = transformation.m;\n          const rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n          const ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n          const rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n          const rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n          result.x = rx * rw;\n          result.y = ry * rw;\n          result.z = rz * rw;\n      }\n      /**\n       * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @returns the new Vector3\n       */\n      static TransformNormal(vector, transformation) {\n          const result = Vector3.Zero();\n          Vector3.TransformNormalToRef(vector, transformation, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param vector - defines the Vector3 to transform\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformNormalToRef(vector, transformation, result) {\n          this.TransformNormalFromFloatsToRef(vector.x, vector.y, vector.z, transformation, result);\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n       * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n       * @param x - define the x coordinate of the source vector\n       * @param y - define the y coordinate of the source vector\n       * @param z - define the z coordinate of the source vector\n       * @param transformation - defines the transformation matrix\n       * @param result - defines the Vector3 where to store the result\n       */\n      static TransformNormalFromFloatsToRef(x, y, z, transformation, result) {\n          const m = transformation.m;\n          result.x = x * m[0] + y * m[4] + z * m[8];\n          result.y = x * m[1] + y * m[5] + z * m[9];\n          result.z = x * m[2] + y * m[6] + z * m[10];\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n       * @param value1 - defines the first control point\n       * @param value2 - defines the second control point\n       * @param value3 - defines the third control point\n       * @param value4 - defines the fourth control point\n       * @param amount - defines the amount on the spline to use\n       * @returns the new Vector3\n       */\n      static CatmullRom(value1, value2, value3, value4, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const x = 0.5 *\n              (2.0 * value2.x +\n                  (-value1.x + value3.x) * amount +\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n                      squared +\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n          const y = 0.5 *\n              (2.0 * value2.y +\n                  (-value1.y + value3.y) * amount +\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n                      squared +\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n          const z = 0.5 *\n              (2.0 * value2.z +\n                  (-value1.z + value3.z) * amount +\n                  (2.0 * value1.z - 5.0 * value2.z + 4.0 * value3.z - value4.z) *\n                      squared +\n                  (-value1.z + 3.0 * value2.z - 3.0 * value3.z + value4.z) * cubed);\n          return new Vector3(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n       * @param value - defines the current value\n       * @param min - defines the lower range value\n       * @param max - defines the upper range value\n       * @returns the new Vector3\n       */\n      static Clamp(value, min, max) {\n          const v = new Vector3();\n          Vector3.ClampToRef(value, min, max, v);\n          return v;\n      }\n      /**\n       * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n       * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n       * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n       * @param value - defines the current value\n       * @param min - defines the lower range value\n       * @param max - defines the upper range value\n       * @param result - defines the Vector3 where to store the result\n       */\n      static ClampToRef(value, min, max, result) {\n          let x = value.x;\n          x = x > max.x ? max.x : x;\n          x = x < min.x ? min.x : x;\n          let y = value.y;\n          y = y > max.y ? max.y : y;\n          y = y < min.y ? min.y : y;\n          let z = value.z;\n          z = z > max.z ? max.z : z;\n          z = z < min.z ? min.z : z;\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n       * @param value1 - defines the first control point\n       * @param tangent1 - defines the first tangent vector\n       * @param value2 - defines the second control point\n       * @param tangent2 - defines the second tangent vector\n       * @param amount - defines the amount on the interpolation spline (between 0 and 1)\n       * @returns the new Vector3\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          const z = value1.z * part1 +\n              value2.z * part2 +\n              tangent1.z * part3 +\n              tangent2.z * part4;\n          return new Vector3(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n       * @param start - defines the start value\n       * @param end - defines the end value\n       * @param amount - max defines amount between both (between 0 and 1)\n       * @returns the new Vector3\n       */\n      static Lerp(start, end, amount) {\n          const result = new Vector3(0, 0, 0);\n          Vector3.LerpToRef(start, end, amount, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n       * @param start - defines the start value\n       * @param end - defines the end value\n       * @param amount - max defines amount between both (between 0 and 1)\n       * @param result - defines the Vector3 where to store the result\n       */\n      static LerpToRef(start, end, amount, result) {\n          result.x = start.x + (end.x - start.x) * amount;\n          result.y = start.y + (end.y - start.y) * amount;\n          result.z = start.z + (end.z - start.z) * amount;\n      }\n      /**\n       * Returns the dot product (float) between the vectors \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the dot product\n       */\n      static Dot(left, right) {\n          return left.x * right.x + left.y * right.y + left.z * right.z;\n      }\n      /**\n       * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n       * The cross product is then orthogonal to both \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @returns the cross product\n       */\n      static Cross(left, right) {\n          const result = Vector3.Zero();\n          Vector3.CrossToRef(left, right, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n       * The cross product is then orthogonal to both \"left\" and \"right\"\n       * @param left - defines the left operand\n       * @param right - defines the right operand\n       * @param result - defines the Vector3 where to store the result\n       */\n      static CrossToRef(left, right, result) {\n          const x = left.y * right.z - left.z * right.y;\n          const y = left.z * right.x - left.x * right.z;\n          const z = left.x * right.y - left.y * right.x;\n          result.copyFromFloats(x, y, z);\n      }\n      /**\n       * Returns a new Vector3 as the normalization of the given vector\n       * @param vector - defines the Vector3 to normalize\n       * @returns the new Vector3\n       */\n      static Normalize(vector) {\n          const result = Vector3.Zero();\n          Vector3.NormalizeToRef(vector, result);\n          return result;\n      }\n      /**\n       * Sets the given vector \"result\" with the normalization of the given first vector\n       * @param vector - defines the Vector3 to normalize\n       * @param result - defines the Vector3 where to store the result\n       */\n      static NormalizeToRef(vector, result) {\n          vector.normalizeToRef(result);\n      }\n      /**\n       * Gets the minimal coordinate values between two Vector3\n       * @param left - defines the first operand\n       * @param right - defines the second operand\n       * @returns the new Vector3\n       */\n      static Minimize(left, right) {\n          const min = new Vector3(left.x, left.y, left.z);\n          min.minimizeInPlace(right);\n          return min;\n      }\n      /**\n       * Gets the maximal coordinate values between two Vector3\n       * @param left - defines the first operand\n       * @param right - defines the second operand\n       * @returns the new Vector3\n       */\n      static Maximize(left, right) {\n          const max = new Vector3(left.x, left.y, left.z);\n          max.maximizeInPlace(right);\n          return max;\n      }\n      /**\n       * Returns the distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the distance\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the squared distance\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          const z = value1.z - value2.z;\n          return x * x + y * y + z * z;\n      }\n      /**\n       * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n       * @param value1 - defines the first operand\n       * @param value2 - defines the second operand\n       * @returns the new Vector3\n       */\n      static Center(value1, value2) {\n          const center = Vector3.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n       * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n       * to something in order to rotate it from its local system to the given target system\n       * Note: axis1, axis2 and axis3 are normalized during this operation\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @returns a new Vector3\n       */\n      static RotationFromAxis(axis1, axis2, axis3) {\n          const rotation = Vector3.Zero();\n          Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n          return rotation;\n      }\n      /**\n       * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n       * @param axis1 - defines the first axis\n       * @param axis2 - defines the second axis\n       * @param axis3 - defines the third axis\n       * @param ref - defines the Vector3 where to store the result\n       */\n      static RotationFromAxisToRef(axis1, axis2, axis3, ref) {\n          const quat = preallocatedVariables_1$1.MathTmp.Quaternion[0];\n          Quaternion_1$1.Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n          ref.copyFrom(quat.eulerAngles);\n      }\n      /**\n       * Creates a string representation of the Vector3\n       * @returns a string with the Vector3 coordinates.\n       */\n      toString() {\n          return `(${this.x}, ${this.y}, ${this.z})`;\n      }\n      /**\n       * Gets the class name\n       * @returns the string \"Vector3\"\n       */\n      getClassName() {\n          return 'Vector3';\n      }\n      /**\n       * Creates the Vector3 hash code\n       * @returns a number which tends to be unique between Vector3 instances\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          hash = (hash * 397) ^ (this.z || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Creates an array containing three elements : the coordinates of the Vector3\n       * @returns a new array of numbers\n       */\n      asArray() {\n          const result = [];\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Populates the given array or FloatArray from the given index with the successive coordinates of the Vector3\n       * @param array - defines the destination array\n       * @param index - defines the offset in the destination array\n       * @returns the current Vector3\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          array[index + 2] = this.z;\n          return this;\n      }\n      /**\n       * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n       * @returns a new Quaternion object, computed from the Vector3 coordinates\n       */\n      toQuaternion() {\n          return Quaternion_1$1.Quaternion.Identity.setEuler(this.y, this.x, this.z);\n      }\n      /**\n       * Adds the given vector to the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      addInPlace(otherVector) {\n          return this.addInPlaceFromFloats(otherVector.x, otherVector.y, otherVector.z);\n      }\n      /**\n       * Adds the given coordinates to the current Vector3\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      addInPlaceFromFloats(x, y, z) {\n          this.x += x;\n          this.y += y;\n          this.z += z;\n          return this;\n      }\n      /**\n       * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n       * @param otherVector - defines the second operand\n       * @returns the resulting Vector3\n       */\n      add(otherVector) {\n          return new Vector3(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n      }\n      /**\n       * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      addToRef(otherVector, result) {\n          return result.copyFromFloats(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z);\n      }\n      /**\n       * Subtract the given vector from the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          this.z -= otherVector.z;\n          return this;\n      }\n      /**\n       * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n       * @param otherVector - defines the second operand\n       * @returns the resulting Vector3\n       */\n      subtract(otherVector) {\n          return new Vector3(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z);\n      }\n      /**\n       * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      subtractToRef(otherVector, result) {\n          return this.subtractFromFloatsToRef(otherVector.x, otherVector.y, otherVector.z, result);\n      }\n      /**\n       * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the resulting Vector3\n       */\n      subtractFromFloats(x, y, z) {\n          return new Vector3(this.x - x, this.y - y, this.z - z);\n      }\n      /**\n       * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      subtractFromFloatsToRef(x, y, z, result) {\n          return result.copyFromFloats(this.x - x, this.y - y, this.z - z);\n      }\n      /**\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective\n       * @param matrix - The transformation matrix\n       */\n      applyMatrix4(matrix) {\n          this.applyMatrix4ToRef(matrix, this);\n      }\n      /**\n       * Multiplies this vector (with an implicit 1 in the 4th dimension) and m, and divides by perspective and set the given vector \"result\" with this result\n       * @param matrix - The transformation matrix\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      applyMatrix4ToRef(matrix, result) {\n          const { x, y, z } = this;\n          const { m } = matrix;\n          const w = 1 / (m[3] * x + m[7] * y + m[11] * z + m[15]);\n          result.x = (m[0] * x + m[4] * y + m[8] * z + m[12]) * w;\n          result.y = (m[1] * x + m[5] * y + m[9] * z + m[13]) * w;\n          result.z = (m[2] * x + m[6] * y + m[10] * z + m[14]) * w;\n          return result;\n      }\n      /**\n       * Rotates the current Vector3 based on the given quaternion\n       * @param q - defines the Quaternion\n       * @returns the current Vector3\n       */\n      rotate(q) {\n          return this.rotateToRef(q, this);\n      }\n      /**\n       * Rotates current Vector3 based on the given quaternion, but applies the rotation to target Vector3.\n       * @param q - defines the Quaternion\n       * @param result - defines the target Vector3\n       * @returns the current Vector3\n       */\n      rotateToRef(q, result) {\n          const { x, y, z } = this;\n          const { x: qx, y: qy, z: qz, w: qw } = q;\n          // calculate quat * vector\n          const ix = qw * x + qy * z - qz * y;\n          const iy = qw * y + qz * x - qx * z;\n          const iz = qw * z + qx * y - qy * x;\n          const iw = -qx * x - qy * y - qz * z;\n          // calculate result * inverse quat\n          result.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n          result.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n          result.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n          return result;\n      }\n      /**\n       * Gets a new Vector3 set with the current Vector3 negated coordinates\n       * @returns a new Vector3\n       */\n      negate() {\n          return new Vector3(-this.x, -this.y, -this.z);\n      }\n      /**\n       * Multiplies the Vector3 coordinates by the float \"scale\"\n       * @param scale - defines the multiplier factor\n       * @returns the current updated Vector3\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          this.z *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n       * @param scale - defines the multiplier factor\n       * @returns a new Vector3\n       */\n      scale(scale) {\n          return new Vector3(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n       * @param scale - defines the multiplier factor\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      scaleToRef(scale, result) {\n          return result.copyFromFloats(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Scale the current Vector3 values by a factor and add the result to a given Vector3\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the unmodified current Vector3\n       */\n      scaleAndAddToRef(scale, result) {\n          return result.addInPlaceFromFloats(this.x * scale, this.y * scale, this.z * scale);\n      }\n      /**\n       * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n       * @param otherVector - defines the second operand\n       * @returns true if both vectors are equals\n       */\n      equals(otherVector) {\n          return (otherVector &&\n              this.x === otherVector.x &&\n              this.y === otherVector.y &&\n              this.z === otherVector.z);\n      }\n      /**\n       * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n       * @param otherVector - defines the second operand\n       * @param epsilon - defines the minimal distance to define values as equals\n       * @returns true if both vectors are distant less than epsilon\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$6.Epsilon) {\n          return (otherVector &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) &&\n              Scalar_1$4.Scalar.WithinEpsilon(this.z, otherVector.z, epsilon));\n      }\n      /**\n       * Returns true if the current Vector3 coordinates equals the given floats\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns true if both vectors are equals\n       */\n      equalsToFloats(x, y, z) {\n          return this.x === x && this.y === y && this.z === z;\n      }\n      /**\n       * Multiplies the current Vector3 coordinates by the given ones\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          this.z *= otherVector.z;\n          return this;\n      }\n      /**\n       * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n       * @param otherVector - defines the second operand\n       * @returns the new Vector3\n       */\n      multiply(otherVector) {\n          return this.multiplyByFloats(otherVector.x, otherVector.y, otherVector.z);\n      }\n      /**\n       * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      multiplyToRef(otherVector, result) {\n          return result.copyFromFloats(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the new Vector3\n       */\n      multiplyByFloats(x, y, z) {\n          return new Vector3(this.x * x, this.y * y, this.z * z);\n      }\n      /**\n       * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n       * @param otherVector - defines the second operand\n       * @returns the new Vector3\n       */\n      divide(otherVector) {\n          return new Vector3(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n       * @param otherVector - defines the second operand\n       * @param result - defines the Vector3 object where to store the result\n       * @returns the current Vector3\n       */\n      divideToRef(otherVector, result) {\n          return result.copyFromFloats(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z);\n      }\n      /**\n       * Divides the current Vector3 coordinates by the given ones.\n       * @param otherVector - defines the second operand\n       * @returns the current updated Vector3\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n       * @param other - defines the second operand\n       * @returns the current updated Vector3\n       */\n      minimizeInPlace(other) {\n          return this.minimizeInPlaceFromFloats(other.x, other.y, other.z);\n      }\n      /**\n       * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n       * @param other - defines the second operand\n       * @returns the current updated Vector3\n       */\n      maximizeInPlace(other) {\n          return this.maximizeInPlaceFromFloats(other.x, other.y, other.z);\n      }\n      /**\n       * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      minimizeInPlaceFromFloats(x, y, z) {\n          if (x < this.x) {\n              this.x = x;\n          }\n          if (y < this.y) {\n              this.y = y;\n          }\n          if (z < this.z) {\n              this.z = z;\n          }\n          return this;\n      }\n      /**\n       * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      maximizeInPlaceFromFloats(x, y, z) {\n          if (x > this.x) {\n              this.x = x;\n          }\n          if (y > this.y) {\n              this.y = y;\n          }\n          if (z > this.z) {\n              this.z = z;\n          }\n          return this;\n      }\n      /**\n       * Gets a new Vector3 from current Vector3 floored values\n       * @returns a new Vector3\n       */\n      floor() {\n          return new Vector3(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z));\n      }\n      /**\n       * Gets a new Vector3 from current Vector3 floored values\n       * @returns a new Vector3\n       */\n      fract() {\n          return new Vector3(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z));\n      }\n      // Properties\n      /**\n       * Gets the length of the Vector3\n       * @returns the length of the Vecto3\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n      }\n      /**\n       * Gets the squared length of the Vector3\n       * @returns squared length of the Vector3\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y + this.z * this.z;\n      }\n      /**\n       * Normalize the current Vector3.\n       * Please note that this is an in place operation.\n       * @returns the current updated Vector3\n       */\n      normalize() {\n          return this.normalizeFromLength(this.length());\n      }\n      /**\n       * Normalize the current Vector3 with the given input length.\n       * Please note that this is an in place operation.\n       * @param len - the length of the vector\n       * @returns the current updated Vector3\n       */\n      normalizeFromLength(len) {\n          if (len === 0 || len === 1.0) {\n              return this;\n          }\n          return this.scaleInPlace(1.0 / len);\n      }\n      /**\n       * Normalize the current Vector3 to a new vector\n       * @returns the new Vector3\n       */\n      normalizeToNew() {\n          const normalized = new Vector3(0, 0, 0);\n          this.normalizeToRef(normalized);\n          return normalized;\n      }\n      /**\n       * Normalize the current Vector3 to the reference\n       * @param reference - define the Vector3 to update\n       * @returns the updated Vector3\n       */\n      normalizeToRef(reference) {\n          const len = this.length();\n          if (len === 0 || len === 1.0) {\n              return reference.copyFromFloats(this.x, this.y, this.z);\n          }\n          return this.scaleToRef(1.0 / len, reference);\n      }\n      /**\n       * Creates a new Vector3 copied from the current Vector3\n       * @returns the new Vector3\n       */\n      clone() {\n          return new Vector3(this.x, this.y, this.z);\n      }\n      /**\n       * Copies the given vector coordinates to the current Vector3 ones\n       * @param source - defines the source Vector3\n       * @returns the current updated Vector3\n       */\n      copyFrom(source) {\n          return this.copyFromFloats(source.x, source.y, source.z);\n      }\n      /**\n       * Copies the given floats to the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      copyFromFloats(x, y, z) {\n          this.x = x;\n          this.y = y;\n          this.z = z;\n          return this;\n      }\n      /**\n       * Copies the given floats to the current Vector3 coordinates\n       * @param x - defines the x coordinate of the operand\n       * @param y - defines the y coordinate of the operand\n       * @param z - defines the z coordinate of the operand\n       * @returns the current updated Vector3\n       */\n      set(x, y, z) {\n          return this.copyFromFloats(x, y, z);\n      }\n      /**\n       * Copies the given float to the current Vector3 coordinates\n       * @param v - defines the x, y and z coordinates of the operand\n       * @returns the current updated Vector3\n       */\n      setAll(v) {\n          this.x = this.y = this.z = v;\n          return this;\n      }\n  }\n  Vector3$1.Vector3 = Vector3;\n\n  Object.defineProperty(preallocatedVariables, \"__esModule\", { value: true });\n  preallocatedVariables.MathTmp = void 0;\n  const utils_1 = utils;\n  const Vector3_1$4 = Vector3$1;\n  const Quaternion_1 = Quaternion$1;\n  const Matrix_1$1 = Matrix$1;\n  // Temporary pre-allocated objects for engine internal use\n  // usage in any internal function :\n  // var tmp = Tmp.Vector3[0];   <= gets access to the first pre-created Vector3\n  // There's a Tmp array per object type : int, float, Vector2, Vector3, Vector4, Quaternion, Matrix\n  /**\n   * @public\n   * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n   */\n  preallocatedVariables.MathTmp = {\n      Vector3: (0, utils_1.buildArray)(6, Vector3_1$4.Vector3.Zero),\n      Matrix: (0, utils_1.buildArray)(2, Matrix_1$1.Matrix.Identity),\n      Quaternion: (0, utils_1.buildArray)(3, Quaternion_1.Quaternion.Zero),\n      staticUp: Vector3_1$4.Vector3.Up(),\n      tmpMatrix: Matrix_1$1.Matrix.Zero()\n  };\n\n  var Angle$1 = {};\n\n  Object.defineProperty(Angle$1, \"__esModule\", { value: true });\n  Angle$1.Angle = void 0;\n  /**\n   * Defines angle representation\n   * @public\n   */\n  class Angle {\n      /**\n       * Creates an Angle object of \"radians\" radians (float).\n       */\n      constructor(radians) {\n          this._radians = radians;\n          if (this._radians < 0.0) {\n              this._radians += 2.0 * Math.PI;\n          }\n      }\n      /**\n       * Gets a new Angle object valued with the angle value in radians between the two given vectors\n       * @param a - defines first vector\n       * @param b - defines second vector\n       * @returns a new Angle\n       */\n      static BetweenTwoPoints(a, b) {\n          const delta = b.subtract(a);\n          const theta = Math.atan2(delta.y, delta.x);\n          return new Angle(theta);\n      }\n      /**\n       * Gets a new Angle object from the given float in radians\n       * @param radians - defines the angle value in radians\n       * @returns a new Angle\n       */\n      static FromRadians(radians) {\n          return new Angle(radians);\n      }\n      /**\n       * Gets a new Angle object from the given float in degrees\n       * @param degrees - defines the angle value in degrees\n       * @returns a new Angle\n       */\n      static FromDegrees(degrees) {\n          return new Angle((degrees * Math.PI) / 180.0);\n      }\n      /**\n       * Get value in degrees\n       * @returns the Angle value in degrees (float)\n       */\n      degrees() {\n          return (this._radians * 180.0) / Math.PI;\n      }\n      /**\n       * Get value in radians\n       * @returns the Angle value in radians (float)\n       */\n      radians() {\n          return this._radians;\n      }\n  }\n  Angle$1.Angle = Angle;\n\n  var Arc2$1 = {};\n\n  var Vector2$1 = {};\n\n  Object.defineProperty(Vector2$1, \"__esModule\", { value: true });\n  Vector2$1.Vector2 = void 0;\n  const types_1$5 = types;\n  const Scalar_1$3 = Scalar$1;\n  /**\n   * Class representing a vector containing 2 coordinates\n   * @public\n   */\n  class Vector2 {\n      /**\n       * Creates a new Vector2 from the given x and y coordinates\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       */\n      constructor(\n      /** defines the first coordinate */\n      x = 0, \n      /** defines the second coordinate */\n      y = 0) {\n          this.x = x;\n          this.y = y;\n      }\n      /**\n       * Gets a new Vector2(0, 0)\n       * @returns a new Vector2\n       */\n      static Zero() {\n          return new Vector2(0, 0);\n      }\n      /**\n       * Gets a new Vector2(1, 1)\n       * @returns a new Vector2\n       */\n      static One() {\n          return new Vector2(1, 1);\n      }\n      /**\n       * Returns a new Vector2 as the result of the addition of the two given vectors.\n       * @param vector1 - the first vector\n       * @param vector2 - the second vector\n       * @returns the resulting vector\n       */\n      static Add(vector1, vector2) {\n          return new Vector2(vector1.x, vector1.y).addInPlace(vector2);\n      }\n      /**\n       * Gets a new Vector2 set from the given index element of the given array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the data source\n       * @returns a new Vector2\n       */\n      static FromArray(array, offset = 0) {\n          return new Vector2(array[offset], array[offset + 1]);\n      }\n      /**\n       * Sets \"result\" from the given index element of the given array\n       * @param array - defines the data source\n       * @param offset - defines the offset in the data source\n       * @param result - defines the target vector\n       */\n      static FromArrayToRef(array, offset, result) {\n          result.x = array[offset];\n          result.y = array[offset + 1];\n      }\n      /**\n       * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n       * @param value1 - defines 1st point of control\n       * @param value2 - defines 2nd point of control\n       * @param value3 - defines 3rd point of control\n       * @param value4 - defines 4th point of control\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static CatmullRom(value1, value2, value3, value4, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const x = 0.5 *\n              (2.0 * value2.x +\n                  (-value1.x + value3.x) * amount +\n                  (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) *\n                      squared +\n                  (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n          const y = 0.5 *\n              (2.0 * value2.y +\n                  (-value1.y + value3.y) * amount +\n                  (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) *\n                      squared +\n                  (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\n       * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\n       * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n       * @param value - defines the value to clamp\n       * @param min - defines the lower limit\n       * @param max - defines the upper limit\n       * @returns a new Vector2\n       */\n      static Clamp(value, min, max) {\n          let x = value.x;\n          x = x > max.x ? max.x : x;\n          x = x < min.x ? min.x : x;\n          let y = value.y;\n          y = y > max.y ? max.y : y;\n          y = y < min.y ? min.y : y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\n       * @param value1 - defines the 1st control point\n       * @param tangent1 - defines the outgoing tangent\n       * @param value2 - defines the 2nd control point\n       * @param tangent2 - defines the incoming tangent\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static Hermite(value1, tangent1, value2, tangent2, amount) {\n          const squared = amount * amount;\n          const cubed = amount * squared;\n          const part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n          const part2 = -2.0 * cubed + 3.0 * squared;\n          const part3 = cubed - 2.0 * squared + amount;\n          const part4 = cubed - squared;\n          const x = value1.x * part1 +\n              value2.x * part2 +\n              tangent1.x * part3 +\n              tangent2.x * part4;\n          const y = value1.y * part1 +\n              value2.y * part2 +\n              tangent1.y * part3 +\n              tangent2.y * part4;\n          return new Vector2(x, y);\n      }\n      /**\n       * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n       * @param start - defines the start vector\n       * @param end - defines the end vector\n       * @param amount - defines the interpolation factor\n       * @returns a new Vector2\n       */\n      static Lerp(start, end, amount) {\n          const x = start.x + (end.x - start.x) * amount;\n          const y = start.y + (end.y - start.y) * amount;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets the dot product of the vector \"left\" and the vector \"right\"\n       * @param left - defines first vector\n       * @param right - defines second vector\n       * @returns the dot product (float)\n       */\n      static Dot(left, right) {\n          return left.x * right.x + left.y * right.y;\n      }\n      /**\n       * Returns a new Vector2 equal to the normalized given vector\n       * @param vector - defines the vector to normalize\n       * @returns a new Vector2\n       */\n      static Normalize(vector) {\n          const newVector = new Vector2(vector.x, vector.y);\n          newVector.normalize();\n          return newVector;\n      }\n      /**\n       * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n       * @param left - defines 1st vector\n       * @param right - defines 2nd vector\n       * @returns a new Vector2\n       */\n      static Minimize(left, right) {\n          const x = left.x < right.x ? left.x : right.x;\n          const y = left.y < right.y ? left.y : right.y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n       * @param left - defines 1st vector\n       * @param right - defines 2nd vector\n       * @returns a new Vector2\n       */\n      static Maximize(left, right) {\n          const x = left.x > right.x ? left.x : right.x;\n          const y = left.y > right.y ? left.y : right.y;\n          return new Vector2(x, y);\n      }\n      /**\n       * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n       * @param vector - defines the vector to transform\n       * @param transformation - defines the matrix to apply\n       * @returns a new Vector2\n       */\n      static Transform(vector, transformation) {\n          const r = Vector2.Zero();\n          Vector2.TransformToRef(vector, transformation, r);\n          return r;\n      }\n      /**\n       * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n       * @param vector - defines the vector to transform\n       * @param transformation - defines the matrix to apply\n       * @param result - defines the target vector\n       */\n      static TransformToRef(vector, transformation, result) {\n          const m = transformation.m;\n          const x = vector.x * m[0] + vector.y * m[4] + m[12];\n          const y = vector.x * m[1] + vector.y * m[5] + m[13];\n          result.x = x;\n          result.y = y;\n      }\n      /**\n       * Determines if a given vector is included in a triangle\n       * @param p - defines the vector to test\n       * @param p0 - defines 1st triangle point\n       * @param p1 - defines 2nd triangle point\n       * @param p2 - defines 3rd triangle point\n       * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\n       */\n      static PointInTriangle(p, p0, p1, p2) {\n          const a = (1 / 2) *\n              (-p1.y * p2.x +\n                  p0.y * (-p1.x + p2.x) +\n                  p0.x * (p1.y - p2.y) +\n                  p1.x * p2.y);\n          const sign = a < 0 ? -1 : 1;\n          const s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) *\n              sign;\n          const t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) *\n              sign;\n          return s > 0 && t > 0 && s + t < 2 * a * sign;\n      }\n      /**\n       * Gets the distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns the distance between vectors\n       */\n      static Distance(value1, value2) {\n          return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n      }\n      /**\n       * Returns the squared distance between the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns the squared distance between vectors\n       */\n      static DistanceSquared(value1, value2) {\n          const x = value1.x - value2.x;\n          const y = value1.y - value2.y;\n          return x * x + y * y;\n      }\n      /**\n       * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n       * @param value1 - defines first vector\n       * @param value2 - defines second vector\n       * @returns a new Vector2\n       */\n      static Center(value1, value2) {\n          const center = Vector2.Add(value1, value2);\n          center.scaleInPlace(0.5);\n          return center;\n      }\n      /**\n       * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n       * @param p - defines the middle point\n       * @param segA - defines one point of the segment\n       * @param segB - defines the other point of the segment\n       * @returns the shortest distance\n       */\n      static DistanceOfPointFromSegment(p, segA, segB) {\n          const l2 = Vector2.DistanceSquared(segA, segB);\n          if (l2 === 0.0) {\n              return Vector2.Distance(p, segA);\n          }\n          const v = segB.subtract(segA);\n          const t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n          const proj = segA.add(v.multiplyByFloats(t, t));\n          return Vector2.Distance(p, proj);\n      }\n      /**\n       * Gets a string with the Vector2 coordinates\n       * @returns a string with the Vector2 coordinates\n       */\n      toString() {\n          return '{X: ' + this.x + ' Y:' + this.y + '}';\n      }\n      /**\n       * Gets class name\n       * @returns the string \"Vector2\"\n       */\n      getClassName() {\n          return 'Vector2';\n      }\n      /**\n       * Gets current vector hash code\n       * @returns the Vector2 hash code as a number\n       */\n      getHashCode() {\n          let hash = this.x || 0;\n          hash = (hash * 397) ^ (this.y || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Sets the Vector2 coordinates in the given array or FloatArray from the given index.\n       * @param array - defines the source array\n       * @param index - defines the offset in source array\n       * @returns the current Vector2\n       */\n      toArray(array, index = 0) {\n          array[index] = this.x;\n          array[index + 1] = this.y;\n          return this;\n      }\n      /**\n       * Copy the current vector to an array\n       * @returns a new array with 2 elements: the Vector2 coordinates.\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given Vector2 coordinates\n       * @param source - defines the source Vector2\n       * @returns the current updated Vector2\n       */\n      copyFrom(source) {\n          this.x = source.x;\n          this.y = source.y;\n          return this;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns the current updated Vector2\n       */\n      copyFromFloats(x, y) {\n          this.x = x;\n          this.y = y;\n          return this;\n      }\n      /**\n       * Sets the Vector2 coordinates with the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns the current updated Vector2\n       */\n      set(x, y) {\n          return this.copyFromFloats(x, y);\n      }\n      /**\n       * Add another vector with the current one\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n       */\n      add(otherVector) {\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      addToRef(otherVector, result) {\n          result.x = this.x + otherVector.x;\n          result.y = this.y + otherVector.y;\n          return this;\n      }\n      /**\n       * Set the Vector2 coordinates by adding the given Vector2 coordinates\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      addInPlace(otherVector) {\n          this.x += otherVector.x;\n          this.y += otherVector.y;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      addVector3(otherVector) {\n          return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n      }\n      /**\n       * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      subtract(otherVector) {\n          return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      subtractToRef(otherVector, result) {\n          result.x = this.x - otherVector.x;\n          result.y = this.y - otherVector.y;\n          return this;\n      }\n      /**\n       * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      subtractInPlace(otherVector) {\n          this.x -= otherVector.x;\n          this.y -= otherVector.y;\n          return this;\n      }\n      /**\n       * Multiplies in place the current Vector2 coordinates by the given ones\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      multiplyInPlace(otherVector) {\n          this.x *= otherVector.x;\n          this.y *= otherVector.y;\n          return this;\n      }\n      /**\n       * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      multiply(otherVector) {\n          return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n      }\n      /**\n       * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      multiplyToRef(otherVector, result) {\n          result.x = this.x * otherVector.x;\n          result.y = this.y * otherVector.y;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n       * @param x - defines the first coordinate\n       * @param y - defines the second coordinate\n       * @returns a new Vector2\n       */\n      multiplyByFloats(x, y) {\n          return new Vector2(this.x * x, this.y * y);\n      }\n      /**\n       * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n       * @param otherVector - defines the other vector\n       * @returns a new Vector2\n       */\n      divide(otherVector) {\n          return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n      }\n      /**\n       * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n       * @param otherVector - defines the other vector\n       * @param result - defines the target vector\n       * @returns the unmodified current Vector2\n       */\n      divideToRef(otherVector, result) {\n          result.x = this.x / otherVector.x;\n          result.y = this.y / otherVector.y;\n          return this;\n      }\n      /**\n       * Divides the current Vector2 coordinates by the given ones\n       * @param otherVector - defines the other vector\n       * @returns the current updated Vector2\n       */\n      divideInPlace(otherVector) {\n          return this.divideToRef(otherVector, this);\n      }\n      /**\n       * Gets a new Vector2 with current Vector2 negated coordinates\n       * @returns a new Vector2\n       */\n      negate() {\n          return new Vector2(-this.x, -this.y);\n      }\n      /**\n       * Multiply the Vector2 coordinates by scale\n       * @param scale - defines the scaling factor\n       * @returns the current updated Vector2\n       */\n      scaleInPlace(scale) {\n          this.x *= scale;\n          this.y *= scale;\n          return this;\n      }\n      /**\n       * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n       * @param scale - defines the scaling factor\n       * @returns a new Vector2\n       */\n      scale(scale) {\n          const result = new Vector2(0, 0);\n          this.scaleToRef(scale, result);\n          return result;\n      }\n      /**\n       * Scale the current Vector2 values by a factor to a given Vector2\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector2 object where to store the result\n       * @returns the unmodified current Vector2\n       */\n      scaleToRef(scale, result) {\n          result.x = this.x * scale;\n          result.y = this.y * scale;\n          return this;\n      }\n      /**\n       * Scale the current Vector2 values by a factor and add the result to a given Vector2\n       * @param scale - defines the scale factor\n       * @param result - defines the Vector2 object where to store the result\n       * @returns the unmodified current Vector2\n       */\n      scaleAndAddToRef(scale, result) {\n          result.x += this.x * scale;\n          result.y += this.y * scale;\n          return this;\n      }\n      /**\n       * Gets a boolean if two vectors are equals\n       * @param otherVector - defines the other vector\n       * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n       */\n      equals(otherVector) {\n          return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n      }\n      /**\n       * Gets a boolean if two vectors are equals (using an epsilon value)\n       * @param otherVector - defines the other vector\n       * @param epsilon - defines the minimal distance to consider equality\n       * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n       */\n      equalsWithEpsilon(otherVector, epsilon = types_1$5.Epsilon) {\n          return (otherVector &&\n              Scalar_1$3.Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) &&\n              Scalar_1$3.Scalar.WithinEpsilon(this.y, otherVector.y, epsilon));\n      }\n      /**\n       * Gets a new Vector2 from current Vector2 floored values\n       * @returns a new Vector2\n       */\n      floor() {\n          return new Vector2(Math.floor(this.x), Math.floor(this.y));\n      }\n      /**\n       * Gets a new Vector2 from current Vector2 floored values\n       * @returns a new Vector2\n       */\n      fract() {\n          return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n      }\n      // Properties\n      /**\n       * Gets the length of the vector\n       * @returns the vector length (float)\n       */\n      length() {\n          return Math.sqrt(this.x * this.x + this.y * this.y);\n      }\n      /**\n       * Gets the vector squared length\n       * @returns the vector squared length (float)\n       */\n      lengthSquared() {\n          return this.x * this.x + this.y * this.y;\n      }\n      // Methods\n      /**\n       * Normalize the vector\n       * @returns the current updated Vector2\n       */\n      normalize() {\n          const len = this.length();\n          if (len === 0) {\n              return this;\n          }\n          const num = 1.0 / len;\n          this.x *= num;\n          this.y *= num;\n          return this;\n      }\n      /**\n       * Gets a new Vector2 copied from the Vector2\n       * @returns a new Vector2\n       */\n      clone() {\n          return new Vector2(this.x, this.y);\n      }\n  }\n  Vector2$1.Vector2 = Vector2;\n\n  Object.defineProperty(Arc2$1, \"__esModule\", { value: true });\n  Arc2$1.Arc2 = void 0;\n  const Angle_1 = Angle$1;\n  const Vector2_1$1 = Vector2$1;\n  const types_1$4 = types;\n  /**\n   * This represents an arc in a 2d space.\n   * @public\n   */\n  class Arc2 {\n      /**\n       * Creates an Arc object from the three given points : start, middle and end.\n       * @param startPoint - Defines the start point of the arc\n       * @param midPoint - Defines the midlle point of the arc\n       * @param endPoint - Defines the end point of the arc\n       */\n      constructor(\n      /** Defines the start point of the arc */\n      startPoint, \n      /** Defines the mid point of the arc */\n      midPoint, \n      /** Defines the end point of the arc */\n      endPoint) {\n          this.startPoint = startPoint;\n          this.midPoint = midPoint;\n          this.endPoint = endPoint;\n          const temp = Math.pow(midPoint.x, 2) + Math.pow(midPoint.y, 2);\n          const startToMid = (Math.pow(startPoint.x, 2) + Math.pow(startPoint.y, 2) - temp) / 2;\n          const midToEnd = (temp - Math.pow(endPoint.x, 2) - Math.pow(endPoint.y, 2)) / 2;\n          const det = (startPoint.x - midPoint.x) * (midPoint.y - endPoint.y) -\n              (midPoint.x - endPoint.x) * (startPoint.y - midPoint.y);\n          this.centerPoint = new Vector2_1$1.Vector2((startToMid * (midPoint.y - endPoint.y) -\n              midToEnd * (startPoint.y - midPoint.y)) /\n              det, ((startPoint.x - midPoint.x) * midToEnd -\n              (midPoint.x - endPoint.x) * startToMid) /\n              det);\n          this.radius = this.centerPoint.subtract(this.startPoint).length();\n          this.startAngle = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.startPoint);\n          const a1 = this.startAngle.degrees();\n          let a2 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.midPoint).degrees();\n          let a3 = Angle_1.Angle.BetweenTwoPoints(this.centerPoint, this.endPoint).degrees();\n          // angles correction\n          if (a2 - a1 > +180.0) {\n              a2 -= 360.0;\n          }\n          if (a2 - a1 < -180.0) {\n              a2 += 360.0;\n          }\n          if (a3 - a2 > +180.0) {\n              a3 -= 360.0;\n          }\n          if (a3 - a2 < -180.0) {\n              a3 += 360.0;\n          }\n          this.orientation = a2 - a1 < 0 ? types_1$4.Orientation.CW : types_1$4.Orientation.CCW;\n          this.angle = Angle_1.Angle.FromDegrees(this.orientation === types_1$4.Orientation.CW ? a1 - a3 : a3 - a1);\n      }\n  }\n  Arc2$1.Arc2 = Arc2;\n\n  var Axis$1 = {};\n\n  Object.defineProperty(Axis$1, \"__esModule\", { value: true });\n  Axis$1.Axis = void 0;\n  const Vector3_1$3 = Vector3$1;\n  /**\n   * Defines the 3 main axes\n   * @public\n   */\n  class Axis {\n  }\n  Axis$1.Axis = Axis;\n  /** X axis */\n  Axis.X = new Vector3_1$3.Vector3(1.0, 0.0, 0.0);\n  /** Y axis */\n  Axis.Y = new Vector3_1$3.Vector3(0.0, 1.0, 0.0);\n  /** Z axis */\n  Axis.Z = new Vector3_1$3.Vector3(0.0, 0.0, 1.0);\n\n  var BezierCurve$1 = {};\n\n  Object.defineProperty(BezierCurve$1, \"__esModule\", { value: true });\n  BezierCurve$1.BezierCurve = void 0;\n  /**\n   * Class used to represent a Bezier curve\n   * @public\n   */\n  class BezierCurve {\n      /**\n       * Returns the cubic Bezier interpolated value (float) at \"t\" (float) from the given x1, y1, x2, y2 floats\n       * @param t - defines the time\n       * @param x1 - defines the left coordinate on X axis\n       * @param y1 - defines the left coordinate on Y axis\n       * @param x2 - defines the right coordinate on X axis\n       * @param y2 - defines the right coordinate on Y axis\n       * @returns the interpolated value\n       */\n      static Interpolate(t, x1, y1, x2, y2) {\n          // Extract X (which is equal to time here)\n          const f0 = 1 - 3 * x2 + 3 * x1;\n          const f1 = 3 * x2 - 6 * x1;\n          const f2 = 3 * x1;\n          let refinedT = t;\n          for (let i = 0; i < 5; i++) {\n              const refinedT2 = refinedT * refinedT;\n              const refinedT3 = refinedT2 * refinedT;\n              const x = f0 * refinedT3 + f1 * refinedT2 + f2 * refinedT;\n              const slope = 1.0 / (3.0 * f0 * refinedT2 + 2.0 * f1 * refinedT + f2);\n              refinedT -= (x - t) * slope;\n              refinedT = Math.min(1, Math.max(0, refinedT));\n          }\n          // Resolve cubic bezier for the given x\n          return (3 * Math.pow(1 - refinedT, 2) * refinedT * y1 +\n              3 * (1 - refinedT) * Math.pow(refinedT, 2) * y2 +\n              Math.pow(refinedT, 3));\n      }\n  }\n  BezierCurve$1.BezierCurve = BezierCurve;\n\n  var Color3$1 = {};\n\n  var Color4$1 = {};\n\n  Object.defineProperty(Color4$1, \"__esModule\", { value: true });\n  Color4$1.Color4 = void 0;\n  const Scalar_1$2 = Scalar$1;\n  const types_1$3 = types;\n  /**\n   * Class used to hold a RBGA color\n   * @public\n   */\n  class Color4 {\n      /**\n       * Creates a new Color4 object from red, green, blue values, all between 0 and 1\n       * @param r - defines the red component (between 0 and 1, default is 0)\n       * @param g - defines the green component (between 0 and 1, default is 0)\n       * @param b - defines the blue component (between 0 and 1, default is 0)\n       * @param a - defines the alpha component (between 0 and 1, default is 1)\n       */\n      constructor(\n      /**\n       * Defines the red component (between 0 and 1, default is 0)\n       */\n      r = 0, \n      /**\n       * Defines the green component (between 0 and 1, default is 0)\n       */\n      g = 0, \n      /**\n       * Defines the blue component (between 0 and 1, default is 0)\n       */\n      b = 0, \n      /**\n       * Defines the alpha component (between 0 and 1, default is 1)\n       */\n      a = 1) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n      }\n      // Statics\n      /**\n       * Creates a new Color4 from the string containing valid hexadecimal values\n       * @param hex - defines a string containing valid hexadecimal values\n       * @returns a new Color4 object\n       */\n      static FromHexString(hex) {\n          if (hex.substring(0, 1) !== '#' || hex.length !== 9) {\n              return new Color4(0.0, 0.0, 0.0, 0.0);\n          }\n          const r = parseInt(hex.substring(1, 3), 16);\n          const g = parseInt(hex.substring(3, 5), 16);\n          const b = parseInt(hex.substring(5, 7), 16);\n          const a = parseInt(hex.substring(7, 9), 16);\n          return Color4.FromInts(r, g, b, a);\n      }\n      /**\n       * Creates a new Color4 object set with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @returns a new Color4 object\n       */\n      static Lerp(left, right, amount) {\n          const result = new Color4(0.0, 0.0, 0.0, 0.0);\n          Color4.LerpToRef(left, right, amount, result);\n          return result;\n      }\n      /**\n       * Set the given \"result\" with the linearly interpolated values of \"amount\" between the left Color4 object and the right Color4 object\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @param result - defines the Color4 object where to store data\n       */\n      static LerpToRef(left, right, amount, result) {\n          result.r = left.r + (right.r - left.r) * amount;\n          result.g = left.g + (right.g - left.g) * amount;\n          result.b = left.b + (right.b - left.b) * amount;\n          result.a = left.a + (right.a - left.a) * amount;\n      }\n      /**\n       * Returns a Color4 value containing a red color\n       * @returns a new Color3 object\n       */\n      static Red() {\n          return new Color4(1.0, 0, 0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a green color\n       * @returns a new Color4 object\n       */\n      static Green() {\n          return new Color4(0, 1.0, 0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a blue color\n       * @returns a new Color4 object\n       */\n      static Blue() {\n          return new Color4(0, 0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a black color\n       * @returns a new Color4 object\n       */\n      static Black() {\n          return new Color4(0, 0, 0, 1);\n      }\n      /**\n       * Returns a Color4 value containing a white color\n       * @returns a new Color4 object\n       */\n      static White() {\n          return new Color4(1, 1, 1, 1);\n      }\n      /**\n       * Returns a Color4 value containing a purple color\n       * @returns a new Color4 object\n       */\n      static Purple() {\n          return new Color4(0.5, 0, 0.5, 1);\n      }\n      /**\n       * Returns a Color4 value containing a magenta color\n       * @returns a new Color4 object\n       */\n      static Magenta() {\n          return new Color4(1, 0, 1, 1);\n      }\n      /**\n       * Returns a Color4 value containing a yellow color\n       * @returns a new Color4 object\n       */\n      static Yellow() {\n          return new Color4(1, 1, 0, 1);\n      }\n      /**\n       * Returns a Color4 value containing a gray color\n       * @returns a new Color4 object\n       */\n      static Gray() {\n          return new Color4(0.5, 0.5, 0.5, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a teal color\n       * @returns a new Color4 object\n       */\n      static Teal() {\n          return new Color4(0, 1.0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color4 value containing a transparent color\n       * @returns a new Color4 object\n       */\n      static Clear() {\n          return new Color4(0, 0, 0, 0);\n      }\n      /**\n       * Creates a new Color4 from a Color3 and an alpha value\n       * @param color3 - defines the source Color3 to read from\n       * @param alpha - defines the alpha component (1.0 by default)\n       * @returns a new Color4 object\n       */\n      static FromColor3(color3, alpha = 1.0) {\n          return new Color4(color3.r, color3.g, color3.b, alpha);\n      }\n      /**\n       * Creates a new Color4 from the starting index element of the given array\n       * @param array - defines the source array to read from\n       * @param offset - defines the offset in the source array\n       * @returns a new Color4 object\n       */\n      static FromArray(array, offset = 0) {\n          return new Color4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n      }\n      /**\n       * Creates a new Color3 from integer values (less than 256)\n       * @param r - defines the red component to read from (value between 0 and 255)\n       * @param g - defines the green component to read from (value between 0 and 255)\n       * @param b - defines the blue component to read from (value between 0 and 255)\n       * @param a - defines the alpha component to read from (value between 0 and 255)\n       * @returns a new Color3 object\n       */\n      static FromInts(r, g, b, a) {\n          return new Color4(r / 255.0, g / 255.0, b / 255.0, a / 255.0);\n      }\n      /**\n       * Check the content of a given array and convert it to an array containing RGBA data\n       * If the original array was already containing count * 4 values then it is returned directly\n       * @param colors - defines the array to check\n       * @param count - defines the number of RGBA data to expect\n       * @returns an array containing count * 4 values (RGBA)\n       */\n      static CheckColors4(colors, count) {\n          // Check if color3 was used\n          if (colors.length === count * 3) {\n              const colors4 = [];\n              for (let index = 0; index < colors.length; index += 3) {\n                  const newIndex = (index / 3) * 4;\n                  colors4[newIndex] = colors[index];\n                  colors4[newIndex + 1] = colors[index + 1];\n                  colors4[newIndex + 2] = colors[index + 2];\n                  colors4[newIndex + 3] = 1.0;\n              }\n              return colors4;\n          }\n          return colors;\n      }\n      // Operators\n      /**\n       * Adds in place the given Color4 values to the current Color4 object\n       * @param right - defines the second operand\n       * @returns the current updated Color4 object\n       */\n      addInPlace(right) {\n          this.r += right.r;\n          this.g += right.g;\n          this.b += right.b;\n          this.a += right.a;\n          return this;\n      }\n      /**\n       * Creates a new array populated with 4 numeric elements : red, green, blue, alpha values\n       * @returns the new array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Stores from the starting index in the given array the Color4 successive values\n       * @param array - defines the array where to store the r,g,b components\n       * @param index - defines an optional index in the target array to define where to start storing values\n       * @returns the current Color4 object\n       */\n      toArray(array, index = 0) {\n          array[index] = this.r;\n          array[index + 1] = this.g;\n          array[index + 2] = this.b;\n          array[index + 3] = this.a;\n          return this;\n      }\n      /**\n       * Creates a new Color4 set with the added values of the current Color4 and of the given one\n       * @param right - defines the second operand\n       * @returns a new Color4 object\n       */\n      add(right) {\n          return new Color4(this.r + right.r, this.g + right.g, this.b + right.b, this.a + right.a);\n      }\n      /**\n       * Creates a new Color4 set with the subtracted values of the given one from the current Color4\n       * @param right - defines the second operand\n       * @returns a new Color4 object\n       */\n      subtract(right) {\n          return new Color4(this.r - right.r, this.g - right.g, this.b - right.b, this.a - right.a);\n      }\n      /**\n       * Subtracts the given ones from the current Color4 values and stores the results in \"result\"\n       * @param right - defines the second operand\n       * @param result - defines the Color4 object where to store the result\n       * @returns the current Color4 object\n       */\n      subtractToRef(right, result) {\n          result.r = this.r - right.r;\n          result.g = this.g - right.g;\n          result.b = this.b - right.b;\n          result.a = this.a - right.a;\n          return this;\n      }\n      /**\n       * Creates a new Color4 with the current Color4 values multiplied by scale\n       * @param scale - defines the scaling factor to apply\n       * @returns a new Color4 object\n       */\n      scale(scale) {\n          return new Color4(this.r * scale, this.g * scale, this.b * scale, this.a * scale);\n      }\n      /**\n       * Multiplies the current Color4 values by scale and stores the result in \"result\"\n       * @param scale - defines the scaling factor to apply\n       * @param result - defines the Color4 object where to store the result\n       * @returns the current unmodified Color4\n       */\n      scaleToRef(scale, result) {\n          result.r = this.r * scale;\n          result.g = this.g * scale;\n          result.b = this.b * scale;\n          result.a = this.a * scale;\n          return this;\n      }\n      /**\n       * Scale the current Color4 values by a factor and add the result to a given Color4\n       * @param scale - defines the scale factor\n       * @param result - defines the Color4 object where to store the result\n       * @returns the unmodified current Color4\n       */\n      scaleAndAddToRef(scale, result) {\n          result.r += this.r * scale;\n          result.g += this.g * scale;\n          result.b += this.b * scale;\n          result.a += this.a * scale;\n          return this;\n      }\n      /**\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\n       * @param min - defines minimum clamping value (default is 0)\n       * @param max - defines maximum clamping value (default is 1)\n       * @param result - defines color to store the result into.\n       * @returns the cuurent Color4\n       */\n      clampToRef(min = 0, max = 1, result) {\n          result.r = Scalar_1$2.Scalar.Clamp(this.r, min, max);\n          result.g = Scalar_1$2.Scalar.Clamp(this.g, min, max);\n          result.b = Scalar_1$2.Scalar.Clamp(this.b, min, max);\n          result.a = Scalar_1$2.Scalar.Clamp(this.a, min, max);\n          return this;\n      }\n      /**\n       * Multipy an Color4 value by another and return a new Color4 object\n       * @param color - defines the Color4 value to multiply by\n       * @returns a new Color4 object\n       */\n      multiply(color) {\n          return new Color4(this.r * color.r, this.g * color.g, this.b * color.b, this.a * color.a);\n      }\n      /**\n       * Multipy a Color4 value by another and push the result in a reference value\n       * @param color - defines the Color4 value to multiply by\n       * @param result - defines the Color4 to fill the result in\n       * @returns the result Color4\n       */\n      multiplyToRef(color, result) {\n          result.r = this.r * color.r;\n          result.g = this.g * color.g;\n          result.b = this.b * color.b;\n          result.a = this.a * color.a;\n          return result;\n      }\n      /**\n       * Creates a string with the Color4 current values\n       * @returns the string representation of the Color4 object\n       */\n      toString() {\n          return ('{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + ' A:' + this.a + '}');\n      }\n      /**\n       * Returns the string \"Color4\"\n       * @returns \"Color4\"\n       */\n      getClassName() {\n          return 'Color4';\n      }\n      /**\n       * Compute the Color4 hash code\n       * @returns an unique number that can be used to hash Color4 objects\n       */\n      getHashCode() {\n          let hash = this.r || 0;\n          hash = (hash * 397) ^ (this.g || 0);\n          hash = (hash * 397) ^ (this.b || 0);\n          hash = (hash * 397) ^ (this.a || 0);\n          return hash;\n      }\n      /**\n       * Creates a new Color4 copied from the current one\n       * @returns a new Color4 object\n       */\n      clone() {\n          return new Color4(this.r, this.g, this.b, this.a);\n      }\n      /**\n       * Copies the given Color4 values into the current one\n       * @param source - defines the source Color4 object\n       * @returns the current updated Color4 object\n       */\n      copyFrom(source) {\n          this.r = source.r;\n          this.g = source.g;\n          this.b = source.b;\n          this.a = source.a;\n          return this;\n      }\n      /**\n       * Copies the given float values into the current one\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @param a - defines the alpha component to read from\n       * @returns the current updated Color4 object\n       */\n      copyFromFloats(r, g, b, a) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n          return this;\n      }\n      /**\n       * Copies the given float values into the current one\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @param a - defines the alpha component to read from\n       * @returns the current updated Color4 object\n       */\n      set(r, g, b, a) {\n          return this.copyFromFloats(r, g, b, a);\n      }\n      /**\n       * Compute the Color4 hexadecimal code as a string\n       * @returns a string containing the hexadecimal representation of the Color4 object\n       */\n      toHexString() {\n          const intR = (this.r * 255) | 0;\n          const intG = (this.g * 255) | 0;\n          const intB = (this.b * 255) | 0;\n          const intA = (this.a * 255) | 0;\n          return ('#' +\n              Scalar_1$2.Scalar.ToHex(intR) +\n              Scalar_1$2.Scalar.ToHex(intG) +\n              Scalar_1$2.Scalar.ToHex(intB) +\n              Scalar_1$2.Scalar.ToHex(intA));\n      }\n      /**\n       * Computes a new Color4 converted from the current one to linear space\n       * @returns a new Color4 object\n       */\n      toLinearSpace() {\n          const convertedColor = new Color4();\n          this.toLinearSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color4 values to linear space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color4 object where to store the linear space version\n       * @returns the unmodified Color4\n       */\n      toLinearSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$3.ToLinearSpace);\n          convertedColor.g = Math.pow(this.g, types_1$3.ToLinearSpace);\n          convertedColor.b = Math.pow(this.b, types_1$3.ToLinearSpace);\n          convertedColor.a = this.a;\n          return this;\n      }\n      /**\n       * Computes a new Color4 converted from the current one to gamma space\n       * @returns a new Color4 object\n       */\n      toGammaSpace() {\n          const convertedColor = new Color4();\n          this.toGammaSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color4 values to gamma space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color4 object where to store the gamma space version\n       * @returns the unmodified Color4\n       */\n      toGammaSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$3.ToGammaSpace);\n          convertedColor.g = Math.pow(this.g, types_1$3.ToGammaSpace);\n          convertedColor.b = Math.pow(this.b, types_1$3.ToGammaSpace);\n          convertedColor.a = this.a;\n          return this;\n      }\n  }\n  Color4$1.Color4 = Color4;\n\n  Object.defineProperty(Color3$1, \"__esModule\", { value: true });\n  Color3$1.Color3 = void 0;\n  const types_1$2 = types;\n  const Color4_1 = Color4$1;\n  const Scalar_1$1 = Scalar$1;\n  /**\n   * Class used to hold a RBG color\n   * @public\n   */\n  class Color3 {\n      /**\n       * Creates a new Color3 object from red, green, blue values, all between 0 and 1\n       * @param r - defines the red component (between 0 and 1, default is 0)\n       * @param g - defines the green component (between 0 and 1, default is 0)\n       * @param b - defines the blue component (between 0 and 1, default is 0)\n       */\n      constructor(\n      /**\n       * Defines the red component (between 0 and 1, default is 0)\n       */\n      r = 0, \n      /**\n       * Defines the green component (between 0 and 1, default is 0)\n       */\n      g = 0, \n      /**\n       * Defines the blue component (between 0 and 1, default is 0)\n       */\n      b = 0) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n      }\n      // Statics\n      /**\n       * Creates a new Color3 from the string containing valid hexadecimal values\n       * @param hex - defines a string containing valid hexadecimal values\n       * @returns a new Color3 object\n       */\n      static FromHexString(hex) {\n          if (hex.substring(0, 1) !== '#' || hex.length !== 7) {\n              return new Color3(0, 0, 0);\n          }\n          const r = parseInt(hex.substring(1, 3), 16);\n          const g = parseInt(hex.substring(3, 5), 16);\n          const b = parseInt(hex.substring(5, 7), 16);\n          return Color3.FromInts(r, g, b);\n      }\n      /**\n       * Creates a new Vector3 from the starting index of the given array\n       * @param array - defines the source array\n       * @param offset - defines an offset in the source array\n       * @returns a new Color3 object\n       */\n      static FromArray(array, offset = 0) {\n          return new Color3(array[offset], array[offset + 1], array[offset + 2]);\n      }\n      /**\n       * Creates a new Color3 from integer values (less than 256)\n       * @param r - defines the red component to read from (value between 0 and 255)\n       * @param g - defines the green component to read from (value between 0 and 255)\n       * @param b - defines the blue component to read from (value between 0 and 255)\n       * @returns a new Color3 object\n       */\n      static FromInts(r, g, b) {\n          return new Color3(r / 255.0, g / 255.0, b / 255.0);\n      }\n      /**\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n       * @param start - defines the start Color3 value\n       * @param end - defines the end Color3 value\n       * @param amount - defines the gradient value between start and end\n       * @returns a new Color3 object\n       */\n      static Lerp(start, end, amount) {\n          const result = new Color3(0.0, 0.0, 0.0);\n          Color3.LerpToRef(start, end, amount, result);\n          return result;\n      }\n      /**\n       * Creates a new Color3 with values linearly interpolated of \"amount\" between the start Color3 and the end Color3\n       * @param left - defines the start value\n       * @param right - defines the end value\n       * @param amount - defines the gradient factor\n       * @param result - defines the Color3 object where to store the result\n       */\n      static LerpToRef(left, right, amount, result) {\n          result.r = left.r + (right.r - left.r) * amount;\n          result.g = left.g + (right.g - left.g) * amount;\n          result.b = left.b + (right.b - left.b) * amount;\n      }\n      /**\n       * Returns a Color3 value containing a red color\n       * @returns a new Color3 object\n       */\n      static Red() {\n          return new Color3(1, 0, 0);\n      }\n      /**\n       * Returns a Color3 value containing a green color\n       * @returns a new Color3 object\n       */\n      static Green() {\n          return new Color3(0, 1, 0);\n      }\n      /**\n       * Returns a Color3 value containing a blue color\n       * @returns a new Color3 object\n       */\n      static Blue() {\n          return new Color3(0, 0, 1);\n      }\n      /**\n       * Returns a Color3 value containing a black color\n       * @returns a new Color3 object\n       */\n      static Black() {\n          return new Color3(0, 0, 0);\n      }\n      /**\n       * Returns a Color3 value containing a white color\n       * @returns a new Color3 object\n       */\n      static White() {\n          return new Color3(1, 1, 1);\n      }\n      /**\n       * Returns a Color3 value containing a purple color\n       * @returns a new Color3 object\n       */\n      static Purple() {\n          return new Color3(0.5, 0, 0.5);\n      }\n      /**\n       * Returns a Color3 value containing a magenta color\n       * @returns a new Color3 object\n       */\n      static Magenta() {\n          return new Color3(1, 0, 1);\n      }\n      /**\n       * Returns a Color3 value containing a yellow color\n       * @returns a new Color3 object\n       */\n      static Yellow() {\n          return new Color3(1, 1, 0);\n      }\n      /**\n       * Returns a Color3 value containing a gray color\n       * @returns a new Color3 object\n       */\n      static Gray() {\n          return new Color3(0.5, 0.5, 0.5);\n      }\n      /**\n       * Returns a Color3 value containing a teal color\n       * @returns a new Color3 object\n       */\n      static Teal() {\n          return new Color3(0, 1.0, 1.0);\n      }\n      /**\n       * Returns a Color3 value containing a random color\n       * @returns a new Color3 object\n       */\n      static Random() {\n          return new Color3(Math.random(), Math.random(), Math.random());\n      }\n      /**\n       * Creates a string with the Color3 current values\n       * @returns the string representation of the Color3 object\n       */\n      toString() {\n          return '{R: ' + this.r + ' G:' + this.g + ' B:' + this.b + '}';\n      }\n      /**\n       * Returns the string \"Color3\"\n       * @returns \"Color3\"\n       */\n      getClassName() {\n          return 'Color3';\n      }\n      /**\n       * Compute the Color3 hash code\n       * @returns an unique number that can be used to hash Color3 objects\n       */\n      getHashCode() {\n          let hash = this.r || 0;\n          hash = (hash * 397) ^ (this.g || 0);\n          hash = (hash * 397) ^ (this.b || 0);\n          return hash;\n      }\n      // Operators\n      /**\n       * Stores in the given array from the given starting index the red, green, blue values as successive elements\n       * @param array - defines the array where to store the r,g,b components\n       * @param index - defines an optional index in the target array to define where to start storing values\n       * @returns the current Color3 object\n       */\n      toArray(array, index = 0) {\n          array[index] = this.r;\n          array[index + 1] = this.g;\n          array[index + 2] = this.b;\n          return this;\n      }\n      /**\n       * Returns a new Color4 object from the current Color3 and the given alpha\n       * @param alpha - defines the alpha component on the new Color4 object (default is 1)\n       * @returns a new Color4 object\n       */\n      toColor4(alpha = 1) {\n          return new Color4_1.Color4(this.r, this.g, this.b, alpha);\n      }\n      /**\n       * Returns a new array populated with 3 numeric elements : red, green and blue values\n       * @returns the new array\n       */\n      asArray() {\n          const result = new Array();\n          this.toArray(result, 0);\n          return result;\n      }\n      /**\n       * Returns the luminance value\n       * @returns a float value\n       */\n      toLuminance() {\n          return this.r * 0.3 + this.g * 0.59 + this.b * 0.11;\n      }\n      /**\n       * Multiply each Color3 rgb values by the given Color3 rgb values in a new Color3 object\n       * @param otherColor - defines the second operand\n       * @returns the new Color3 object\n       */\n      multiply(otherColor) {\n          return new Color3(this.r * otherColor.r, this.g * otherColor.g, this.b * otherColor.b);\n      }\n      /**\n       * Multiply the rgb values of the Color3 and the given Color3 and stores the result in the object \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines the Color3 object where to store the result\n       * @returns the current Color3\n       */\n      multiplyToRef(otherColor, result) {\n          result.r = this.r * otherColor.r;\n          result.g = this.g * otherColor.g;\n          result.b = this.b * otherColor.b;\n          return this;\n      }\n      /**\n       * Determines equality between Color3 objects\n       * @param otherColor - defines the second operand\n       * @returns true if the rgb values are equal to the given ones\n       */\n      equals(otherColor) {\n          return (otherColor &&\n              this.r === otherColor.r &&\n              this.g === otherColor.g &&\n              this.b === otherColor.b);\n      }\n      /**\n       * Determines equality between the current Color3 object and a set of r,b,g values\n       * @param r - defines the red component to check\n       * @param g - defines the green component to check\n       * @param b - defines the blue component to check\n       * @returns true if the rgb values are equal to the given ones\n       */\n      equalsFloats(r, g, b) {\n          return this.r === r && this.g === g && this.b === b;\n      }\n      /**\n       * Multiplies in place each rgb value by scale\n       * @param scale - defines the scaling factor\n       * @returns the updated Color3\n       */\n      scale(scale) {\n          return new Color3(this.r * scale, this.g * scale, this.b * scale);\n      }\n      /**\n       * Multiplies the rgb values by scale and stores the result into \"result\"\n       * @param scale - defines the scaling factor\n       * @param result - defines the Color3 object where to store the result\n       * @returns the unmodified current Color3\n       */\n      scaleToRef(scale, result) {\n          result.r = this.r * scale;\n          result.g = this.g * scale;\n          result.b = this.b * scale;\n          return this;\n      }\n      /**\n       * Scale the current Color3 values by a factor and add the result to a given Color3\n       * @param scale - defines the scale factor\n       * @param result - defines color to store the result into\n       * @returns the unmodified current Color3\n       */\n      scaleAndAddToRef(scale, result) {\n          result.r += this.r * scale;\n          result.g += this.g * scale;\n          result.b += this.b * scale;\n          return this;\n      }\n      /**\n       * Clamps the rgb values by the min and max values and stores the result into \"result\"\n       * @param min - defines minimum clamping value (default is 0)\n       * @param max - defines maximum clamping value (default is 1)\n       * @param result - defines color to store the result into\n       * @returns the original Color3\n       */\n      clampToRef(min = 0, max = 1, result) {\n          result.r = Scalar_1$1.Scalar.Clamp(this.r, min, max);\n          result.g = Scalar_1$1.Scalar.Clamp(this.g, min, max);\n          result.b = Scalar_1$1.Scalar.Clamp(this.b, min, max);\n          return this;\n      }\n      /**\n       * Creates a new Color3 set with the added values of the current Color3 and of the given one\n       * @param otherColor - defines the second operand\n       * @returns the new Color3\n       */\n      add(otherColor) {\n          return new Color3(this.r + otherColor.r, this.g + otherColor.g, this.b + otherColor.b);\n      }\n      /**\n       * Stores the result of the addition of the current Color3 and given one rgb values into \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines Color3 object to store the result into\n       * @returns the unmodified current Color3\n       */\n      addToRef(otherColor, result) {\n          result.r = this.r + otherColor.r;\n          result.g = this.g + otherColor.g;\n          result.b = this.b + otherColor.b;\n          return this;\n      }\n      /**\n       * Returns a new Color3 set with the subtracted values of the given one from the current Color3\n       * @param otherColor - defines the second operand\n       * @returns the new Color3\n       */\n      subtract(otherColor) {\n          return new Color3(this.r - otherColor.r, this.g - otherColor.g, this.b - otherColor.b);\n      }\n      /**\n       * Stores the result of the subtraction of given one from the current Color3 rgb values into \"result\"\n       * @param otherColor - defines the second operand\n       * @param result - defines Color3 object to store the result into\n       * @returns the unmodified current Color3\n       */\n      subtractToRef(otherColor, result) {\n          result.r = this.r - otherColor.r;\n          result.g = this.g - otherColor.g;\n          result.b = this.b - otherColor.b;\n          return this;\n      }\n      /**\n       * Copy the current object\n       * @returns a new Color3 copied the current one\n       */\n      clone() {\n          return new Color3(this.r, this.g, this.b);\n      }\n      /**\n       * Copies the rgb values from the source in the current Color3\n       * @param source - defines the source Color3 object\n       * @returns the updated Color3 object\n       */\n      copyFrom(source) {\n          this.r = source.r;\n          this.g = source.g;\n          this.b = source.b;\n          return this;\n      }\n      /**\n       * Updates the Color3 rgb values from the given floats\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @returns the current Color3 object\n       */\n      copyFromFloats(r, g, b) {\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          return this;\n      }\n      /**\n       * Updates the Color3 rgb values from the given floats\n       * @param r - defines the red component to read from\n       * @param g - defines the green component to read from\n       * @param b - defines the blue component to read from\n       * @returns the current Color3 object\n       */\n      set(r, g, b) {\n          return this.copyFromFloats(r, g, b);\n      }\n      /**\n       * Compute the Color3 hexadecimal code as a string\n       * @returns a string containing the hexadecimal representation of the Color3 object\n       */\n      toHexString() {\n          const intR = (this.r * 255) | 0;\n          const intG = (this.g * 255) | 0;\n          const intB = (this.b * 255) | 0;\n          return '#' + Scalar_1$1.Scalar.ToHex(intR) + Scalar_1$1.Scalar.ToHex(intG) + Scalar_1$1.Scalar.ToHex(intB);\n      }\n      /**\n       * Computes a new Color3 converted from the current one to linear space\n       * @returns a new Color3 object\n       */\n      toLinearSpace() {\n          const convertedColor = new Color3();\n          this.toLinearSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color3 values to linear space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color3 object where to store the linear space version\n       * @returns the unmodified Color3\n       */\n      toLinearSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$2.ToLinearSpace);\n          convertedColor.g = Math.pow(this.g, types_1$2.ToLinearSpace);\n          convertedColor.b = Math.pow(this.b, types_1$2.ToLinearSpace);\n          return this;\n      }\n      /**\n       * Computes a new Color3 converted from the current one to gamma space\n       * @returns a new Color3 object\n       */\n      toGammaSpace() {\n          const convertedColor = new Color3();\n          this.toGammaSpaceToRef(convertedColor);\n          return convertedColor;\n      }\n      /**\n       * Converts the Color3 values to gamma space and stores the result in \"convertedColor\"\n       * @param convertedColor - defines the Color3 object where to store the gamma space version\n       * @returns the unmodified Color3\n       */\n      toGammaSpaceToRef(convertedColor) {\n          convertedColor.r = Math.pow(this.r, types_1$2.ToGammaSpace);\n          convertedColor.g = Math.pow(this.g, types_1$2.ToGammaSpace);\n          convertedColor.b = Math.pow(this.b, types_1$2.ToGammaSpace);\n          return this;\n      }\n      /**\n       * Serializes Color3\n       */\n      toJSON() {\n          return {\n              r: this.r,\n              g: this.g,\n              b: this.b\n          };\n      }\n  }\n  Color3$1.Color3 = Color3;\n\n  var Curve3d = {};\n\n  Object.defineProperty(Curve3d, \"__esModule\", { value: true });\n  Curve3d.Curve3 = void 0;\n  const Vector3_1$2 = Vector3$1;\n  /**\n   * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n   * A Curve3 is designed from a series of successive Vector3.\n   * {@link https://doc.babylonjs.com/how_to/how_to_use_curve3 }\n   * @public\n   */\n  class Curve3 {\n      /**\n       * A Curve3 object is a logical object, so not a mesh, to handle curves in the 3D geometric space.\n       * A Curve3 is designed from a series of successive Vector3.\n       * {@link http://doc.babylonjs.com/tutorials/How_to_use_Curve3#curve3-object | Tutorial }\n       * @param points - points which make up the curve\n       */\n      constructor(points) {\n          this._length = 0.0;\n          this._points = points;\n          this._length = this._computeLength(points);\n      }\n      /**\n       * Returns a Curve3 object along a Quadratic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#quadratic-bezier-curve\n       * @param v0 - (Vector3) the origin point of the Quadratic Bezier\n       * @param v1 - (Vector3) the control point\n       * @param v2 - (Vector3) the end point of the Quadratic Bezier\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateQuadraticBezier(v0, v1, v2, nbPoints) {\n          // tslint:disable-next-line:no-parameter-reassignment\n          nbPoints = nbPoints > 2 ? nbPoints : 3;\n          const bez = new Array();\n          const equation = (t, val0, val1, val2) => {\n              const res = (1.0 - t) * (1.0 - t) * val0 + 2.0 * t * (1.0 - t) * val1 + t * t * val2;\n              return res;\n          };\n          for (let i = 0; i <= nbPoints; i++) {\n              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x), equation(i / nbPoints, v0.y, v1.y, v2.y), equation(i / nbPoints, v0.z, v1.z, v2.z)));\n          }\n          return new Curve3(bez);\n      }\n      /**\n       * Returns a Curve3 object along a Cubic Bezier curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#cubic-bezier-curve\n       * @param v0 - (Vector3) the origin point of the Cubic Bezier\n       * @param v1 - (Vector3) the first control point\n       * @param v2 - (Vector3) the second control point\n       * @param v3 - (Vector3) the end point of the Cubic Bezier\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateCubicBezier(v0, v1, v2, v3, nbPoints) {\n          // tslint:disable-next-line:no-parameter-reassignment\n          nbPoints = nbPoints > 3 ? nbPoints : 4;\n          const bez = new Array();\n          const equation = (t, val0, val1, val2, val3) => {\n              const res = (1.0 - t) * (1.0 - t) * (1.0 - t) * val0 +\n                  3.0 * t * (1.0 - t) * (1.0 - t) * val1 +\n                  3.0 * t * t * (1.0 - t) * val2 +\n                  t * t * t * val3;\n              return res;\n          };\n          for (let i = 0; i <= nbPoints; i++) {\n              bez.push(new Vector3_1$2.Vector3(equation(i / nbPoints, v0.x, v1.x, v2.x, v3.x), equation(i / nbPoints, v0.y, v1.y, v2.y, v3.y), equation(i / nbPoints, v0.z, v1.z, v2.z, v3.z)));\n          }\n          return new Curve3(bez);\n      }\n      /**\n       * Returns a Curve3 object along a Hermite Spline curve : http://doc.babylonjs.com/tutorials/How_to_use_Curve3#hermite-spline\n       * @param p1 - (Vector3) the origin point of the Hermite Spline\n       * @param t1 - (Vector3) the tangent vector at the origin point\n       * @param p2 - (Vector3) the end point of the Hermite Spline\n       * @param t2 - (Vector3) the tangent vector at the end point\n       * @param nbPoints - (integer) the wanted number of points in the curve\n       * @returns the created Curve3\n       */\n      static CreateHermiteSpline(p1, t1, p2, t2, nbPoints) {\n          const hermite = new Array();\n          const step = 1.0 / nbPoints;\n          for (let i = 0; i <= nbPoints; i++) {\n              hermite.push(Vector3_1$2.Vector3.Hermite(p1, t1, p2, t2, i * step));\n          }\n          return new Curve3(hermite);\n      }\n      /**\n       * Returns a Curve3 object along a CatmullRom Spline curve :\n       * @param points - (array of Vector3) the points the spline must pass through. At least, four points required\n       * @param nbPoints - (integer) the wanted number of points between each curve control points\n       * @param closed - (boolean) optional with default false, when true forms a closed loop from the points\n       * @returns the created Curve3\n       */\n      static CreateCatmullRomSpline(points, nbPoints, closed) {\n          const catmullRom = new Array();\n          const step = 1.0 / nbPoints;\n          let amount = 0.0;\n          if (closed) {\n              const pointsCount = points.length;\n              for (let i = 0; i < pointsCount; i++) {\n                  amount = 0;\n                  for (let c = 0; c < nbPoints; c++) {\n                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(points[i % pointsCount], points[(i + 1) % pointsCount], points[(i + 2) % pointsCount], points[(i + 3) % pointsCount], amount));\n                      amount += step;\n                  }\n              }\n              catmullRom.push(catmullRom[0]);\n          }\n          else {\n              const totalPoints = new Array();\n              totalPoints.push(points[0].clone());\n              Array.prototype.push.apply(totalPoints, points);\n              totalPoints.push(points[points.length - 1].clone());\n              let i = 0;\n              for (i = 0; i < totalPoints.length - 3; i++) {\n                  amount = 0;\n                  for (let c = 0; c < nbPoints; c++) {\n                      catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n                      amount += step;\n                  }\n              }\n              i--;\n              catmullRom.push(Vector3_1$2.Vector3.CatmullRom(totalPoints[i], totalPoints[i + 1], totalPoints[i + 2], totalPoints[i + 3], amount));\n          }\n          return new Curve3(catmullRom);\n      }\n      /**\n       * @returns the Curve3 stored array of successive Vector3\n       */\n      getPoints() {\n          return this._points;\n      }\n      /**\n       * @returns the computed length (float) of the curve.\n       */\n      length() {\n          return this._length;\n      }\n      /**\n       * Returns a new instance of Curve3 object : var curve = curveA.continue(curveB);\n       * This new Curve3 is built by translating and sticking the curveB at the end of the curveA.\n       * curveA and curveB keep unchanged.\n       * @param curve - the curve to continue from this curve\n       * @returns the newly constructed curve\n       */\n      continue(curve) {\n          const lastPoint = this._points[this._points.length - 1];\n          const continuedPoints = this._points.slice();\n          const curvePoints = curve.getPoints();\n          for (let i = 1; i < curvePoints.length; i++) {\n              continuedPoints.push(curvePoints[i].subtract(curvePoints[0]).add(lastPoint));\n          }\n          const continuedCurve = new Curve3(continuedPoints);\n          return continuedCurve;\n      }\n      _computeLength(path) {\n          let l = 0;\n          for (let i = 1; i < path.length; i++) {\n              l += path[i].subtract(path[i - 1]).length();\n          }\n          return l;\n      }\n  }\n  Curve3d.Curve3 = Curve3;\n\n  var Furstum = {};\n\n  var Plane$1 = {};\n\n  Object.defineProperty(Plane$1, \"__esModule\", { value: true });\n  Plane$1.Plane = void 0;\n  const Vector3_1$1 = Vector3$1;\n  const Matrix_1 = Matrix$1;\n  const preallocatedVariables_1 = preallocatedVariables;\n  /**\n   * Represens a plane by the equation ax + by + cz + d = 0\n   * @public\n   */\n  class Plane {\n      /**\n       * Creates a Plane object according to the given floats a, b, c, d and the plane equation : ax + by + cz + d = 0\n       * @param a - a component of the plane\n       * @param b - b component of the plane\n       * @param c - c component of the plane\n       * @param d - d component of the plane\n       */\n      constructor(a, b, c, d) {\n          this.normal = new Vector3_1$1.Vector3(a, b, c);\n          this.d = d;\n      }\n      // Statics\n      /**\n       * Creates a plane from an  array\n       * @param array - the array to create a plane from\n       * @returns a new Plane from the given array.\n       */\n      static FromArray(array) {\n          return new Plane(array[0], array[1], array[2], array[3]);\n      }\n      /**\n       * Creates a plane from three points\n       * @param point1 - point used to create the plane\n       * @param point2 - point used to create the plane\n       * @param point3 - point used to create the plane\n       * @returns a new Plane defined by the three given points.\n       */\n      static FromPoints(point1, point2, point3) {\n          const result = new Plane(0.0, 0.0, 0.0, 0.0);\n          result.copyFromPoints(point1, point2, point3);\n          return result;\n      }\n      /**\n       * Creates a plane from an origin point and a normal\n       * @param origin - origin of the plane to be constructed\n       * @param normal - normal of the plane to be constructed\n       * @returns a new Plane the normal vector to this plane at the given origin point.\n       * Note : the vector \"normal\" is updated because normalized.\n       */\n      static FromPositionAndNormal(origin, normal) {\n          const result = new Plane(0.0, 0.0, 0.0, 0.0);\n          normal.normalize();\n          result.normal = normal;\n          result.d = -(normal.x * origin.x +\n              normal.y * origin.y +\n              normal.z * origin.z);\n          return result;\n      }\n      /**\n       * Calculates the distance from a plane and a point\n       * @param origin - origin of the plane to be constructed\n       * @param normal - normal of the plane to be constructed\n       * @param point - point to calculate distance to\n       * @returns the signed distance between the plane defined by the normal vector at the \"origin\"\" point and the given other point.\n       */\n      static SignedDistanceToPlaneFromPositionAndNormal(origin, normal, point) {\n          const d = -(normal.x * origin.x + normal.y * origin.y + normal.z * origin.z);\n          return Vector3_1$1.Vector3.Dot(point, normal) + d;\n      }\n      /**\n       * @returns the plane coordinates as a new array of 4 elements [a, b, c, d].\n       */\n      asArray() {\n          return [this.normal.x, this.normal.y, this.normal.z, this.d];\n      }\n      // Methods\n      /**\n       * @returns a new plane copied from the current Plane.\n       */\n      clone() {\n          return new Plane(this.normal.x, this.normal.y, this.normal.z, this.d);\n      }\n      /**\n       * @returns the string \"Plane\".\n       */\n      getClassName() {\n          return 'Plane';\n      }\n      /**\n       * @returns the Plane hash code.\n       */\n      getHashCode() {\n          let hash = this.normal.getHashCode();\n          hash = (hash * 397) ^ (this.d || 0);\n          return hash;\n      }\n      /**\n       * Normalize the current Plane in place.\n       * @returns the updated Plane.\n       */\n      normalize() {\n          const norm = Math.sqrt(this.normal.x * this.normal.x +\n              this.normal.y * this.normal.y +\n              this.normal.z * this.normal.z);\n          let magnitude = 0.0;\n          if (norm !== 0) {\n              magnitude = 1.0 / norm;\n          }\n          this.normal.x *= magnitude;\n          this.normal.y *= magnitude;\n          this.normal.z *= magnitude;\n          this.d *= magnitude;\n          return this;\n      }\n      /**\n       * Applies a transformation the plane and returns the result\n       * @param transformation - the transformation matrix to be applied to the plane\n       * @returns a new Plane as the result of the transformation of the current Plane by the given matrix.\n       */\n      transform(transformation) {\n          const transposedMatrix = preallocatedVariables_1.MathTmp.Matrix[0];\n          Matrix_1.Matrix.TransposeToRef(transformation, transposedMatrix);\n          const m = transposedMatrix.m;\n          const x = this.normal.x;\n          const y = this.normal.y;\n          const z = this.normal.z;\n          const d = this.d;\n          const normalX = x * m[0] + y * m[1] + z * m[2] + d * m[3];\n          const normalY = x * m[4] + y * m[5] + z * m[6] + d * m[7];\n          const normalZ = x * m[8] + y * m[9] + z * m[10] + d * m[11];\n          const finalD = x * m[12] + y * m[13] + z * m[14] + d * m[15];\n          return new Plane(normalX, normalY, normalZ, finalD);\n      }\n      /**\n       * Calcualtte the dot product between the point and the plane normal\n       * @param point - point to calculate the dot product with\n       * @returns the dot product (float) of the point coordinates and the plane normal.\n       */\n      dotCoordinate(point) {\n          return (this.normal.x * point.x +\n              this.normal.y * point.y +\n              this.normal.z * point.z +\n              this.d);\n      }\n      /**\n       * Updates the current Plane from the plane defined by the three given points.\n       * @param point1 - one of the points used to contruct the plane\n       * @param point2 - one of the points used to contruct the plane\n       * @param point3 - one of the points used to contruct the plane\n       * @returns the updated Plane.\n       */\n      copyFromPoints(point1, point2, point3) {\n          const x1 = point2.x - point1.x;\n          const y1 = point2.y - point1.y;\n          const z1 = point2.z - point1.z;\n          const x2 = point3.x - point1.x;\n          const y2 = point3.y - point1.y;\n          const z2 = point3.z - point1.z;\n          const yz = y1 * z2 - z1 * y2;\n          const xz = z1 * x2 - x1 * z2;\n          const xy = x1 * y2 - y1 * x2;\n          const pyth = Math.sqrt(yz * yz + xz * xz + xy * xy);\n          let invPyth;\n          if (pyth !== 0) {\n              invPyth = 1.0 / pyth;\n          }\n          else {\n              invPyth = 0.0;\n          }\n          this.normal.x = yz * invPyth;\n          this.normal.y = xz * invPyth;\n          this.normal.z = xy * invPyth;\n          this.d = -(this.normal.x * point1.x +\n              this.normal.y * point1.y +\n              this.normal.z * point1.z);\n          return this;\n      }\n      /**\n       * Checks if the plane is facing a given direction\n       * @param direction - the direction to check if the plane is facing\n       * @param epsilon - value the dot product is compared against (returns true if dot &lt;= epsilon)\n       * @returns True is the vector \"direction\"  is the same side than the plane normal.\n       */\n      isFrontFacingTo(direction, epsilon) {\n          const dot = Vector3_1$1.Vector3.Dot(this.normal, direction);\n          return dot <= epsilon;\n      }\n      /**\n       * Calculates the distance to a point\n       * @param point - point to calculate distance to\n       * @returns the signed distance (float) from the given point to the Plane.\n       */\n      signedDistanceTo(point) {\n          return Vector3_1$1.Vector3.Dot(point, this.normal) + this.d;\n      }\n  }\n  Plane$1.Plane = Plane;\n\n  Object.defineProperty(Furstum, \"__esModule\", { value: true });\n  Furstum.Frustum = void 0;\n  const Plane_1 = Plane$1;\n  /**\n   * Reprasents a camera frustum\n   * @public\n   */\n  class Frustum {\n      /**\n       * Gets the planes representing the frustum\n       * @param transform - matrix to be applied to the returned planes\n       * @returns a new array of 6 Frustum planes computed by the given transformation matrix.\n       */\n      static GetPlanes(transform) {\n          const frustumPlanes = [];\n          for (let index = 0; index < 6; index++) {\n              frustumPlanes.push(new Plane_1.Plane(0.0, 0.0, 0.0, 0.0));\n          }\n          Frustum.GetPlanesToRef(transform, frustumPlanes);\n          return frustumPlanes;\n      }\n      /**\n       * Gets the near frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetNearPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[2];\n          frustumPlane.normal.y = m[7] + m[6];\n          frustumPlane.normal.z = m[11] + m[10];\n          frustumPlane.d = m[15] + m[14];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the far frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetFarPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[2];\n          frustumPlane.normal.y = m[7] - m[6];\n          frustumPlane.normal.z = m[11] - m[10];\n          frustumPlane.d = m[15] - m[14];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the left frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetLeftPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[0];\n          frustumPlane.normal.y = m[7] + m[4];\n          frustumPlane.normal.z = m[11] + m[8];\n          frustumPlane.d = m[15] + m[12];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the right frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetRightPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[0];\n          frustumPlane.normal.y = m[7] - m[4];\n          frustumPlane.normal.z = m[11] - m[8];\n          frustumPlane.d = m[15] - m[12];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the top frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetTopPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] - m[1];\n          frustumPlane.normal.y = m[7] - m[5];\n          frustumPlane.normal.z = m[11] - m[9];\n          frustumPlane.d = m[15] - m[13];\n          frustumPlane.normalize();\n      }\n      /**\n       * Gets the bottom frustum plane transformed by the transform matrix\n       * @param transform - transformation matrix to be applied to the resulting frustum plane\n       * @param frustumPlane - the resuling frustum plane\n       */\n      static GetBottomPlaneToRef(transform, frustumPlane) {\n          const m = transform.m;\n          frustumPlane.normal.x = m[3] + m[1];\n          frustumPlane.normal.y = m[7] + m[5];\n          frustumPlane.normal.z = m[11] + m[9];\n          frustumPlane.d = m[15] + m[13];\n          frustumPlane.normalize();\n      }\n      /**\n       * Sets the given array \"frustumPlanes\" with the 6 Frustum planes computed by the given transformation matrix.\n       * @param transform - transformation matrix to be applied to the resulting frustum planes\n       * @param frustumPlanes - the resuling frustum planes\n       */\n      static GetPlanesToRef(transform, frustumPlanes) {\n          // Near\n          Frustum.GetNearPlaneToRef(transform, frustumPlanes[0]);\n          // Far\n          Frustum.GetFarPlaneToRef(transform, frustumPlanes[1]);\n          // Left\n          Frustum.GetLeftPlaneToRef(transform, frustumPlanes[2]);\n          // Right\n          Frustum.GetRightPlaneToRef(transform, frustumPlanes[3]);\n          // Top\n          Frustum.GetTopPlaneToRef(transform, frustumPlanes[4]);\n          // Bottom\n          Frustum.GetBottomPlaneToRef(transform, frustumPlanes[5]);\n      }\n  }\n  Furstum.Frustum = Frustum;\n\n  var Path2d = {};\n\n  Object.defineProperty(Path2d, \"__esModule\", { value: true });\n  Path2d.Path2 = void 0;\n  const Vector2_1 = Vector2$1;\n  const Arc2_1 = Arc2$1;\n  const types_1$1 = types;\n  /**\n   * Represents a 2D path made up of multiple 2D points\n   * @public\n   */\n  class Path2 {\n      /**\n       * Creates a Path2 object from the starting 2D coordinates x and y.\n       * @param x - the starting points x value\n       * @param y - the starting points y value\n       */\n      constructor(x, y) {\n          /**\n           * If the path start and end point are the same\n           */\n          this.closed = false;\n          this._points = new Array();\n          this._length = 0.0;\n          this._points.push(new Vector2_1.Vector2(x, y));\n      }\n      /**\n       * Creates a new path starting from an x and y position\n       * @param x - starting x value\n       * @param y - starting y value\n       * @returns a new Path2 starting at the coordinates (x, y).\n       */\n      static StartingAt(x, y) {\n          return new Path2(x, y);\n      }\n      /**\n       * Adds a new segment until the given coordinates (x, y) to the current Path2.\n       * @param x - the added points x value\n       * @param y - the added points y value\n       * @returns the updated Path2.\n       */\n      addLineTo(x, y) {\n          if (this.closed) {\n              return this;\n          }\n          const newPoint = new Vector2_1.Vector2(x, y);\n          const previousPoint = this._points[this._points.length - 1];\n          this._points.push(newPoint);\n          this._length += newPoint.subtract(previousPoint).length();\n          return this;\n      }\n      /**\n       * Adds _numberOfSegments_ segments according to the arc definition (middle point coordinates, end point coordinates, the arc start point being the current Path2 last point) to the current Path2.\n       * @param midX - middle point x value\n       * @param midY - middle point y value\n       * @param endX - end point x value\n       * @param endY - end point y value\n       * @param numberOfSegments - (default: 36)\n       * @returns the updated Path2.\n       */\n      addArcTo(midX, midY, endX, endY, numberOfSegments = 36) {\n          if (this.closed) {\n              return this;\n          }\n          const startPoint = this._points[this._points.length - 1];\n          const midPoint = new Vector2_1.Vector2(midX, midY);\n          const endPoint = new Vector2_1.Vector2(endX, endY);\n          const arc = new Arc2_1.Arc2(startPoint, midPoint, endPoint);\n          let increment = arc.angle.radians() / numberOfSegments;\n          if (arc.orientation === types_1$1.Orientation.CW) {\n              increment *= -1;\n          }\n          let currentAngle = arc.startAngle.radians() + increment;\n          for (let i = 0; i < numberOfSegments; i++) {\n              const x = Math.cos(currentAngle) * arc.radius + arc.centerPoint.x;\n              const y = Math.sin(currentAngle) * arc.radius + arc.centerPoint.y;\n              this.addLineTo(x, y);\n              currentAngle += increment;\n          }\n          return this;\n      }\n      /**\n       * Closes the Path2.\n       * @returns the Path2.\n       */\n      close() {\n          this.closed = true;\n          return this;\n      }\n      /**\n       * Gets the sum of the distance between each sequential point in the path\n       * @returns the Path2 total length (float).\n       */\n      length() {\n          let result = this._length;\n          if (!this.closed) {\n              const lastPoint = this._points[this._points.length - 1];\n              const firstPoint = this._points[0];\n              result += firstPoint.subtract(lastPoint).length();\n          }\n          return result;\n      }\n      /**\n       * Gets the points which construct the path\n       * @returns the Path2 internal array of points.\n       */\n      getPoints() {\n          return this._points;\n      }\n      /**\n       * Retreives the point at the distance aways from the starting point\n       * @param normalizedLengthPosition - the length along the path to retreive the point from\n       * @returns a new Vector2 located at a percentage of the Path2 total length on this path.\n       */\n      getPointAtLengthPosition(normalizedLengthPosition) {\n          if (normalizedLengthPosition < 0 || normalizedLengthPosition > 1) {\n              return Vector2_1.Vector2.Zero();\n          }\n          const lengthPosition = normalizedLengthPosition * this.length();\n          let previousOffset = 0;\n          for (let i = 0; i < this._points.length; i++) {\n              const j = (i + 1) % this._points.length;\n              const a = this._points[i];\n              const b = this._points[j];\n              const bToA = b.subtract(a);\n              const nextOffset = bToA.length() + previousOffset;\n              if (lengthPosition >= previousOffset && lengthPosition <= nextOffset) {\n                  const dir = bToA.normalize();\n                  const localOffset = lengthPosition - previousOffset;\n                  return new Vector2_1.Vector2(a.x + dir.x * localOffset, a.y + dir.y * localOffset);\n              }\n              previousOffset = nextOffset;\n          }\n          return Vector2_1.Vector2.Zero();\n      }\n  }\n  Path2d.Path2 = Path2;\n\n  var Path3d = {};\n\n  Object.defineProperty(Path3d, \"__esModule\", { value: true });\n  Path3d.Path3D = void 0;\n  const Vector3_1 = Vector3$1;\n  const types_1 = types;\n  const Scalar_1 = Scalar$1;\n  /**\n   * Represents a 3D path made up of multiple 3D points\n   * @public\n   */\n  class Path3D {\n      /**\n       * new Path3D(path, normal, raw)\n       * Creates a Path3D. A Path3D is a logical math object, so not a mesh.\n       * please read the description in the tutorial :  http://doc.babylonjs.com/tutorials/How_to_use_Path3D\n       * @param path - an array of Vector3, the curve axis of the Path3D\n       * @param normal - (options) Vector3, the first wanted normal to the curve. Ex (0, 1, 0) for a vertical normal.\n       * @param raw - (optional, default false) : boolean, if true the returned Path3D isn't normalized. Useful to depict path acceleration or speed.\n       */\n      constructor(\n      /**\n       * an array of Vector3, the curve axis of the Path3D\n       */\n      path, firstNormal = null, raw) {\n          this.path = path;\n          this._curve = new Array();\n          this._distances = new Array();\n          this._tangents = new Array();\n          this._normals = new Array();\n          this._binormals = new Array();\n          for (let p = 0; p < path.length; p++) {\n              this._curve[p] = path[p].clone(); // hard copy\n          }\n          this._raw = raw || false;\n          this._compute(firstNormal);\n      }\n      /**\n       * Returns the Path3D array of successive Vector3 designing its curve.\n       * @returns the Path3D array of successive Vector3 designing its curve.\n       */\n      getCurve() {\n          return this._curve;\n      }\n      /**\n       * Returns an array populated with tangent vectors on each Path3D curve point.\n       * @returns an array populated with tangent vectors on each Path3D curve point.\n       */\n      getTangents() {\n          return this._tangents;\n      }\n      /**\n       * Returns an array populated with normal vectors on each Path3D curve point.\n       * @returns an array populated with normal vectors on each Path3D curve point.\n       */\n      getNormals() {\n          return this._normals;\n      }\n      /**\n       * Returns an array populated with binormal vectors on each Path3D curve point.\n       * @returns an array populated with binormal vectors on each Path3D curve point.\n       */\n      getBinormals() {\n          return this._binormals;\n      }\n      /**\n       * Returns an array populated with distances (float) of the i-th point from the first curve point.\n       * @returns an array populated with distances (float) of the i-th point from the first curve point.\n       */\n      getDistances() {\n          return this._distances;\n      }\n      /**\n       * Forces the Path3D tangent, normal, binormal and distance recomputation.\n       * @param path - path which all values are copied into the curves points\n       * @param firstNormal - which should be projected onto the curve\n       * @returns the same object updated.\n       */\n      update(path, firstNormal = null) {\n          for (let p = 0; p < path.length; p++) {\n              this._curve[p].x = path[p].x;\n              this._curve[p].y = path[p].y;\n              this._curve[p].z = path[p].z;\n          }\n          this._compute(firstNormal);\n          return this;\n      }\n      // private function compute() : computes tangents, normals and binormals\n      _compute(firstNormal) {\n          const l = this._curve.length;\n          // first and last tangents\n          this._tangents[0] = this._getFirstNonNullVector(0);\n          if (!this._raw) {\n              this._tangents[0].normalize();\n          }\n          this._tangents[l - 1] = this._curve[l - 1].subtract(this._curve[l - 2]);\n          if (!this._raw) {\n              this._tangents[l - 1].normalize();\n          }\n          // normals and binormals at first point : arbitrary vector with _normalVector()\n          const tg0 = this._tangents[0];\n          const pp0 = this._normalVector(this._curve[0], tg0, firstNormal);\n          this._normals[0] = pp0;\n          if (!this._raw) {\n              this._normals[0].normalize();\n          }\n          this._binormals[0] = Vector3_1.Vector3.Cross(tg0, this._normals[0]);\n          if (!this._raw) {\n              this._binormals[0].normalize();\n          }\n          this._distances[0] = 0.0;\n          // normals and binormals : next points\n          let prev; // previous vector (segment)\n          let cur; // current vector (segment)\n          let curTang; // current tangent\n          // previous normal\n          let prevBinor; // previous binormal\n          for (let i = 1; i < l; i++) {\n              // tangents\n              prev = this._getLastNonNullVector(i);\n              if (i < l - 1) {\n                  cur = this._getFirstNonNullVector(i);\n                  this._tangents[i] = prev.add(cur);\n                  this._tangents[i].normalize();\n              }\n              this._distances[i] = this._distances[i - 1] + prev.length();\n              // normals and binormals\n              // http://www.cs.cmu.edu/afs/andrew/scs/cs/15-462/web/old/asst2camera.html\n              curTang = this._tangents[i];\n              prevBinor = this._binormals[i - 1];\n              this._normals[i] = Vector3_1.Vector3.Cross(prevBinor, curTang);\n              if (!this._raw) {\n                  this._normals[i].normalize();\n              }\n              this._binormals[i] = Vector3_1.Vector3.Cross(curTang, this._normals[i]);\n              if (!this._raw) {\n                  this._binormals[i].normalize();\n              }\n          }\n      }\n      // returns the first non null vector from index : curve[index + N].subtract(curve[index])\n      _getFirstNonNullVector(index) {\n          let i = 1;\n          let nNVector = this._curve[index + i].subtract(this._curve[index]);\n          while (nNVector.length() === 0 && index + i + 1 < this._curve.length) {\n              i++;\n              nNVector = this._curve[index + i].subtract(this._curve[index]);\n          }\n          return nNVector;\n      }\n      // returns the last non null vector from index : curve[index].subtract(curve[index - N])\n      _getLastNonNullVector(index) {\n          let i = 1;\n          let nLVector = this._curve[index].subtract(this._curve[index - i]);\n          while (nLVector.length() === 0 && index > i + 1) {\n              i++;\n              nLVector = this._curve[index].subtract(this._curve[index - i]);\n          }\n          return nLVector;\n      }\n      // private function normalVector(v0, vt, va) :\n      // returns an arbitrary point in the plane defined by the point v0 and the vector vt orthogonal to this plane\n      // if va is passed, it returns the va projection on the plane orthogonal to vt at the point v0\n      _normalVector(v0, vt, va) {\n          let normal0;\n          let tgl = vt.length();\n          if (tgl === 0.0) {\n              tgl = 1.0;\n          }\n          if (va === undefined || va === null) {\n              let point;\n              if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.y) / tgl, 1.0, types_1.Epsilon)) {\n                  // search for a point in the plane\n                  point = new Vector3_1.Vector3(0.0, -1.0, 0.0);\n              }\n              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.x) / tgl, 1.0, types_1.Epsilon)) {\n                  point = new Vector3_1.Vector3(1.0, 0.0, 0.0);\n              }\n              else if (!Scalar_1.Scalar.WithinEpsilon(Math.abs(vt.z) / tgl, 1.0, types_1.Epsilon)) {\n                  point = new Vector3_1.Vector3(0.0, 0.0, 1.0);\n              }\n              else {\n                  point = Vector3_1.Vector3.Zero();\n              }\n              normal0 = Vector3_1.Vector3.Cross(vt, point);\n          }\n          else {\n              normal0 = Vector3_1.Vector3.Cross(vt, va);\n              Vector3_1.Vector3.CrossToRef(normal0, vt, normal0);\n          }\n          normal0.normalize();\n          return normal0;\n      }\n  }\n  Path3d.Path3D = Path3D;\n\n  var Size$1 = {};\n\n  Object.defineProperty(Size$1, \"__esModule\", { value: true });\n  Size$1.Size = void 0;\n  /**\n   * Size containing widht and height\n   * @public\n   */\n  class Size {\n      /**\n       * Creates a Size object from the given width and height (floats).\n       * @param width - width of the new size\n       * @param height - height of the new size\n       */\n      constructor(width, height) {\n          this.width = width;\n          this.height = height;\n      }\n      /**\n       * The surface of the Size : width * height (float).\n       */\n      get surface() {\n          return this.width * this.height;\n      }\n      /**\n       * Create a new size of zero\n       * @returns a new Size set to (0.0, 0.0)\n       */\n      static Zero() {\n          return new Size(0.0, 0.0);\n      }\n      /**\n       * Creates a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n       * @param start - starting size to lerp between\n       * @param end - end size to lerp between\n       * @param amount - amount to lerp between the start and end values\n       * @returns a new Size set at the linear interpolation \"amount\" between \"start\" and \"end\"\n       */\n      static Lerp(start, end, amount) {\n          const w = start.width + (end.width - start.width) * amount;\n          const h = start.height + (end.height - start.height) * amount;\n          return new Size(w, h);\n      }\n      /**\n       * Returns a string with the Size width and height\n       * @returns a string with the Size width and height\n       */\n      toString() {\n          return `{W: ${this.width}, H: ${this.height}}`;\n      }\n      /**\n       * \"Size\"\n       * @returns the string \"Size\"\n       */\n      getClassName() {\n          return 'Size';\n      }\n      /**\n       * Returns the Size hash code.\n       * @returns a hash code for a unique width and height\n       */\n      getHashCode() {\n          let hash = this.width || 0;\n          hash = (hash * 397) ^ (this.height || 0);\n          return hash;\n      }\n      /**\n       * Updates the current size from the given one.\n       * @param src - the given size\n       */\n      copyFrom(src) {\n          this.width = src.width;\n          this.height = src.height;\n      }\n      /**\n       * Updates in place the current Size from the given floats.\n       * @param width - width of the new size\n       * @param height - height of the new size\n       * @returns the updated Size.\n       */\n      copyFromFloats(width, height) {\n          this.width = width;\n          this.height = height;\n          return this;\n      }\n      /**\n       * Updates in place the current Size from the given floats.\n       * @param width - width to set\n       * @param height - height to set\n       * @returns the updated Size.\n       */\n      set(width, height) {\n          return this.copyFromFloats(width, height);\n      }\n      /**\n       * Multiplies the width and height by numbers\n       * @param w - factor to multiple the width by\n       * @param h - factor to multiple the height by\n       * @returns a new Size set with the multiplication result of the current Size and the given floats.\n       */\n      multiplyByFloats(w, h) {\n          return new Size(this.width * w, this.height * h);\n      }\n      /**\n       * Clones the size\n       * @returns a new Size copied from the given one.\n       */\n      clone() {\n          return new Size(this.width, this.height);\n      }\n      /**\n       * True if the current Size and the given one width and height are strictly equal.\n       * @param other - the other size to compare against\n       * @returns True if the current Size and the given one width and height are strictly equal.\n       */\n      equals(other) {\n          if (!other) {\n              return false;\n          }\n          return this.width === other.width && this.height === other.height;\n      }\n      /**\n       * Sums the width and height of two sizes\n       * @param otherSize - size to add to this size\n       * @returns a new Size set as the addition result of the current Size and the given one.\n       */\n      add(otherSize) {\n          const r = new Size(this.width + otherSize.width, this.height + otherSize.height);\n          return r;\n      }\n      /**\n       * Subtracts the width and height of two\n       * @param otherSize - size to subtract to this size\n       * @returns a new Size set as the subtraction result of  the given one from the current Size.\n       */\n      subtract(otherSize) {\n          const r = new Size(this.width - otherSize.width, this.height - otherSize.height);\n          return r;\n      }\n  }\n  Size$1.Size = Size;\n\n  (function (exports) {\n  var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n      if (k2 === undefined) k2 = k;\n      Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n  }) : (function(o, m, k, k2) {\n      if (k2 === undefined) k2 = k;\n      o[k2] = m[k];\n  }));\n  var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {\n      for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n  };\n  Object.defineProperty(exports, \"__esModule\", { value: true });\n  __exportStar(types, exports);\n  __exportStar(preallocatedVariables, exports);\n  __exportStar(Angle$1, exports);\n  __exportStar(Arc2$1, exports);\n  __exportStar(Axis$1, exports);\n  __exportStar(BezierCurve$1, exports);\n  __exportStar(Color3$1, exports);\n  __exportStar(Color4$1, exports);\n  __exportStar(Curve3d, exports);\n  __exportStar(Furstum, exports);\n  __exportStar(Matrix$1, exports);\n  __exportStar(Path2d, exports);\n  __exportStar(Path3d, exports);\n  __exportStar(Plane$1, exports);\n  __exportStar(Quaternion$1, exports);\n  __exportStar(Scalar$1, exports);\n  __exportStar(Size$1, exports);\n  __exportStar(Vector2$1, exports);\n  __exportStar(Vector3$1, exports);\n  __exportStar(Vector4$1, exports);\n  __exportStar(dist, exports);\n\n  }(dist));\n\n  var defaultParams = {\r\n      looping: true,\r\n      speed: 1.0,\r\n      weight: 1.0,\r\n      layer: 0\r\n  };\r\n  /**\r\n   * @public\r\n   */\r\n  var AnimationState = /** @class */ (function (_super) {\r\n      __extends(AnimationState, _super);\r\n      function AnimationState(clip, params) {\r\n          if (params === void 0) { params = defaultParams; }\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.isAnimationClip = true;\r\n          /**\r\n           * Does the animation loop?, default: true\r\n           */\r\n          _this.looping = defaultParams.looping;\r\n          /**\r\n           * Weight of the animation, values from 0 to 1, used to blend several animations. default: 1\r\n           */\r\n          _this.weight = defaultParams.weight;\r\n          /**\r\n           * Is the animation playing? default: true\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Does any anyone asked to reset the animation? default: false\r\n           */\r\n          _this.shouldReset = false;\r\n          /**\r\n           * The animation speed\r\n           */\r\n          _this.speed = defaultParams.speed;\r\n          // @internal\r\n          _this.name = newId('AnimClip');\r\n          /**\r\n           * Layering allows you to have two or more levels of animation on an object's parameters at the same time\r\n           */\r\n          _this.layer = defaultParams.layer;\r\n          _this.clip = clip;\r\n          _this.setParams(__assign({}, params));\r\n          return _this;\r\n      }\r\n      /**\r\n       * Sets the clip parameters\r\n       */\r\n      AnimationState.prototype.setParams = function (params) {\r\n          this.looping = params.looping !== undefined ? params.looping : this.looping;\r\n          this.speed = params.speed || this.speed;\r\n          this.weight = params.weight || this.weight;\r\n          this.layer = params.layer || this.layer;\r\n          return this;\r\n      };\r\n      AnimationState.prototype.toJSON = function () {\r\n          var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n          if (this.shouldReset) {\r\n              this.shouldReset = false;\r\n          }\r\n          return ret;\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      AnimationState.prototype.play = function (reset) {\r\n          var _a;\r\n          if (reset === void 0) { reset = false; }\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.play(this, reset);\r\n      };\r\n      /**\r\n       * Pauses the animation\r\n       */\r\n      AnimationState.prototype.pause = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.pause(this);\r\n      };\r\n      /**\r\n       * Resets the animation state to the frame 0\r\n       */\r\n      AnimationState.prototype.reset = function () {\r\n          this.shouldReset = true;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation\r\n       */\r\n      AnimationState.prototype.stop = function () {\r\n          var _a;\r\n          (_a = this.owner) === null || _a === void 0 ? void 0 : _a.stop(this);\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AnimationState.prototype, \"clip\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"looping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AnimationState.prototype, \"weight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AnimationState.prototype, \"shouldReset\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AnimationState.prototype, \"speed\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AnimationState.prototype, \"name\", void 0);\r\n      return AnimationState;\r\n  }(ObservableComponent));\n\n  /** @public */\r\n  exports.InputEventType = void 0;\r\n  (function (InputEventType) {\r\n      InputEventType[InputEventType[\"DOWN\"] = 0] = \"DOWN\";\r\n      InputEventType[InputEventType[\"UP\"] = 1] = \"UP\";\r\n  })(exports.InputEventType || (exports.InputEventType = {}));\r\n  /** @public */\r\n  exports.CameraMode = void 0;\r\n  (function (CameraMode) {\r\n      CameraMode[CameraMode[\"FirstPerson\"] = 0] = \"FirstPerson\";\r\n      CameraMode[CameraMode[\"ThirdPerson\"] = 1] = \"ThirdPerson\";\r\n      // @internal\r\n      CameraMode[CameraMode[\"BuildingToolGodMode\"] = 2] = \"BuildingToolGodMode\";\r\n  })(exports.CameraMode || (exports.CameraMode = {}));\r\n  // @internal\r\n  var AVATAR_OBSERVABLE = 'AVATAR_OBSERVABLE';\r\n  /** @public */\r\n  exports.LandRole = void 0;\r\n  (function (LandRole) {\r\n      LandRole[\"OWNER\"] = \"owner\";\r\n      LandRole[\"OPERATOR\"] = \"operator\";\r\n  })(exports.LandRole || (exports.LandRole = {}));\n\n  /**\r\n   * @public\r\n   */\r\n  exports.ActionButton = void 0;\r\n  (function (ActionButton) {\r\n      ActionButton[\"POINTER\"] = \"POINTER\";\r\n      ActionButton[\"PRIMARY\"] = \"PRIMARY\";\r\n      ActionButton[\"SECONDARY\"] = \"SECONDARY\";\r\n      ActionButton[\"ANY\"] = \"ANY\";\r\n      ActionButton[\"FORWARD\"] = \"FORWARD\";\r\n      ActionButton[\"BACKWARD\"] = \"BACKWARD\";\r\n      ActionButton[\"RIGHT\"] = \"RIGHT\";\r\n      ActionButton[\"LEFT\"] = \"LEFT\";\r\n      ActionButton[\"JUMP\"] = \"JUMP\";\r\n      ActionButton[\"WALK\"] = \"WALK\";\r\n      ActionButton[\"ACTION_3\"] = \"ACTION_3\";\r\n      ActionButton[\"ACTION_4\"] = \"ACTION_4\";\r\n      ActionButton[\"ACTION_5\"] = \"ACTION_5\";\r\n      ActionButton[\"ACTION_6\"] = \"ACTION_6\";\r\n  })(exports.ActionButton || (exports.ActionButton = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventComponent = /** @class */ (function () {\r\n      function PointerEventComponent(callback) {\r\n          this.callback = callback;\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          Input.ensureInstance();\r\n      }\r\n      return PointerEventComponent;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerDown = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerDown, _super);\r\n      function GlobalPointerDown() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerDown = __decorate([\r\n          Component('pointerDown')\r\n      ], GlobalPointerDown);\r\n      return GlobalPointerDown;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var GlobalPointerUp = /** @class */ (function (_super) {\r\n      __extends(GlobalPointerUp, _super);\r\n      function GlobalPointerUp() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      GlobalPointerUp = __decorate([\r\n          Component('pointerUp')\r\n      ], GlobalPointerUp);\r\n      return GlobalPointerUp;\r\n  }(PointerEventComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Subscription = /** @class */ (function () {\r\n      function Subscription(fn, useRaycast) {\r\n          this.fn = fn;\r\n          this.useRaycast = useRaycast;\r\n      }\r\n      return Subscription;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var Input = /** @class */ (function () {\r\n      function Input() {\r\n          // @internal\r\n          this.buttonIdMapping = [\r\n              exports.ActionButton.POINTER,\r\n              exports.ActionButton.PRIMARY,\r\n              exports.ActionButton.SECONDARY,\r\n              exports.ActionButton.ANY,\r\n              exports.ActionButton.FORWARD,\r\n              exports.ActionButton.BACKWARD,\r\n              exports.ActionButton.RIGHT,\r\n              exports.ActionButton.LEFT,\r\n              exports.ActionButton.JUMP,\r\n              exports.ActionButton.WALK,\r\n              exports.ActionButton.ACTION_3,\r\n              exports.ActionButton.ACTION_4,\r\n              exports.ActionButton.ACTION_5,\r\n              exports.ActionButton.ACTION_6\r\n          ];\r\n          // @internal\r\n          this.subscriptions = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: [], BUTTON_UP: [] }, _a)));\r\n          }, {});\r\n          this.internalState = this.buttonIdMapping.reduce(function (acc, k) {\r\n              var _a;\r\n              return (__assign(__assign({}, acc), (_a = {}, _a[k] = { BUTTON_DOWN: false }, _a)));\r\n          }, {});\r\n      }\r\n      Object.defineProperty(Input, \"instance\", {\r\n          get: function () {\r\n              Input.ensureInstance();\r\n              return Input._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Input.ensureInstance = function () {\r\n          if (!Input._instance) {\r\n              Input._instance = new Input();\r\n          }\r\n      };\r\n      /**\r\n       * Allows to know if a button is pressed\r\n       *\r\n       * Returns true if the button is pressed\r\n       * @param buttonId - The id of the button.\r\n       */\r\n      Input.prototype.isButtonPressed = function (buttonId) {\r\n          return this.internalState[buttonId];\r\n      };\r\n      /**\r\n       * Subscribes to an input event and triggers the provided callback.\r\n       *\r\n       * Returns a function that can be called to remove the subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param useRaycast - Enables getting raycast information.\r\n       * @param fn - A callback function to be called when the event is triggered.\r\n       */\r\n      Input.prototype.subscribe = function (eventName, buttonId, useRaycast, fn) {\r\n          var _this = this;\r\n          this.subscriptions[buttonId][eventName].push(new Subscription(fn, useRaycast));\r\n          return function () {\r\n              _this.unsubscribe(eventName, buttonId, fn);\r\n          };\r\n      };\r\n      /**\r\n       * Removes an existing input event subscription.\r\n       * @param eventName - The name of the event (see InputEventKind).\r\n       * @param buttonId - The id of the button.\r\n       * @param fn - The callback function used when subscribing to the event.\r\n       */\r\n      Input.prototype.unsubscribe = function (eventName, buttonId, fn) {\r\n          var index = this.getSubscriptionId(eventName, buttonId, fn);\r\n          if (index > -1) {\r\n              return this.subscriptions[buttonId][eventName].splice(index, 1);\r\n          }\r\n          return false;\r\n      };\r\n      Input.prototype.handlePointerEvent = function (data) {\r\n          var button = this.getPointerById(data.buttonId);\r\n          if (!button) {\r\n              return;\r\n          }\r\n          var eventResult = __assign(__assign({}, data), { button: button, direction: new dist.Vector3().copyFrom(data.direction), origin: new dist.Vector3().copyFrom(data.origin), hit: undefined });\r\n          var hit = data.hit\r\n              ? __assign(__assign({}, data.hit), { hitPoint: new dist.Vector3().copyFrom(data.hit.hitPoint), normal: new dist.Vector3().copyFrom(data.hit.normal), worldNormal: new dist.Vector3().copyFrom(data.hit.worldNormal) }) : undefined;\r\n          if (data.type === exports.InputEventType.DOWN) {\r\n              this.internalState[button].BUTTON_DOWN = true;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_DOWN'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_DOWN'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerDown);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n          else {\r\n              this.internalState[button].BUTTON_DOWN = false;\r\n              for (var i = 0; i < this.subscriptions[button]['BUTTON_UP'].length; i++) {\r\n                  var subscription = this.subscriptions[button]['BUTTON_UP'][i];\r\n                  // remove hit information when raycast is disabled\r\n                  if (subscription.useRaycast) {\r\n                      eventResult.hit = hit;\r\n                  }\r\n                  else {\r\n                      eventResult.hit = undefined;\r\n                  }\r\n                  subscription.fn(eventResult);\r\n              }\r\n              if (hit && hit.entityId && DisposableComponent.engine) {\r\n                  var entity = DisposableComponent.engine.entities[hit.entityId];\r\n                  var handler = entity && entity.getComponentOrNull(GlobalPointerUp);\r\n                  if (handler) {\r\n                      eventResult.hit = hit;\r\n                      handler.callback(eventResult);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      Input.prototype.getSubscriptionId = function (eventName, buttonId, fn) {\r\n          for (var i = 0; i < this.subscriptions[buttonId][eventName].length; i++) {\r\n              if (this.subscriptions[buttonId][eventName][i].fn === fn) {\r\n                  return i;\r\n              }\r\n          }\r\n          return -1;\r\n      };\r\n      Input.prototype.getPointerById = function (id) {\r\n          if (id < 0 || id >= this.buttonIdMapping.length) {\r\n              return null;\r\n          }\r\n          var actionButton = this.buttonIdMapping[id];\r\n          if (actionButton === exports.ActionButton.ANY) {\r\n              return null;\r\n          }\r\n          return actionButton;\r\n      };\r\n      return Input;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  exports.CLASS_ID = void 0;\r\n  (function (CLASS_ID) {\r\n      CLASS_ID[CLASS_ID[\"TRANSFORM\"] = 1] = \"TRANSFORM\";\r\n      CLASS_ID[CLASS_ID[\"UUID_CALLBACK\"] = 8] = \"UUID_CALLBACK\";\r\n      CLASS_ID[CLASS_ID[\"BOX_SHAPE\"] = 16] = \"BOX_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"SPHERE_SHAPE\"] = 17] = \"SPHERE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"PLANE_SHAPE\"] = 18] = \"PLANE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CONE_SHAPE\"] = 19] = \"CONE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CYLINDER_SHAPE\"] = 20] = \"CYLINDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"TEXT_SHAPE\"] = 21] = \"TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"NFT_SHAPE\"] = 22] = \"NFT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_WORLD_SPACE_SHAPE\"] = 23] = \"UI_WORLD_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SCREEN_SPACE_SHAPE\"] = 24] = \"UI_SCREEN_SPACE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_RECT\"] = 25] = \"UI_CONTAINER_RECT\";\r\n      CLASS_ID[CLASS_ID[\"UI_CONTAINER_STACK\"] = 26] = \"UI_CONTAINER_STACK\";\r\n      CLASS_ID[CLASS_ID[\"UI_TEXT_SHAPE\"] = 27] = \"UI_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_INPUT_TEXT_SHAPE\"] = 28] = \"UI_INPUT_TEXT_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_IMAGE_SHAPE\"] = 29] = \"UI_IMAGE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_SLIDER_SHAPE\"] = 30] = \"UI_SLIDER_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"CIRCLE_SHAPE\"] = 31] = \"CIRCLE_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BILLBOARD\"] = 32] = \"BILLBOARD\";\r\n      CLASS_ID[CLASS_ID[\"ANIMATION\"] = 33] = \"ANIMATION\";\r\n      CLASS_ID[CLASS_ID[\"FONT\"] = 34] = \"FONT\";\r\n      CLASS_ID[CLASS_ID[\"UI_FULLSCREEN_SHAPE\"] = 40] = \"UI_FULLSCREEN_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"UI_BUTTON_SHAPE\"] = 41] = \"UI_BUTTON_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"GLTF_SHAPE\"] = 54] = \"GLTF_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"OBJ_SHAPE\"] = 55] = \"OBJ_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_SHAPE\"] = 56] = \"AVATAR_SHAPE\";\r\n      CLASS_ID[CLASS_ID[\"BASIC_MATERIAL\"] = 64] = \"BASIC_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"PBR_MATERIAL\"] = 65] = \"PBR_MATERIAL\";\r\n      CLASS_ID[CLASS_ID[\"HIGHLIGHT_ENTITY\"] = 66] = \"HIGHLIGHT_ENTITY\";\r\n      /** @deprecated Sound has been deprecataed */\r\n      CLASS_ID[CLASS_ID[\"SOUND\"] = 67] = \"SOUND\";\r\n      CLASS_ID[CLASS_ID[\"TEXTURE\"] = 68] = \"TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_CLIP\"] = 70] = \"VIDEO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"VIDEO_TEXTURE\"] = 71] = \"VIDEO_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_TEXTURE\"] = 72] = \"AVATAR_TEXTURE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_CLIP\"] = 200] = \"AUDIO_CLIP\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_SOURCE\"] = 201] = \"AUDIO_SOURCE\";\r\n      CLASS_ID[CLASS_ID[\"AUDIO_STREAM\"] = 202] = \"AUDIO_STREAM\";\r\n      CLASS_ID[CLASS_ID[\"GIZMOS\"] = 203] = \"GIZMOS\";\r\n      CLASS_ID[CLASS_ID[\"SMART_ITEM\"] = 204] = \"SMART_ITEM\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_MODIFIER_AREA\"] = 205] = \"AVATAR_MODIFIER_AREA\";\r\n      CLASS_ID[CLASS_ID[\"AVATAR_ATTACH\"] = 206] = \"AVATAR_ATTACH\";\r\n      CLASS_ID[CLASS_ID[\"CAMERA_MODE_AREA\"] = 207] = \"CAMERA_MODE_AREA\";\r\n      // For state sync only\r\n      CLASS_ID[CLASS_ID[\"NAME\"] = 300] = \"NAME\";\r\n      CLASS_ID[CLASS_ID[\"LOCKED_ON_EDIT\"] = 301] = \"LOCKED_ON_EDIT\";\r\n      CLASS_ID[CLASS_ID[\"VISIBLE_ON_EDIT\"] = 302] = \"VISIBLE_ON_EDIT\";\r\n  })(exports.CLASS_ID || (exports.CLASS_ID = {}));\r\n  /** @public */\r\n  exports.AvatarModifiers = void 0;\r\n  (function (AvatarModifiers) {\r\n      AvatarModifiers[\"HIDE_AVATARS\"] = \"HIDE_AVATARS\";\r\n      AvatarModifiers[\"DISABLE_PASSPORTS\"] = \"DISABLE_PASSPORTS\";\r\n  })(exports.AvatarModifiers || (exports.AvatarModifiers = {}));\r\n  /**\r\n   * Define an area where avatars can be modified in some way\r\n   * @public\r\n   */\r\n  var AvatarModifierArea = /** @class */ (function (_super) {\r\n      __extends(AvatarModifierArea, _super);\r\n      function AvatarModifierArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.modifiers = args.modifiers;\r\n          _this.excludeIds = args.excludeIds;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarModifierArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarModifierArea.prototype, \"modifiers\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarModifierArea.prototype, \"excludeIds\", void 0);\r\n      AvatarModifierArea = __decorate([\r\n          Component('engine.avatarModifierArea', exports.CLASS_ID.AVATAR_MODIFIER_AREA),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], AvatarModifierArea);\r\n      return AvatarModifierArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Transform = /** @class */ (function (_super) {\r\n      __extends(Transform, _super);\r\n      function Transform(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.position = args.position || dist.Vector3.Zero();\r\n          _this.rotation = args.rotation || dist.Quaternion.Identity;\r\n          _this.scale = args.scale || new dist.Vector3(1, 1, 1);\r\n          return _this;\r\n      }\r\n      Object.defineProperty(Transform.prototype, \"eulerAngles\", {\r\n          /**\r\n           * @public\r\n           * The rotation as Euler angles in degrees.\r\n           */\r\n          get: function () {\r\n              return this.rotation.eulerAngles;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      /**\r\n       * @public\r\n       * Rotates the transform so the forward vector points at target's current position.\r\n       */\r\n      Transform.prototype.lookAt = function (target, worldUp) {\r\n          if (worldUp === void 0) { worldUp = dist.MathTmp.staticUp; }\r\n          var result = new dist.Matrix();\r\n          dist.Matrix.LookAtLHToRef(this.position, target, worldUp, result);\r\n          result.invert();\r\n          dist.Quaternion.FromRotationMatrixToRef(result, this.rotation);\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Applies a rotation of euler angles around the x, y and z axis.\r\n       */\r\n      Transform.prototype.rotate = function (axis, angle) {\r\n          this.rotation.multiplyInPlace(this.rotation.angleAxis(angle, axis));\r\n          return this;\r\n      };\r\n      /**\r\n       * @public\r\n       * Moves the transform in the direction and distance of translation.\r\n       */\r\n      Transform.prototype.translate = function (vec) {\r\n          this.position.addInPlace(vec);\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Vector3)\r\n      ], Transform.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Quaternion)\r\n      ], Transform.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Vector3)\r\n      ], Transform.prototype, \"scale\", void 0);\r\n      Transform = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.TRANSFORM),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], Transform);\r\n      return Transform;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.AttachToAvatarAnchorPointId = void 0;\r\n  (function (AttachToAvatarAnchorPointId) {\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"Position\"] = 0] = \"Position\";\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"NameTag\"] = 1] = \"NameTag\";\r\n      /** @internal */\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"LeftHand\"] = 2] = \"LeftHand\";\r\n      /** @internal */\r\n      AttachToAvatarAnchorPointId[AttachToAvatarAnchorPointId[\"RightHand\"] = 3] = \"RightHand\";\r\n  })(exports.AttachToAvatarAnchorPointId || (exports.AttachToAvatarAnchorPointId = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var AttachToAvatar = /** @class */ (function (_super) {\r\n      __extends(AttachToAvatar, _super);\r\n      function AttachToAvatar(args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.avatarId = args.avatarId || '';\r\n          _this.anchorPointId =\r\n              args.anchorPointId || exports.AttachToAvatarAnchorPointId.Position;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AttachToAvatar.prototype, \"avatarId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AttachToAvatar.prototype, \"anchorPointId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AttachToAvatar.prototype, \"avatarSceneId\", void 0);\r\n      AttachToAvatar = __decorate([\r\n          Component('engine.transform', exports.CLASS_ID.AVATAR_ATTACH),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], AttachToAvatar);\r\n      return AttachToAvatar;\r\n  }(ObservableComponent));\r\n  /**\r\n   * Billboard defines a behavior that makes the entity face the camera in any moment.\r\n   * @public\r\n   */\r\n  var Billboard = /** @class */ (function (_super) {\r\n      __extends(Billboard, _super);\r\n      function Billboard(x, y, z) {\r\n          if (x === void 0) { x = true; }\r\n          if (y === void 0) { y = true; }\r\n          if (z === void 0) { z = true; }\r\n          var _this = _super.call(this) || this;\r\n          _this.x = true;\r\n          _this.y = true;\r\n          _this.z = true;\r\n          _this.x = x;\r\n          _this.y = y;\r\n          _this.z = z;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"x\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"y\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Billboard.prototype, \"z\", void 0);\r\n      Billboard = __decorate([\r\n          Component('engine.billboard', exports.CLASS_ID.BILLBOARD),\r\n          __metadata(\"design:paramtypes\", [Boolean, Boolean, Boolean])\r\n      ], Billboard);\r\n      return Billboard;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Shape = /** @class */ (function (_super) {\r\n      __extends(Shape, _super);\r\n      function Shape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Set to true to turn on the collider for the entity.\r\n           */\r\n          _this.withCollisions = true;\r\n          /**\r\n           * Set to true to turn on the PointerEvents blocking for the entity.\r\n           */\r\n          _this.isPointerBlocker = true;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.visible = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"withCollisions\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"isPointerBlocker\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Shape.prototype, \"visible\", void 0);\r\n      return Shape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BoxShape = /** @class */ (function (_super) {\r\n      __extends(BoxShape, _super);\r\n      function BoxShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], BoxShape.prototype, \"uvs\", void 0);\r\n      BoxShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.BOX_SHAPE)\r\n      ], BoxShape);\r\n      return BoxShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var SphereShape = /** @class */ (function (_super) {\r\n      __extends(SphereShape, _super);\r\n      function SphereShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SphereShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.SPHERE_SHAPE)\r\n      ], SphereShape);\r\n      return SphereShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CircleShape = /** @class */ (function (_super) {\r\n      __extends(CircleShape, _super);\r\n      function CircleShape() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CircleShape.prototype, \"segments\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CircleShape.prototype, \"arc\", void 0);\r\n      CircleShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CIRCLE_SHAPE)\r\n      ], CircleShape);\r\n      return CircleShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var PlaneShape = /** @class */ (function (_super) {\r\n      __extends(PlaneShape, _super);\r\n      function PlaneShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Sets the horizontal length of the plane. Defaults to 1.\r\n           */\r\n          _this.width = 1;\r\n          /**\r\n           * Sets the vertical length of the plane. Defaults to 1.\r\n           */\r\n          _this.height = 1;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], PlaneShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], PlaneShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], PlaneShape.prototype, \"uvs\", void 0);\r\n      PlaneShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.PLANE_SHAPE)\r\n      ], PlaneShape);\r\n      return PlaneShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var ConeShape = /** @class */ (function (_super) {\r\n      __extends(ConeShape, _super);\r\n      function ConeShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of a truncated cone. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 0;\r\n          /**\r\n           * The radius of the base of the cone. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cone height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cone sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cone around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cone. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], ConeShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], ConeShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], ConeShape.prototype, \"arc\", void 0);\r\n      ConeShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CONE_SHAPE)\r\n      ], ConeShape);\r\n      return ConeShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var CylinderShape = /** @class */ (function (_super) {\r\n      __extends(CylinderShape, _super);\r\n      function CylinderShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * The radius of the top of the cylinder. Defaults to 0.\r\n           */\r\n          _this.radiusTop = 1;\r\n          /**\r\n           * The radius of the base of the cylinder. Defaults to 1.\r\n           */\r\n          _this.radiusBottom = 1;\r\n          /**\r\n           * Sets the number of rings along the cylinder height (positive integer). Defaults to 1.\r\n           */\r\n          _this.segmentsHeight = 1;\r\n          /**\r\n           * Sets the number of cylinder sides (positive integer). Defaults to 36.\r\n           */\r\n          _this.segmentsRadial = 36;\r\n          /**\r\n           * Adds two extra faces per subdivision to enclose the cylinder around its height axis.\r\n           * Defaults to false.\r\n           */\r\n          _this.openEnded = false;\r\n          /**\r\n           * Sets the radius of the top and bottom caps at once.\r\n           *\r\n           * Properties `radiusTop` and `radiusBottom` are prioritized over this one.\r\n           */\r\n          _this.radius = null;\r\n          /**\r\n           * Sets the ratio (max 1) to apply to the circumference to slice the cylinder. Defaults to 360.\r\n           */\r\n          _this.arc = 360;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"radiusTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"radiusBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"segmentsHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"segmentsRadial\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], CylinderShape.prototype, \"openEnded\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], CylinderShape.prototype, \"radius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CylinderShape.prototype, \"arc\", void 0);\r\n      CylinderShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.CYLINDER_SHAPE)\r\n      ], CylinderShape);\r\n      return CylinderShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var GLTFShape = /** @class */ (function (_super) {\r\n      __extends(GLTFShape, _super);\r\n      function GLTFShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], GLTFShape.prototype, \"src\", void 0);\r\n      GLTFShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.GLTF_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], GLTFShape);\r\n      return GLTFShape;\r\n  }(Shape));\r\n  /** @public */\r\n  exports.PictureFrameStyle = void 0;\r\n  (function (PictureFrameStyle) {\r\n      PictureFrameStyle[PictureFrameStyle[\"Classic\"] = 0] = \"Classic\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Baroque_Ornament\"] = 1] = \"Baroque_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Diamond_Ornament\"] = 2] = \"Diamond_Ornament\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Wide\"] = 3] = \"Minimal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Grey\"] = 4] = \"Minimal_Grey\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Blocky\"] = 5] = \"Blocky\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Edges\"] = 6] = \"Gold_Edges\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Carved\"] = 7] = \"Gold_Carved\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Wide\"] = 8] = \"Gold_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Gold_Rounded\"] = 9] = \"Gold_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Medium\"] = 10] = \"Metal_Medium\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Wide\"] = 11] = \"Metal_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Slim\"] = 12] = \"Metal_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Metal_Rounded\"] = 13] = \"Metal_Rounded\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Pins\"] = 14] = \"Pins\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_Black\"] = 15] = \"Minimal_Black\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Minimal_White\"] = 16] = \"Minimal_White\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Tape\"] = 17] = \"Tape\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Slim\"] = 18] = \"Wood_Slim\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Wide\"] = 19] = \"Wood_Wide\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Wood_Twigs\"] = 20] = \"Wood_Twigs\";\r\n      PictureFrameStyle[PictureFrameStyle[\"Canvas\"] = 21] = \"Canvas\";\r\n      PictureFrameStyle[PictureFrameStyle[\"None\"] = 22] = \"None\";\r\n  })(exports.PictureFrameStyle || (exports.PictureFrameStyle = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var NFTShape = /** @class */ (function (_super) {\r\n      __extends(NFTShape, _super);\r\n      function NFTShape(src, args) {\r\n          if (args === void 0) { args = {}; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          var color = new dist.Color3(0.6404918, 0.611472, 0.8584906);\r\n          var style = exports.PictureFrameStyle.Classic;\r\n          // check if args is color (backwards compatibility)\r\n          if ('r' in args) {\r\n              color = args;\r\n          }\r\n          else if (args !== null) {\r\n              if (args.color)\r\n                  color = args.color;\r\n              if (args.style)\r\n                  style = args.style;\r\n          }\r\n          _this.color = color;\r\n          _this.style = style;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], NFTShape.prototype, \"src\", void 0);\r\n      __decorate([\r\n          Shape.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], NFTShape.prototype, \"style\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], NFTShape.prototype, \"color\", void 0);\r\n      NFTShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.NFT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], NFTShape);\r\n      return NFTShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Texture = /** @class */ (function (_super) {\r\n      __extends(Texture, _super);\r\n      function Texture(src, opts) {\r\n          var _this = _super.call(this) || this;\r\n          var base64Test = new RegExp('data:[a-z-]+/[a-z-]+;base64');\r\n          if (src.length > 2048 || base64Test.test(src)) {\r\n              log('⚠️🚨 Base64 textures will be deprecated in version 7 of decentraland-ecs');\r\n          }\r\n          _this.src = src;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], Texture.prototype, \"src\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], Texture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], Texture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Texture.prototype, \"hasAlpha\", void 0);\r\n      Texture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.TEXTURE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], Texture);\r\n      return Texture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var Animator = /** @class */ (function (_super) {\r\n      __extends(Animator, _super);\r\n      function Animator() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.states = [];\r\n          return _this;\r\n      }\r\n      /**\r\n       * Adds an AnimationState to the animation lists.\r\n       */\r\n      Animator.prototype.addClip = function (clip) {\r\n          var _this = this;\r\n          this.states.push(clip);\r\n          clip.onChange(function () {\r\n              _this.dirty = true;\r\n          });\r\n          clip.owner = this;\r\n          return this;\r\n      };\r\n      /**\r\n       * Gets the animation clip instance for the specified clip name.\r\n       * If the clip doesn't exist a new one will be created.\r\n       */\r\n      Animator.prototype.getClip = function (clipName) {\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var clip = this.states[i];\r\n              if (clip.clip === clipName) {\r\n                  return clip;\r\n              }\r\n          }\r\n          var newClip = new AnimationState(clipName);\r\n          this.addClip(newClip);\r\n          return newClip;\r\n      };\r\n      /**\r\n       * Resets and pauses the animation state, if the clip is null it will stop all animations on this animator\r\n       */\r\n      Animator.prototype.stop = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n              clip.shouldReset = true;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.stop(animationState);\r\n              }\r\n          }\r\n      };\r\n      /**\r\n       * Starts the animation\r\n       */\r\n      Animator.prototype.play = function (clip, reset) {\r\n          if (reset === void 0) { reset = false; }\r\n          for (var i = 0; i < this.states.length; i++) {\r\n              var animationState = this.states[i];\r\n              if (animationState.layer === clip.layer && clip !== animationState) {\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n          if (reset)\r\n              clip.shouldReset = true;\r\n          clip.playing = true;\r\n          clip.dirty = true;\r\n          clip.data.nonce = Math.random();\r\n      };\r\n      /**\r\n       * Pauses the animation state, if the clip is null it will pause all animations on this animator\r\n       */\r\n      Animator.prototype.pause = function (clip) {\r\n          if (clip) {\r\n              clip.playing = false;\r\n          }\r\n          else {\r\n              for (var i = 0; i < this.states.length; i++) {\r\n                  var animationState = this.states[i];\r\n                  this.pause(animationState);\r\n              }\r\n          }\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Array)\r\n      ], Animator.prototype, \"states\", void 0);\r\n      Animator = __decorate([\r\n          Component('engine.animator', exports.CLASS_ID.ANIMATION)\r\n      ], Animator);\r\n      return Animator;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var OBJShape = /** @class */ (function (_super) {\r\n      __extends(OBJShape, _super);\r\n      function OBJShape(src) {\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OBJShape.prototype, \"src\", void 0);\r\n      OBJShape = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.OBJ_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], OBJShape);\r\n      return OBJShape;\r\n  }(Shape));\r\n  /**\r\n   * @public\r\n   */\r\n  var Font = /** @class */ (function (_super) {\r\n      __extends(Font, _super);\r\n      function Font(src) {\r\n          if (src === void 0) { src = ''; }\r\n          var _this = _super.call(this) || this;\r\n          _this.src = src;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], Font.prototype, \"src\", void 0);\r\n      Font = __decorate([\r\n          DisposableComponent('engine.font', exports.CLASS_ID.FONT),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], Font);\r\n      return Font;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.Fonts = void 0;\r\n  (function (Fonts) {\r\n      /** @deprecated SanFrancisco has been deprecated. Use SansSerif instead.*/\r\n      Fonts[\"SanFrancisco\"] = \"builtin:SF-UI-Text-Regular SDF\";\r\n      /** @deprecated SanFrancisco_Heavy has been deprecated. Use SansSerif_Heavy instead.*/\r\n      Fonts[\"SanFrancisco_Heavy\"] = \"builtin:SF-UI-Text-Heavy SDF\";\r\n      /** @deprecated SanFrancisco_Semibold has been deprecated. Use SansSerif_SemiBold instead.*/\r\n      Fonts[\"SanFrancisco_Semibold\"] = \"builtin:SF-UI-Text-Semibold SDF\";\r\n      Fonts[\"LiberationSans\"] = \"builtin:LiberationSans SDF\";\r\n      Fonts[\"SansSerif\"] = \"SansSerif\";\r\n      Fonts[\"SansSerif_Heavy\"] = \"SansSerif_Heavy\";\r\n      Fonts[\"SansSerif_Bold\"] = \"SansSerif_Bold\";\r\n      Fonts[\"SansSerif_SemiBold\"] = \"SansSerif_SemiBold\";\r\n  })(exports.Fonts || (exports.Fonts = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var TextShape = /** @class */ (function (_super) {\r\n      __extends(TextShape, _super);\r\n      function TextShape(value) {\r\n          var _this = _super.call(this) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = new dist.Color3(1, 1, 1);\r\n          _this.color = new dist.Color3(1, 1, 1);\r\n          _this.fontSize = 10;\r\n          _this.opacity = 1.0;\r\n          _this.value = '';\r\n          _this.lineSpacing = '0px';\r\n          _this.lineCount = 0;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = new dist.Color3(1, 1, 1);\r\n          _this.hTextAlign = 'center';\r\n          _this.vTextAlign = 'center';\r\n          _this.width = 1;\r\n          _this.height = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.billboard = false;\r\n          _this.visible = true;\r\n          if (value) {\r\n              _this.value = value;\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], TextShape.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3)\r\n      ], TextShape.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], TextShape.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], TextShape.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"billboard\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], TextShape.prototype, \"visible\", void 0);\r\n      TextShape = __decorate([\r\n          Component('engine.text', exports.CLASS_ID.TEXT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], TextShape);\r\n      return TextShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.TransparencyMode = void 0;\r\n  (function (TransparencyMode) {\r\n      TransparencyMode[TransparencyMode[\"OPAQUE\"] = 0] = \"OPAQUE\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST\"] = 1] = \"ALPHA_TEST\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_BLEND\"] = 2] = \"ALPHA_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"ALPHA_TEST_AND_BLEND\"] = 3] = \"ALPHA_TEST_AND_BLEND\";\r\n      TransparencyMode[TransparencyMode[\"AUTO\"] = 4] = \"AUTO\";\r\n  })(exports.TransparencyMode || (exports.TransparencyMode = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var Material = /** @class */ (function (_super) {\r\n      __extends(Material, _super);\r\n      function Material() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Cutoff level for ALPHATEST mode. Range is between 0 and 1.\r\n           * Defaults to 0.5\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          /**\r\n           * Sets the transparency mode of the material.\r\n           * Defaults to -1.\r\n           *\r\n           * | Value | Type                                           |\r\n           * | ----- | ---------------------------------------------- |\r\n           * | 0     | OPAQUE  (default)                              |\r\n           * | 1     | ALPHATEST                                      |\r\n           * | 2     | ALPHABLEND                                     |\r\n           * | 3     | ALPHATESTANDBLEND                              |\r\n           * | 4     | AUTO (ALPHABLEND if alpha OPAQUE otherwise     |\r\n           */\r\n          _this.transparencyMode = exports.TransparencyMode.AUTO;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"albedoColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3\r\n          /**\r\n           * Specifies the metallic scalar of the metallic/roughness workflow.\r\n           * Can also be used to scale the metalness values of the metallic texture.\r\n           * Defaults to  0.5.\r\n           */\r\n          )\r\n      ], Material.prototype, \"emissiveColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"metallic\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"roughness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color3\r\n          /**\r\n           * Intensity of the direct lights e.g. the four lights available in scene.\r\n           * This impacts both the direct diffuse and specular highlights.\r\n           * Defaults to 1.\r\n           */\r\n          )\r\n      ], Material.prototype, \"reflectivityColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"directIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"microSurface\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"emissiveIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"specularIntensity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"albedoTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"alphaTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"emissiveTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], Material.prototype, \"bumpTexture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Material.prototype, \"castShadows\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], Material.prototype, \"transparencyMode\", void 0);\r\n      Material = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.PBR_MATERIAL)\r\n      ], Material);\r\n      return Material;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var BasicMaterial = /** @class */ (function (_super) {\r\n      __extends(BasicMaterial, _super);\r\n      function BasicMaterial() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * A number between 0 and 1.\r\n           * Any pixel with an alpha lower than this value will be shown as transparent.\r\n           */\r\n          _this.alphaTest = 0.5;\r\n          /**\r\n           * Allow the material to cast shadows over other objects\r\n           */\r\n          _this.castShadows = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], BasicMaterial.prototype, \"texture\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], BasicMaterial.prototype, \"alphaTest\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], BasicMaterial.prototype, \"castShadows\", void 0);\r\n      BasicMaterial = __decorate([\r\n          DisposableComponent('engine.material', exports.CLASS_ID.BASIC_MATERIAL)\r\n      ], BasicMaterial);\r\n      return BasicMaterial;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnUUIDEvent, _super);\r\n      function OnUUIDEvent(callback) {\r\n          var _this = _super.call(this) || this;\r\n          // @internal\r\n          _this.uuid = newId('UUID');\r\n          if (!callback || !('apply' in callback) || !('call' in callback)) {\r\n              throw new Error('Callback is not a function');\r\n          }\r\n          _this.callback = callback;\r\n          return _this;\r\n      }\r\n      OnUUIDEvent.uuidEvent = function (target, propertyKey) {\r\n          if (delete target[propertyKey]) {\r\n              var componentSymbol_1 = propertyKey + '_' + Math.random();\r\n              target[componentSymbol_1] = undefined;\r\n              Object.defineProperty(target, componentSymbol_1, __assign(__assign({}, Object.getOwnPropertyDescriptor(target, componentSymbol_1)), { enumerable: false }));\r\n              Object.defineProperty(target, propertyKey.toString(), {\r\n                  get: function () {\r\n                      return this[componentSymbol_1];\r\n                  },\r\n                  set: function (value) {\r\n                      var oldValue = this[componentSymbol_1];\r\n                      if (value) {\r\n                          if (value instanceof OnUUIDEvent) {\r\n                              this.data[propertyKey] = value.uuid;\r\n                          }\r\n                          else {\r\n                              throw new Error('value is not an OnUUIDEvent');\r\n                          }\r\n                      }\r\n                      else {\r\n                          this.data[propertyKey] = null;\r\n                      }\r\n                      this[componentSymbol_1] = value;\r\n                      if (value !== oldValue) {\r\n                          this.dirty = true;\r\n                          for (var i = 0; i < this.subscriptions.length; i++) {\r\n                              this.subscriptions[i](propertyKey, value, oldValue);\r\n                          }\r\n                      }\r\n                  },\r\n                  enumerable: true\r\n              });\r\n          }\r\n      };\r\n      OnUUIDEvent.prototype.toJSON = function () {\r\n          return { uuid: this.uuid, type: this.type };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Function)\r\n      ], OnUUIDEvent.prototype, \"callback\", void 0);\r\n      return OnUUIDEvent;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUUIDEvent = /** @class */ (function (_super) {\r\n      __extends(OnPointerUUIDEvent, _super);\r\n      function OnPointerUUIDEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.button = exports.ActionButton.ANY;\r\n          _this.hoverText = 'Interact';\r\n          _this.distance = 10;\r\n          _this.showFeedback = true;\r\n          return _this;\r\n      }\r\n      OnPointerUUIDEvent.prototype.toJSON = function () {\r\n          return {\r\n              uuid: this.uuid,\r\n              type: this.type,\r\n              button: this.button,\r\n              hoverText: this.hoverText,\r\n              distance: this.distance,\r\n              showFeedback: this.showFeedback\r\n          };\r\n      };\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUUIDEvent.prototype, \"button\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUUIDEvent.prototype, \"hoverText\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], OnPointerUUIDEvent.prototype, \"distance\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], OnPointerUUIDEvent.prototype, \"showFeedback\", void 0);\r\n      return OnPointerUUIDEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var OnPointerLock = /** @class */ (function (_super) {\r\n      __extends(OnPointerLock, _super);\r\n      function OnPointerLock() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onPointerLock';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerLock.prototype, \"type\", void 0);\r\n      OnPointerLock = __decorate([\r\n          Component('engine.onPointerLock', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnPointerLock);\r\n      return OnPointerLock;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnAnimationEnd = /** @class */ (function (_super) {\r\n      __extends(OnAnimationEnd, _super);\r\n      function OnAnimationEnd() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'onAnimationEnd';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnAnimationEnd.prototype, \"type\", void 0);\r\n      OnAnimationEnd = __decorate([\r\n          Component('engine.onAnimationEnd', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnAnimationEnd);\r\n      return OnAnimationEnd;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @internal\r\n   */\r\n  var SmartItem = /** @class */ (function (_super) {\r\n      __extends(SmartItem, _super);\r\n      function SmartItem() {\r\n          return _super !== null && _super.apply(this, arguments) || this;\r\n      }\r\n      SmartItem = __decorate([\r\n          Component('engine.smartItem', exports.CLASS_ID.SMART_ITEM)\r\n      ], SmartItem);\r\n      return SmartItem;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoClip = /** @class */ (function (_super) {\r\n      __extends(VideoClip, _super);\r\n      function VideoClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], VideoClip.prototype, \"url\", void 0);\r\n      VideoClip = __decorate([\r\n          DisposableComponent('engine.VideoClip', exports.CLASS_ID.VIDEO_CLIP),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], VideoClip);\r\n      return VideoClip;\r\n  }(ObservableComponent));\r\n  /** @public */\r\n  exports.VideoStatus = void 0;\r\n  (function (VideoStatus) {\r\n      VideoStatus[VideoStatus[\"NONE\"] = 0] = \"NONE\";\r\n      VideoStatus[VideoStatus[\"ERROR\"] = 1] = \"ERROR\";\r\n      VideoStatus[VideoStatus[\"LOADING\"] = 2] = \"LOADING\";\r\n      VideoStatus[VideoStatus[\"READY\"] = 3] = \"READY\";\r\n      VideoStatus[VideoStatus[\"PLAYING\"] = 4] = \"PLAYING\";\r\n      VideoStatus[VideoStatus[\"BUFFERING\"] = 5] = \"BUFFERING\";\r\n  })(exports.VideoStatus || (exports.VideoStatus = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var VideoTexture = /** @class */ (function (_super) {\r\n      __extends(VideoTexture, _super);\r\n      function VideoTexture(videoClip, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.volume = 1;\r\n          _this.playbackRate = 1;\r\n          _this.loop = false;\r\n          _this.seek = -1;\r\n          _this._position = -1;\r\n          _this._videoLength = -1;\r\n          _this._status = exports.VideoStatus.NONE;\r\n          /**\r\n           * Is this VideoTexture playing?\r\n           */\r\n          _this.playing = false;\r\n          if (!(videoClip instanceof VideoClip)) {\r\n              throw new Error(\"Trying to create VideoTexture(VideoClip) with an invalid VideoClip\");\r\n          }\r\n          _this.videoClipId = getComponentId(videoClip);\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      VideoTexture.prototype.play = function () {\r\n          this.playing = true;\r\n      };\r\n      VideoTexture.prototype.pause = function () {\r\n          this.playing = false;\r\n      };\r\n      VideoTexture.prototype.reset = function () {\r\n          this.seekTime(0);\r\n          this.pause();\r\n      };\r\n      VideoTexture.prototype.seekTime = function (seconds) {\r\n          this.seek = seconds;\r\n          this.dirty = true;\r\n          this.data.nonce = Math.random();\r\n      };\r\n      VideoTexture.prototype.toJSON = function () {\r\n          if (this.seek >= 0) {\r\n              // the seek value was changed/used\r\n              var ret = JSON.parse(JSON.stringify(_super.prototype.toJSON.call(this)));\r\n              this.seek = -1;\r\n              return ret;\r\n          }\r\n          return _super.prototype.toJSON.call(this);\r\n      };\r\n      VideoTexture.prototype.update = function (videoEvent) {\r\n          if (videoEvent.videoClipId === this.videoClipId) {\r\n              this._status = videoEvent.videoStatus || exports.VideoStatus.NONE;\r\n              this._videoLength = videoEvent.totalVideoLength;\r\n              this._position = videoEvent.currentOffset;\r\n          }\r\n      };\r\n      Object.defineProperty(VideoTexture.prototype, \"position\", {\r\n          get: function () {\r\n              return this._position;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"videoLength\", {\r\n          get: function () {\r\n              return this._videoLength;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(VideoTexture.prototype, \"status\", {\r\n          get: function () {\r\n              return this._status;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], VideoTexture.prototype, \"videoClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"playbackRate\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], VideoTexture.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], VideoTexture.prototype, \"seek\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], VideoTexture.prototype, \"playing\", void 0);\r\n      VideoTexture = __decorate([\r\n          DisposableComponent('engine.VideoTexture', exports.CLASS_ID.VIDEO_TEXTURE),\r\n          __metadata(\"design:paramtypes\", [VideoClip, Object])\r\n      ], VideoTexture);\r\n      return VideoTexture;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var CameraModeArea = /** @class */ (function (_super) {\r\n      __extends(CameraModeArea, _super);\r\n      function CameraModeArea(args) {\r\n          var _this = _super.call(this) || this;\r\n          _this.area = args.area;\r\n          _this.cameraMode = args.cameraMode;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], CameraModeArea.prototype, \"area\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], CameraModeArea.prototype, \"cameraMode\", void 0);\r\n      CameraModeArea = __decorate([\r\n          Component('engine.cameraModeArea', exports.CLASS_ID.CAMERA_MODE_AREA),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], CameraModeArea);\r\n      return CameraModeArea;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AvatarTexture = /** @class */ (function (_super) {\r\n      __extends(AvatarTexture, _super);\r\n      function AvatarTexture(userId, opts) {\r\n          var _this = _super.call(this) || this;\r\n          _this.userId = userId;\r\n          if (opts) {\r\n              for (var i in opts) {\r\n                  var that = _this;\r\n                  that[i] = opts[i];\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarTexture.prototype, \"userId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarTexture.prototype, \"samplingMode\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarTexture.prototype, \"wrap\", void 0);\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarTexture.prototype, \"hasAlpha\", void 0);\r\n      AvatarTexture = __decorate([\r\n          DisposableComponent('engine.texture', exports.CLASS_ID.AVATAR_TEXTURE),\r\n          __metadata(\"design:paramtypes\", [String, Object])\r\n      ], AvatarTexture);\r\n      return AvatarTexture;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var Camera = /** @class */ (function () {\r\n      function Camera() {\r\n          var _this = this;\r\n          /** Camera position, relative to the parcel. */\r\n          this.position = new dist.Vector3();\r\n          /** Camera rotation */\r\n          this.rotation = new dist.Quaternion();\r\n          /** Feet position, relative to the parcel.  */\r\n          this.feetPosition = new dist.Vector3();\r\n          /** Camera position, absolute. */\r\n          this.worldPosition = new dist.Vector3();\r\n          // @internal\r\n          this.lastEventPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventWorldPosition = { x: 0, y: 0, z: 0 };\r\n          // @internal\r\n          this.lastEventRotation = { x: 0, y: 0, z: 0, w: 1.0 };\r\n          // @internal\r\n          this._playerHeight = 1.6;\r\n          // @internal\r\n          this._cameraMode = exports.CameraMode.ThirdPerson;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('positionChanged');\r\n              dcl.subscribe('rotationChanged');\r\n              dcl.subscribe('cameraModeChanged');\r\n              dcl.onEvent(function (event) {\r\n                  switch (event.type) {\r\n                      case 'positionChanged':\r\n                          _this.positionChanged(event.data);\r\n                          break;\r\n                      case 'rotationChanged':\r\n                          _this.rotationChanged(event.data);\r\n                          break;\r\n                      case 'cameraModeChanged':\r\n                          _this.cameraModeChanged(event.data);\r\n                          break;\r\n                  }\r\n              });\r\n          }\r\n          Object.defineProperty(this.position, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.position, 'y', {\r\n              get: function () { return _this.lastEventPosition.y; }\r\n          });\r\n          Object.defineProperty(this.position, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'x', {\r\n              get: function () { return _this.lastEventWorldPosition.x; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'y', {\r\n              get: function () { return _this.lastEventWorldPosition.y; }\r\n          });\r\n          Object.defineProperty(this.worldPosition, 'z', {\r\n              get: function () { return _this.lastEventWorldPosition.z; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'x', {\r\n              get: function () { return _this.lastEventPosition.x; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'y', {\r\n              get: function () { return _this.lastEventPosition.y - _this.playerHeight; }\r\n          });\r\n          Object.defineProperty(this.feetPosition, 'z', {\r\n              get: function () { return _this.lastEventPosition.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'x', {\r\n              get: function () { return _this.lastEventRotation.x; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'y', {\r\n              get: function () { return _this.lastEventRotation.y; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'z', {\r\n              get: function () { return _this.lastEventRotation.z; }\r\n          });\r\n          Object.defineProperty(this.rotation, 'w', {\r\n              get: function () { return _this.lastEventRotation.w; }\r\n          });\r\n      }\r\n      Object.defineProperty(Camera, \"instance\", {\r\n          get: function () {\r\n              if (!Camera._instance) {\r\n                  Camera._instance = new Camera();\r\n              }\r\n              return Camera._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"playerHeight\", {\r\n          /** Player height. */\r\n          get: function () {\r\n              return this._playerHeight;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(Camera.prototype, \"cameraMode\", {\r\n          /** @deprecated Use onCameraModeChangedObservable Observable instead. */\r\n          get: function () {\r\n              return this._cameraMode;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      // @internal\r\n      Camera.prototype.positionChanged = function (e) {\r\n          this.lastEventPosition = e.position;\r\n          this.lastEventWorldPosition = e.cameraPosition;\r\n          this._playerHeight = e.playerHeight;\r\n      };\r\n      // @internal\r\n      Camera.prototype.rotationChanged = function (e) {\r\n          this.lastEventRotation = e.quaternion;\r\n      };\r\n      // @internal\r\n      Camera.prototype.cameraModeChanged = function (e) {\r\n          this._cameraMode = e.cameraMode;\r\n      };\r\n      return Camera;\r\n  }());\n\n  /**\r\n   * @internal\r\n   */\r\n  var QueryPrefix;\r\n  (function (QueryPrefix) {\r\n      QueryPrefix[\"HitFirst\"] = \"rqhf\";\r\n      QueryPrefix[\"HitAll\"] = \"rqha\";\r\n  })(QueryPrefix || (QueryPrefix = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var PhysicsCast = /** @class */ (function () {\r\n      function PhysicsCast() {\r\n          this.queries = {};\r\n      }\r\n      Object.defineProperty(PhysicsCast, \"instance\", {\r\n          get: function () {\r\n              PhysicsCast.ensureInstance();\r\n              return PhysicsCast._instance;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      PhysicsCast.ensureInstance = function () {\r\n          if (!PhysicsCast._instance) {\r\n              PhysicsCast._instance = new PhysicsCast();\r\n          }\r\n      };\r\n      PhysicsCast.prototype.getRayFromCamera = function (distance) {\r\n          var rotation = Camera.instance.rotation;\r\n          var rotationMat = dist.Matrix.Identity();\r\n          rotation.toRotationMatrix(rotationMat);\r\n          var direction = dist.Vector3.TransformCoordinates(dist.Vector3.Forward(), rotationMat);\r\n          var ray = {\r\n              origin: Camera.instance.position,\r\n              direction: direction,\r\n              distance: distance\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.getRayFromPositions = function (from, to) {\r\n          var direction = to.subtract(from);\r\n          var length = direction.length();\r\n          var ray = {\r\n              origin: from,\r\n              direction: direction.normalize(),\r\n              distance: length\r\n          };\r\n          return ray;\r\n      };\r\n      PhysicsCast.prototype.hitFirst = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitFirst + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitFirst', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitAll = function (ray, hitCallback, id) {\r\n          var queryId = typeof id === 'number' ? QueryPrefix.HitAll + id : uuid();\r\n          this.queries[queryId] = hitCallback;\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.query('raycast', { queryId: queryId, queryType: 'HitAll', ray: ray });\r\n          }\r\n      };\r\n      PhysicsCast.prototype.hitFirstAvatar = function (_ray, _hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.hitAllAvatars = function (_ray, _hitCallback) {\r\n          log('not implemented yet');\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitFirstResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      PhysicsCast.prototype.handleRaycastHitAllResponse = function (response) {\r\n          this.queries[response.payload.queryId](response.payload.payload);\r\n          delete this.queries[response.payload.queryId];\r\n      };\r\n      return PhysicsCast;\r\n  }());\n\n  /**\r\n   * @public\r\n   */\r\n  var RaycastEventSystem = /** @class */ (function () {\r\n      function RaycastEventSystem() {\r\n      }\r\n      RaycastEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(RaycastResponse, this, function (event) {\r\n              if (event.payload.queryType === 'HitFirst') {\r\n                  PhysicsCast.instance.handleRaycastHitFirstResponse(event);\r\n              }\r\n              else if (event.payload.queryType === 'HitAll') {\r\n                  PhysicsCast.instance.handleRaycastHitAllResponse(event);\r\n              }\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('raycastResponse');\r\n          }\r\n      };\r\n      RaycastEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('raycastResponse');\r\n          }\r\n      };\r\n      return RaycastEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var PointerEventSystem = /** @class */ (function () {\r\n      function PointerEventSystem() {\r\n      }\r\n      PointerEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(PointerEvent, this, function (event) {\r\n              Input.instance.handlePointerEvent(event.payload);\r\n          });\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('pointerUp');\r\n              dcl.subscribe('pointerDown');\r\n              dcl.subscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      PointerEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('pointerUp');\r\n              dcl.unsubscribe('pointerDown');\r\n              dcl.unsubscribe('actionButtonEvent');\r\n          }\r\n      };\r\n      return PointerEventSystem;\r\n  }());\r\n  /**\r\n   * @public\r\n   */\r\n  var UUIDEventSystem = /** @class */ (function () {\r\n      function UUIDEventSystem() {\r\n          this.handlerMap = {};\r\n      }\r\n      UUIDEventSystem.prototype.activate = function (engine) {\r\n          engine.eventManager.addListener(UUIDEvent, this, this.handleEvent);\r\n          engine.eventManager.addListener(ComponentAdded, this, this.componentAdded);\r\n          engine.eventManager.addListener(ComponentRemoved, this, this.componentRemoved);\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.subscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.deactivate = function () {\r\n          if (typeof dcl !== 'undefined') {\r\n              dcl.unsubscribe('uuidEvent');\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onAddEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.onRemoveEntity = function (entity) {\r\n          for (var componentName in entity.components) {\r\n              var component = entity.components[componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentAdded = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              var component = event.entity.components[event.componentName];\r\n              if (component instanceof OnUUIDEvent) {\r\n                  this.handlerMap[component.uuid] = component;\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.componentRemoved = function (event) {\r\n          if (event.entity.isAddedToEngine()) {\r\n              if (event.component instanceof OnUUIDEvent) {\r\n                  delete this.handlerMap[event.component.uuid];\r\n              }\r\n          }\r\n      };\r\n      UUIDEventSystem.prototype.handleEvent = function (event) {\r\n          if (event.uuid in this.handlerMap) {\r\n              var handler = this.handlerMap[event.uuid];\r\n              if (handler) {\r\n                  if (handler.callback && 'call' in handler.callback) {\r\n                      handler.callback(event.payload);\r\n                  }\r\n              }\r\n          }\r\n      };\r\n      return UUIDEventSystem;\r\n  }());\r\n  /** @internal */\r\n  var raycastEventSystem = new RaycastEventSystem();\r\n  /** @internal */\r\n  var pointerEventSystem = new PointerEventSystem();\r\n  /** @internal */\r\n  var uuidEventSystem = new UUIDEventSystem();\n\n  /**\r\n   * @public\r\n   */\r\n  var AudioClip = /** @class */ (function (_super) {\r\n      __extends(AudioClip, _super);\r\n      function AudioClip(url) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioClip.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioClip.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioClip.prototype, \"loadingCompleteEventId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioClip.prototype, \"volume\", void 0);\r\n      AudioClip = __decorate([\r\n          DisposableComponent('engine.AudioClip', exports.CLASS_ID.AUDIO_CLIP),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], AudioClip);\r\n      return AudioClip;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioSource = /** @class */ (function (_super) {\r\n      __extends(AudioSource, _super);\r\n      function AudioSource(audioClip) {\r\n          var _this = _super.call(this) || this;\r\n          _this.audioClip = audioClip;\r\n          /**\r\n           * Is this clip looping by default?\r\n           */\r\n          _this.loop = false;\r\n          /**\r\n           * Clip's master volume. This volume affects all the AudioSources.\r\n           * Valid ranges from 0 to 1\r\n           */\r\n          _this.volume = 1;\r\n          /**\r\n           * Is this AudioSource playing?\r\n           */\r\n          _this.playing = false;\r\n          /**\r\n           * Pitch, default: 1.0, range from 0.0 to MaxFloat\r\n           */\r\n          _this.pitch = 1.0;\r\n          /**\r\n           * Timestamp of when the playOnce was executed to see if we need to start over the audio\r\n           */\r\n          _this.playedAtTimestamp = Date.now();\r\n          if (!(audioClip instanceof AudioClip)) {\r\n              throw new Error(\"Trying to create AudioSource(AudioClip) with an invalid AudioClip\");\r\n          }\r\n          _this.audioClipId = getComponentId(audioClip);\r\n          return _this;\r\n      }\r\n      /**\r\n       * Disables the looping and plays the current source once.\r\n       * If the sound was playing, it stops and starts over.\r\n       */\r\n      AudioSource.prototype.playOnce = function () {\r\n          this.playing = true;\r\n          this.dirty = true;\r\n          this.playedAtTimestamp = Date.now();\r\n          this.data.nonce = Math.random();\r\n          return this;\r\n      };\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioSource.prototype, \"audioClipId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioSource.prototype, \"loop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"volume\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioSource.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"pitch\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioSource.prototype, \"playedAtTimestamp\", void 0);\r\n      AudioSource = __decorate([\r\n          Component('engine.AudioSource', exports.CLASS_ID.AUDIO_SOURCE),\r\n          __metadata(\"design:paramtypes\", [AudioClip])\r\n      ], AudioSource);\r\n      return AudioSource;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @public\r\n   */\r\n  var AudioStream = /** @class */ (function (_super) {\r\n      __extends(AudioStream, _super);\r\n      function AudioStream(url) {\r\n          var _this = _super.call(this) || this;\r\n          _this.playing = false;\r\n          _this.volume = 1;\r\n          _this.url = url;\r\n          _this.playing = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], AudioStream.prototype, \"url\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AudioStream.prototype, \"playing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AudioStream.prototype, \"volume\", void 0);\r\n      AudioStream = __decorate([\r\n          Component('engine.AudioStream', exports.CLASS_ID.AUDIO_STREAM),\r\n          __metadata(\"design:paramtypes\", [String])\r\n      ], AudioStream);\r\n      return AudioStream;\r\n  }(ObservableComponent));\n\n  /**\r\n   * Gizmo identifiers\r\n   * @public\r\n   */\r\n  exports.Gizmo = void 0;\r\n  (function (Gizmo) {\r\n      Gizmo[\"MOVE\"] = \"MOVE\";\r\n      Gizmo[\"ROTATE\"] = \"ROTATE\";\r\n      Gizmo[\"SCALE\"] = \"SCALE\";\r\n      Gizmo[\"NONE\"] = \"NONE\";\r\n  })(exports.Gizmo || (exports.Gizmo = {}));\r\n  /**\r\n   * This event is triggered after the user finalizes dragging a gizmo.\r\n   * @public\r\n   */\r\n  var OnGizmoEvent = /** @class */ (function (_super) {\r\n      __extends(OnGizmoEvent, _super);\r\n      function OnGizmoEvent() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.type = 'gizmoEvent';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnGizmoEvent.prototype, \"type\", void 0);\r\n      OnGizmoEvent = __decorate([\r\n          Component('engine.gizmoEvent', exports.CLASS_ID.UUID_CALLBACK)\r\n      ], OnGizmoEvent);\r\n      return OnGizmoEvent;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * Enables gizmos in the entity. Gizmos only work in EDITOR, PREVIEW or DEBUG modes.\r\n   * @public\r\n   */\r\n  var Gizmos = /** @class */ (function (_super) {\r\n      __extends(Gizmos, _super);\r\n      function Gizmos() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          /**\r\n           * Enable position gizmo\r\n           */\r\n          _this.position = true;\r\n          /**\r\n           * Enable rotation gizmo\r\n           */\r\n          _this.rotation = true;\r\n          /**\r\n           * Enable scale gizmo\r\n           */\r\n          _this.scale = true;\r\n          /**\r\n           * Cycle through gizmos using click.\r\n           */\r\n          _this.cycle = true;\r\n          /**\r\n           * Align the gizmos to match the local reference system\r\n           */\r\n          _this.localReference = false;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"position\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"rotation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"scale\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"cycle\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], Gizmos.prototype, \"selectedGizmo\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], Gizmos.prototype, \"localReference\", void 0);\r\n      Gizmos = __decorate([\r\n          Component('engine.gizmos', exports.CLASS_ID.GIZMOS)\r\n      ], Gizmos);\r\n      return Gizmos;\r\n  }(ObservableComponent));\n\n  /**\r\n   * @public\r\n   */\r\n  var OnFocus = /** @class */ (function (_super) {\r\n      __extends(OnFocus, _super);\r\n      function OnFocus(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onFocus';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnFocus.prototype, \"type\", void 0);\r\n      OnFocus = __decorate([\r\n          Component('engine.onFocus', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnFocus);\r\n      return OnFocus;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnTextSubmit = /** @class */ (function (_super) {\r\n      __extends(OnTextSubmit, _super);\r\n      function OnTextSubmit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onTextSubmit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnTextSubmit.prototype, \"type\", void 0);\r\n      OnTextSubmit = __decorate([\r\n          Component('engine.onTextSubmit', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnTextSubmit);\r\n      return OnTextSubmit;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnBlur = /** @class */ (function (_super) {\r\n      __extends(OnBlur, _super);\r\n      function OnBlur(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onBlur';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnBlur.prototype, \"type\", void 0);\r\n      OnBlur = __decorate([\r\n          Component('engine.onBlur', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnBlur);\r\n      return OnBlur;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnEnter = /** @class */ (function (_super) {\r\n      __extends(OnEnter, _super);\r\n      function OnEnter(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnEnter.prototype, \"type\", void 0);\r\n      OnEnter = __decorate([\r\n          Component('engine.onEnter', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnEnter);\r\n      return OnEnter;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnChanged = /** @class */ (function (_super) {\r\n      __extends(OnChanged, _super);\r\n      function OnChanged(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onChange';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnChanged.prototype, \"type\", void 0);\r\n      OnChanged = __decorate([\r\n          Component('engine.onChange', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnChanged);\r\n      return OnChanged;\r\n  }(OnUUIDEvent));\r\n  /**\r\n   * @public @deprecated use `OnPointerDown` instead\r\n   */\r\n  var OnClick = /** @class */ (function (_super) {\r\n      __extends(OnClick, _super);\r\n      function OnClick(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'onClick';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnClick.prototype, \"type\", void 0);\r\n      OnClick = __decorate([\r\n          Component('engine.onClick', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnClick);\r\n      return OnClick;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerDown = /** @class */ (function (_super) {\r\n      __extends(OnPointerDown, _super);\r\n      function OnPointerDown(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerDown';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerDown.prototype, \"type\", void 0);\r\n      OnPointerDown = __decorate([\r\n          Component('engine.pointerDown', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerDown);\r\n      return OnPointerDown;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerUp = /** @class */ (function (_super) {\r\n      __extends(OnPointerUp, _super);\r\n      function OnPointerUp(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerUp';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              _this.showFeedback = !(options.showFeedback === false);\r\n              if (options.button) {\r\n                  _this.button = options.button;\r\n              }\r\n              if (options.hoverText) {\r\n                  _this.hoverText = options.hoverText;\r\n              }\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerUp.prototype, \"type\", void 0);\r\n      OnPointerUp = __decorate([\r\n          Component('engine.pointerUp', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerUp);\r\n      return OnPointerUp;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerHoverEnter = /** @class */ (function (_super) {\r\n      __extends(OnPointerHoverEnter, _super);\r\n      function OnPointerHoverEnter(callback, options) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerHoverEnter';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          if (options) {\r\n              if (options.distance) {\r\n                  _this.distance = options.distance;\r\n              }\r\n          }\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerHoverEnter.prototype, \"type\", void 0);\r\n      OnPointerHoverEnter = __decorate([\r\n          Component('engine.pointerHoverEnter', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function, Object])\r\n      ], OnPointerHoverEnter);\r\n      return OnPointerHoverEnter;\r\n  }(OnPointerUUIDEvent));\r\n  /**\r\n   * @public\r\n   */\r\n  var OnPointerHoverExit = /** @class */ (function (_super) {\r\n      __extends(OnPointerHoverExit, _super);\r\n      function OnPointerHoverExit(callback) {\r\n          var _this = _super.call(this, callback) || this;\r\n          _this.type = 'pointerHoverExit';\r\n          // This injection is necessary ONLY in events that are ALWAYS turned on and are\r\n          // not assignable to entities. Like events for the UI elements\r\n          // TODO(Brian): This will be removed when UI gets back to the entity parenting.\r\n          uuidEventSystem.handlerMap[_this.uuid] = _this;\r\n          // Changed default distance value for this component because in most cases we probably\r\n          // don't want for the hover exit event to be limited by a distance, and it default value was too small.\r\n          _this.distance = 160;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.readonly,\r\n          __metadata(\"design:type\", String)\r\n      ], OnPointerHoverExit.prototype, \"type\", void 0);\r\n      OnPointerHoverExit = __decorate([\r\n          Component('engine.pointerHoverExit', exports.CLASS_ID.UUID_CALLBACK),\r\n          __metadata(\"design:paramtypes\", [Function])\r\n      ], OnPointerHoverExit);\r\n      return OnPointerHoverExit;\r\n  }(OnPointerUUIDEvent));\n\n  /**\r\n   * @public\r\n   */\r\n  var UIShape = /** @class */ (function (_super) {\r\n      __extends(UIShape, _super);\r\n      function UIShape(parent) {\r\n          var _this = _super.call(this) || this;\r\n          /**\r\n           * Defines if the entity and its children should be rendered\r\n           */\r\n          _this.name = null;\r\n          _this.visible = true;\r\n          _this.opacity = 1;\r\n          _this.hAlign = 'center';\r\n          _this.vAlign = 'center';\r\n          _this.width = '100px';\r\n          _this.height = '50px';\r\n          _this.positionX = '0px';\r\n          _this.positionY = '0px';\r\n          _this.isPointerBlocker = true;\r\n          if (parent) {\r\n              _this._parent = parent;\r\n              _this.data.parentComponent = getComponentId(parent);\r\n          }\r\n          return _this;\r\n      }\r\n      Object.defineProperty(UIShape.prototype, \"parent\", {\r\n          get: function () {\r\n              return this._parent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      Object.defineProperty(UIShape.prototype, \"parentComponent\", {\r\n          // @internal\r\n          get: function () {\r\n              return this.data.parentComponent;\r\n          },\r\n          enumerable: false,\r\n          configurable: true\r\n      });\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIShape.prototype, \"visible\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIShape.prototype, \"opacity\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIShape.prototype, \"hAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIShape.prototype, \"vAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"width\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"height\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"positionX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.uiValue,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIShape.prototype, \"positionY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIShape.prototype, \"isPointerBlocker\", void 0);\r\n      return UIShape;\r\n  }(ObservableComponent));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIFullScreen = /** @class */ (function (_super) {\r\n      __extends(UIFullScreen, _super);\r\n      function UIFullScreen() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIFullScreen = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_FULLSCREEN_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UIFullScreen);\r\n      return UIFullScreen;\r\n  }(UIShape));\r\n  /**\r\n   * @internal\r\n   * NOTE(Brian): this should be deprecated\r\n   */\r\n  var UIWorldSpace = /** @class */ (function (_super) {\r\n      __extends(UIWorldSpace, _super);\r\n      function UIWorldSpace() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UIWorldSpace = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_WORLD_SPACE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UIWorldSpace);\r\n      return UIWorldSpace;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UICanvas = /** @class */ (function (_super) {\r\n      __extends(UICanvas, _super);\r\n      function UICanvas() {\r\n          return _super.call(this, null) || this;\r\n      }\r\n      UICanvas = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SCREEN_SPACE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [])\r\n      ], UICanvas);\r\n      return UICanvas;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerRect = /** @class */ (function (_super) {\r\n      __extends(UIContainerRect, _super);\r\n      function UIContainerRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.thickness = 0;\r\n          _this.color = dist.Color4.Clear();\r\n          _this.alignmentUsesSize = true;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerRect.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIContainerRect.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerRect.prototype, \"alignmentUsesSize\", void 0);\r\n      UIContainerRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_RECT)\r\n      ], UIContainerRect);\r\n      return UIContainerRect;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  exports.UIStackOrientation = void 0;\r\n  (function (UIStackOrientation) {\r\n      UIStackOrientation[UIStackOrientation[\"VERTICAL\"] = 0] = \"VERTICAL\";\r\n      UIStackOrientation[UIStackOrientation[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\r\n  })(exports.UIStackOrientation || (exports.UIStackOrientation = {}));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIContainerStack = /** @class */ (function (_super) {\r\n      __extends(UIContainerStack, _super);\r\n      function UIContainerStack() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.adaptWidth = true;\r\n          _this.adaptHeight = true;\r\n          _this.color = dist.Color4.Clear();\r\n          _this.stackOrientation = exports.UIStackOrientation.VERTICAL;\r\n          _this.spacing = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerStack.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIContainerStack.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIContainerStack.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerStack.prototype, \"stackOrientation\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIContainerStack.prototype, \"spacing\", void 0);\r\n      UIContainerStack = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_CONTAINER_STACK)\r\n      ], UIContainerStack);\r\n      return UIContainerStack;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIButton = /** @class */ (function (_super) {\r\n      __extends(UIButton, _super);\r\n      function UIButton() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.fontSize = 10;\r\n          _this.fontWeight = 'normal';\r\n          _this.thickness = 0;\r\n          _this.cornerRadius = 0;\r\n          _this.color = dist.Color4.White();\r\n          _this.background = dist.Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.Black();\r\n          _this.text = 'button';\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIButton.prototype, \"fontWeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"thickness\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"cornerRadius\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"background\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIButton.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIButton.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIButton.prototype, \"text\", void 0);\r\n      UIButton = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_BUTTON_SHAPE)\r\n      ], UIButton);\r\n      return UIButton;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIText = /** @class */ (function (_super) {\r\n      __extends(UIText, _super);\r\n      function UIText() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = dist.Color4.White();\r\n          _this.color = dist.Color4.White();\r\n          _this.fontSize = 10;\r\n          _this.fontAutoSize = false;\r\n          _this.value = '';\r\n          _this.lineSpacing = 0;\r\n          _this.lineCount = 0;\r\n          _this.adaptWidth = false;\r\n          _this.adaptHeight = false;\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.Black();\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"fontAutoSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], UIText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"lineSpacing\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"lineCount\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"adaptWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"adaptHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIText.prototype, \"paddingLeft\", void 0);\r\n      UIText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_TEXT_SHAPE)\r\n      ], UIText);\r\n      return UIText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIInputText = /** @class */ (function (_super) {\r\n      __extends(UIInputText, _super);\r\n      function UIInputText(parent) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.outlineWidth = 0;\r\n          _this.outlineColor = dist.Color4.Black();\r\n          _this.color = dist.Color4.Clear();\r\n          _this.fontSize = 10;\r\n          _this.value = '';\r\n          _this.placeholder = '';\r\n          _this.margin = 10;\r\n          _this.hTextAlign = 'left';\r\n          _this.vTextAlign = 'bottom';\r\n          _this.focusedBackground = dist.Color4.Black();\r\n          _this.textWrapping = false;\r\n          _this.shadowBlur = 0;\r\n          _this.shadowOffsetX = 0;\r\n          _this.shadowOffsetY = 0;\r\n          _this.shadowColor = dist.Color4.White();\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onTextSubmit = null;\r\n          _this.onChanged = null;\r\n          _this.onFocus = null;\r\n          _this.onBlur = null;\r\n          _this.onTextChanged = new OnChanged(function (e) {\r\n              var _a = e.value, value = _a.value, isSubmit = _a.isSubmit;\r\n              // NOTE: here we want to keep the same `dirty` state as before changing `this.value`\r\n              // because changing `this.value` will set the component as `dirty` and send a message to the renderer with it value\r\n              // and that message is unnecesary (if the only thing that have changed is `this.value`) since that new value has come from the renderer itself\r\n              var isDirty = _this.dirty;\r\n              _this.value = value;\r\n              _this.dirty = isDirty;\r\n              if (isSubmit && _this.onTextSubmit) {\r\n                  var onSubmitValue = { text: value };\r\n                  _this.onTextSubmit.callback(onSubmitValue);\r\n              }\r\n              else if (!isSubmit && _this.onChanged) {\r\n                  var onChangeValue = {\r\n                      value: value,\r\n                      pointerId: e.pointerId\r\n                  };\r\n                  _this.onChanged.callback(onChangeValue);\r\n              }\r\n          });\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"outlineWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"outlineColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"color\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"fontSize\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Font)\r\n      ], UIInputText.prototype, \"font\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"value\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"placeholder\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"margin\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"hTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], UIInputText.prototype, \"vTextAlign\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"focusedBackground\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIInputText.prototype, \"textWrapping\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowBlur\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowOffsetX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"shadowOffsetY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIInputText.prototype, \"shadowColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIInputText.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", OnChanged)\r\n      ], UIInputText.prototype, \"onTextChanged\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIInputText.prototype, \"onFocus\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIInputText.prototype, \"onBlur\", void 0);\r\n      UIInputText = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_INPUT_TEXT_SHAPE),\r\n          __metadata(\"design:paramtypes\", [Object])\r\n      ], UIInputText);\r\n      return UIInputText;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIImage = /** @class */ (function (_super) {\r\n      __extends(UIImage, _super);\r\n      function UIImage(parent, source) {\r\n          var _this = _super.call(this, parent) || this;\r\n          _this.sourceLeft = 0;\r\n          _this.sourceTop = 0;\r\n          _this.sourceWidth = 1;\r\n          _this.sourceHeight = 1;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.sizeInPixels = true;\r\n          _this.onClick = null;\r\n          _this.source = source;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceWidth\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"sourceHeight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.component,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIImage.prototype, \"source\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIImage.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIImage.prototype, \"sizeInPixels\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIImage.prototype, \"onClick\", void 0);\r\n      UIImage = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_IMAGE_SHAPE),\r\n          __metadata(\"design:paramtypes\", [UIShape, Object])\r\n      ], UIImage);\r\n      return UIImage;\r\n  }(UIShape));\r\n  /**\r\n   * @public\r\n   */\r\n  var UIScrollRect = /** @class */ (function (_super) {\r\n      __extends(UIScrollRect, _super);\r\n      function UIScrollRect() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.valueX = 0;\r\n          _this.valueY = 0;\r\n          _this.backgroundColor = dist.Color4.Clear();\r\n          _this.isHorizontal = false;\r\n          _this.isVertical = false;\r\n          _this.paddingTop = 0;\r\n          _this.paddingRight = 0;\r\n          _this.paddingBottom = 0;\r\n          _this.paddingLeft = 0;\r\n          _this.onChanged = null;\r\n          return _this;\r\n      }\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"valueX\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"valueY\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", dist.Color4)\r\n      ], UIScrollRect.prototype, \"backgroundColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIScrollRect.prototype, \"isHorizontal\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], UIScrollRect.prototype, \"isVertical\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingTop\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingRight\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingBottom\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], UIScrollRect.prototype, \"paddingLeft\", void 0);\r\n      __decorate([\r\n          OnUUIDEvent.uuidEvent,\r\n          __metadata(\"design:type\", Object)\r\n      ], UIScrollRect.prototype, \"onChanged\", void 0);\r\n      UIScrollRect = __decorate([\r\n          DisposableComponent('engine.shape', exports.CLASS_ID.UI_SLIDER_SHAPE)\r\n      ], UIScrollRect);\r\n      return UIScrollRect;\r\n  }(UIShape));\n\n  /**\r\n   * @public\r\n   */\r\n  var AvatarShape = /** @class */ (function (_super) {\r\n      __extends(AvatarShape, _super);\r\n      function AvatarShape() {\r\n          var _this = _super !== null && _super.apply(this, arguments) || this;\r\n          _this.useDummyModel = false;\r\n          _this.talking = false;\r\n          return _this;\r\n      }\r\n      AvatarShape_1 = AvatarShape;\r\n      AvatarShape.Dummy = function () {\r\n          var avatarShape = new AvatarShape_1();\r\n          avatarShape.useDummyModel = true;\r\n          return avatarShape;\r\n      };\r\n      var AvatarShape_1;\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"id\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"name\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"expressionTriggerId\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Number)\r\n      ], AvatarShape.prototype, \"expressionTriggerTimestamp\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", String)\r\n      ], AvatarShape.prototype, \"bodyShape\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarShape.prototype, \"wearables\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Array)\r\n      ], AvatarShape.prototype, \"emotes\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"skinColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"hairColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Object)\r\n      ], AvatarShape.prototype, \"eyeColor\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarShape.prototype, \"useDummyModel\", void 0);\r\n      __decorate([\r\n          ObservableComponent.field,\r\n          __metadata(\"design:type\", Boolean)\r\n      ], AvatarShape.prototype, \"talking\", void 0);\r\n      AvatarShape = AvatarShape_1 = __decorate([\r\n          Component('engine.avatarShape', exports.CLASS_ID.AVATAR_SHAPE)\r\n      ], AvatarShape);\r\n      return AvatarShape;\r\n  }(ObservableComponent));\n\n  var communicationsController = null;\r\n  var communicationsControllerPromise = null;\r\n  var _messageObserver = null;\r\n  /**\r\n   * @internal\r\n   */\r\n  function getMessageObserver() {\r\n      if (!_messageObserver) {\r\n          _messageObserver = new Observable();\r\n      }\r\n      return _messageObserver;\r\n  }\r\n  function ensureCommunicationsController() {\r\n      if (!communicationsControllerPromise) {\r\n          communicationsControllerPromise = dcl.loadModule('@decentraland/CommunicationsController', {});\r\n          void communicationsControllerPromise.then(function ($) {\r\n              communicationsController = $;\r\n          });\r\n          var observer_1 = getMessageObserver();\r\n          dcl.subscribe('comms');\r\n          dcl.onEvent(function (event) {\r\n              if (event.type === 'comms') {\r\n                  observer_1.notifyObservers(event.data);\r\n              }\r\n          });\r\n      }\r\n      return communicationsControllerPromise;\r\n  }\r\n  /**\r\n   * @public\r\n   */\r\n  var MessageBus = /** @class */ (function () {\r\n      function MessageBus() {\r\n          var _this = this;\r\n          this.messageQueue = [];\r\n          this.connected = false;\r\n          this.flushing = false;\r\n          void ensureCommunicationsController().then(function () {\r\n              _this.connected = true;\r\n              _this.flush();\r\n          });\r\n      }\r\n      MessageBus.prototype.on = function (message, callback) {\r\n          return getMessageObserver().add(function (e) {\r\n              try {\r\n                  var m = JSON.parse(e.message);\r\n                  if (m.message === message) {\r\n                      callback(m.payload, e.sender);\r\n                  }\r\n              }\r\n              catch (e) {\r\n                  dcl.error('Error parsing comms message ' + (e.message || ''), e);\r\n              }\r\n          });\r\n      };\r\n      // @internal\r\n      MessageBus.prototype.sendRaw = function (message) {\r\n          this.messageQueue.push(message);\r\n          if (this.connected) {\r\n              this.flush();\r\n          }\r\n      };\r\n      MessageBus.prototype.emit = function (message, payload) {\r\n          var messageToSend = JSON.stringify({ message: message, payload: payload });\r\n          this.sendRaw(messageToSend);\r\n          getMessageObserver().notifyObservers({\r\n              message: messageToSend,\r\n              sender: 'self'\r\n          });\r\n      };\r\n      MessageBus.prototype.flush = function () {\r\n          var _this = this;\r\n          if (this.messageQueue.length === 0)\r\n              return;\r\n          if (!this.connected)\r\n              return;\r\n          if (!communicationsController)\r\n              return;\r\n          if (this.flushing)\r\n              return;\r\n          var message = this.messageQueue.shift();\r\n          this.flushing = true;\r\n          dcl.callRpc(communicationsController.rpcHandle, 'send', [message]).then(function (_) {\r\n              _this.flushing = false;\r\n              _this.flush();\r\n          }, function (e) {\r\n              _this.flushing = false;\r\n              error('Error flushing MessageBus', e);\r\n          });\r\n      };\r\n      return MessageBus;\r\n  }());\n\n  // CORE DEPENDENCIES\r\n  var entity = new Entity('scene');\r\n  entity.uuid = '0';\r\n  // Initialize engine\r\n  /** @public */\r\n  var engine = new Engine(entity);\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  DisposableComponent.engine = engine;\r\n  // Initialize Decentraland interface\r\n  if (typeof dcl !== 'undefined') {\r\n      engine.addSystem(new DecentralandSynchronizationSystem(dcl), Infinity);\r\n      _initEventObservables(dcl);\r\n  }\r\n  // Initialize UUID Events system\r\n  engine.addSystem(uuidEventSystem);\r\n  // Initialize Pointer Events System\r\n  engine.addSystem(pointerEventSystem);\r\n  // Initialize Raycast Events System\r\n  engine.addSystem(raycastEventSystem);\n\n  exports.AVATAR_OBSERVABLE = AVATAR_OBSERVABLE;\n  exports.Angle = dist.Angle;\n  exports.AnimationState = AnimationState;\n  exports.Animator = Animator;\n  exports.Arc2 = dist.Arc2;\n  exports.AttachToAvatar = AttachToAvatar;\n  exports.Attachable = Attachable;\n  exports.AudioClip = AudioClip;\n  exports.AudioSource = AudioSource;\n  exports.AudioStream = AudioStream;\n  exports.AvatarModifierArea = AvatarModifierArea;\n  exports.AvatarShape = AvatarShape;\n  exports.AvatarTexture = AvatarTexture;\n  exports.Axis = dist.Axis;\n  exports.BasicMaterial = BasicMaterial;\n  exports.BezierCurve = dist.BezierCurve;\n  exports.Billboard = Billboard;\n  exports.BoxShape = BoxShape;\n  exports.Camera = Camera;\n  exports.CameraModeArea = CameraModeArea;\n  exports.CircleShape = CircleShape;\n  exports.Color3 = dist.Color3;\n  exports.Color4 = dist.Color4;\n  exports.Component = Component;\n  exports.ComponentAdded = ComponentAdded;\n  exports.ComponentGroup = ComponentGroup;\n  exports.ComponentRemoved = ComponentRemoved;\n  exports.ConeShape = ConeShape;\n  exports.Curve3 = dist.Curve3;\n  exports.CylinderShape = CylinderShape;\n  exports.DEG2RAD = dist.DEG2RAD;\n  exports.DisposableComponent = DisposableComponent;\n  exports.DisposableComponentCreated = DisposableComponentCreated;\n  exports.DisposableComponentRemoved = DisposableComponentRemoved;\n  exports.DisposableComponentUpdated = DisposableComponentUpdated;\n  exports.Engine = Engine;\n  exports.Entity = Entity;\n  exports.Epsilon = dist.Epsilon;\n  exports.EventConstructor = EventConstructor;\n  exports.EventManager = EventManager;\n  exports.Font = Font;\n  exports.Frustum = dist.Frustum;\n  exports.GLTFShape = GLTFShape;\n  exports.Gizmos = Gizmos;\n  exports.GlobalPointerDown = GlobalPointerDown;\n  exports.GlobalPointerUp = GlobalPointerUp;\n  exports.Input = Input;\n  exports.Material = Material;\n  exports.Matrix = dist.Matrix;\n  exports.MessageBus = MessageBus;\n  exports.MultiObserver = MultiObserver;\n  exports.NFTShape = NFTShape;\n  exports.OBJShape = OBJShape;\n  exports.Observable = Observable;\n  exports.ObservableComponent = ObservableComponent;\n  exports.Observer = Observer;\n  exports.ObserverEventState = ObserverEventState;\n  exports.OnAnimationEnd = OnAnimationEnd;\n  exports.OnBlur = OnBlur;\n  exports.OnChanged = OnChanged;\n  exports.OnClick = OnClick;\n  exports.OnEnter = OnEnter;\n  exports.OnFocus = OnFocus;\n  exports.OnGizmoEvent = OnGizmoEvent;\n  exports.OnPointerDown = OnPointerDown;\n  exports.OnPointerHoverEnter = OnPointerHoverEnter;\n  exports.OnPointerHoverExit = OnPointerHoverExit;\n  exports.OnPointerLock = OnPointerLock;\n  exports.OnPointerUUIDEvent = OnPointerUUIDEvent;\n  exports.OnPointerUp = OnPointerUp;\n  exports.OnTextSubmit = OnTextSubmit;\n  exports.OnUUIDEvent = OnUUIDEvent;\n  exports.Orientation = dist.Orientation;\n  exports.ParentChanged = ParentChanged;\n  exports.Path2 = dist.Path2;\n  exports.Path3D = dist.Path3D;\n  exports.PhysicsCast = PhysicsCast;\n  exports.Plane = dist.Plane;\n  exports.PlaneShape = PlaneShape;\n  exports.PointerEvent = PointerEvent;\n  exports.PointerEventComponent = PointerEventComponent;\n  exports.PointerEventSystem = PointerEventSystem;\n  exports.Quaternion = dist.Quaternion;\n  exports.RAD2DEG = dist.RAD2DEG;\n  exports.RaycastEventSystem = RaycastEventSystem;\n  exports.RaycastResponse = RaycastResponse;\n  exports.Scalar = dist.Scalar;\n  exports.Shape = Shape;\n  exports.Size = dist.Size;\n  exports.SmartItem = SmartItem;\n  exports.Space = dist.Space;\n  exports.SphereShape = SphereShape;\n  exports.Subscription = Subscription;\n  exports.TextShape = TextShape;\n  exports.Texture = Texture;\n  exports.ToGammaSpace = dist.ToGammaSpace;\n  exports.ToLinearSpace = dist.ToLinearSpace;\n  exports.Transform = Transform;\n  exports.UIButton = UIButton;\n  exports.UICanvas = UICanvas;\n  exports.UIContainerRect = UIContainerRect;\n  exports.UIContainerStack = UIContainerStack;\n  exports.UIFullScreen = UIFullScreen;\n  exports.UIImage = UIImage;\n  exports.UIInputText = UIInputText;\n  exports.UIScrollRect = UIScrollRect;\n  exports.UIShape = UIShape;\n  exports.UIText = UIText;\n  exports.UIValue = UIValue;\n  exports.UIWorldSpace = UIWorldSpace;\n  exports.UUIDEvent = UUIDEvent;\n  exports.UUIDEventSystem = UUIDEventSystem;\n  exports.Vector2 = dist.Vector2;\n  exports.Vector3 = dist.Vector3;\n  exports.Vector4 = dist.Vector4;\n  exports.VideoClip = VideoClip;\n  exports.VideoTexture = VideoTexture;\n  exports._initEventObservables = _initEventObservables;\n  exports.buildArray = buildArray$1;\n  exports.engine = engine;\n  exports.error = error;\n  exports.executeTask = executeTask;\n  exports.getComponentClassId = getComponentClassId;\n  exports.getComponentId = getComponentId;\n  exports.getComponentName = getComponentName;\n  exports.getMessageObserver = getMessageObserver;\n  exports.isDisposableComponent = isDisposableComponent;\n  exports.log = log;\n  exports.newId = newId;\n  exports.onCameraModeChangedObservable = onCameraModeChangedObservable;\n  exports.onEnterScene = onEnterScene;\n  exports.onEnterSceneObservable = onEnterSceneObservable;\n  exports.onIdleStateChangedObservable = onIdleStateChangedObservable;\n  exports.onLeaveScene = onLeaveScene;\n  exports.onLeaveSceneObservable = onLeaveSceneObservable;\n  exports.onPlayerClickedObservable = onPlayerClickedObservable;\n  exports.onPlayerConnectedObservable = onPlayerConnectedObservable;\n  exports.onPlayerDisconnectedObservable = onPlayerDisconnectedObservable;\n  exports.onPlayerExpressionObservable = onPlayerExpressionObservable;\n  exports.onPointerLockedStateChange = onPointerLockedStateChange;\n  exports.onProfileChanged = onProfileChanged;\n  exports.onRealmChangedObservable = onRealmChangedObservable;\n  exports.onSceneReadyObservable = onSceneReadyObservable;\n  exports.onVideoEvent = onVideoEvent;\n  exports.openExternalURL = openExternalURL;\n  exports.openNFTDialog = openNFTDialog;\n  exports.pointerEventSystem = pointerEventSystem;\n  exports.raycastEventSystem = raycastEventSystem;\n  exports.teleportTo = teleportTo;\n  exports.uuid = uuid;\n  exports.uuidEventSystem = uuidEventSystem;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n}(this.self = this.self || {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",
    "sha256": "e0cff5c66bb5761f5c83f8496a5f0fee2cc32bc8944df3f1ab58754478a89919"
  },
  {
    "path": "src\\game.ts",
    "content": "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar __values = (this && this.__values) || function(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n};\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/component/itransformcomponent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/math/interpolation\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Interpolate = exports.InterpolationType = void 0;\r\n    var InterpolationType;\r\n    (function (InterpolationType) {\r\n        InterpolationType[InterpolationType[\"LINEAR\"] = 0] = \"LINEAR\";\r\n        InterpolationType[InterpolationType[\"EASEINQUAD\"] = 1] = \"EASEINQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEOUTQUAD\"] = 2] = \"EASEOUTQUAD\";\r\n        InterpolationType[InterpolationType[\"EASEQUAD\"] = 3] = \"EASEQUAD\";\r\n    })(InterpolationType = exports.InterpolationType || (exports.InterpolationType = {}));\r\n    function Interpolate(type, t) {\r\n        switch (type) {\r\n            case InterpolationType.LINEAR:\r\n                return InterpolateLinear(t);\r\n            case InterpolationType.EASEINQUAD:\r\n                return InterpolateEaseInQuad(t);\r\n            case InterpolationType.EASEOUTQUAD:\r\n                return InterpolateEaseOutQuad(t);\r\n            case InterpolationType.EASEQUAD:\r\n                return InterpolateEaseQuad(t);\r\n            default:\r\n                return InterpolateLinear(t);\r\n        }\r\n    }\r\n    exports.Interpolate = Interpolate;\r\n    function InterpolateLinear(t) {\r\n        return t;\r\n    }\r\n    function InterpolateEaseInQuad(t) {\r\n        return t * t;\r\n    }\r\n    function InterpolateEaseOutQuad(t) {\r\n        return t * (2 - t);\r\n    }\r\n    function InterpolateEaseQuad(t) {\r\n        return (t * t) / (2.0 * (t * t - t) + 1.0);\r\n    }\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/component/rotate\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\", \"node_modules/decentraland-ecs-utils/transform/math/interpolation\"], function (require, exports, transfromSystem_1, interpolation_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.RotateTransformComponent = void 0;\r\n    /**\r\n     * Component to rotate entity from one rotation (start) to another (end) in an amount of time\r\n     */\r\n    var RotateTransformComponent = /** @class */ (function () {\r\n        /**\r\n         * Create a RotateTransformComponent instance to add as a component to a Entity\r\n         * @param start starting rotation\r\n         * @param end ending rotation\r\n         * @param duration duration (in seconds) of start to end rotation\r\n         * @param onFinishCallback called when rotation ends\r\n         * @param interpolationType type of interpolation to be used (default: LINEAR)\r\n         */\r\n        function RotateTransformComponent(start, end, duration, onFinishCallback, interpolationType) {\r\n            if (interpolationType === void 0) { interpolationType = interpolation_1.InterpolationType.LINEAR; }\r\n            this.start = start;\r\n            this.end = end;\r\n            this.normalizedTime = 0;\r\n            this.lerpTime = 0;\r\n            this.onFinishCallback = onFinishCallback;\r\n            this.interpolationType = interpolationType;\r\n            if (duration != 0) {\r\n                this.speed = 1 / duration;\r\n            }\r\n            else {\r\n                this.speed = 0;\r\n                this.normalizedTime = 1;\r\n                this.lerpTime = 1;\r\n            }\r\n            transfromSystem_1.TransformSystem.createAndAddToEngine();\r\n        }\r\n        RotateTransformComponent.prototype.update = function (dt) {\r\n            this.normalizedTime = Scalar.Clamp(this.normalizedTime + dt * this.speed, 0, 1);\r\n            this.lerpTime = (0, interpolation_1.Interpolate)(this.interpolationType, this.normalizedTime);\r\n        };\r\n        RotateTransformComponent.prototype.hasFinished = function () {\r\n            return this.normalizedTime >= 1;\r\n        };\r\n        RotateTransformComponent.prototype.assignValueToTransform = function (transform) {\r\n            transform.rotation = Quaternion.Slerp(this.start, this.end, this.lerpTime);\r\n        };\r\n        RotateTransformComponent = __decorate([\r\n            Component('rotateTransformComponent')\r\n        ], RotateTransformComponent);\r\n        return RotateTransformComponent;\r\n    }());\r\n    exports.RotateTransformComponent = RotateTransformComponent;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/component/scale\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\", \"node_modules/decentraland-ecs-utils/transform/math/interpolation\"], function (require, exports, transfromSystem_2, interpolation_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ScaleTransformComponent = void 0;\r\n    /**\r\n     * Component to scale entity from one value (start) to another (end) in an amount of time\r\n     */\r\n    var ScaleTransformComponent = /** @class */ (function () {\r\n        /**\r\n         * Create a ScaleTransformComponent instance to add as a component to a Entity\r\n         * @param start starting scale\r\n         * @param end ending scale\r\n         * @param duration duration (in seconds) of start to end scaling\r\n         * @param onFinishCallback called when scaling ends\r\n         * @param interpolationType type of interpolation to be used (default: LINEAR)\r\n         */\r\n        function ScaleTransformComponent(start, end, duration, onFinishCallback, interpolationType) {\r\n            if (interpolationType === void 0) { interpolationType = interpolation_2.InterpolationType.LINEAR; }\r\n            this.start = start;\r\n            this.end = end;\r\n            this.normalizedTime = 0;\r\n            this.lerpTime = 0;\r\n            this.onFinishCallback = onFinishCallback;\r\n            this.interpolationType = interpolationType;\r\n            if (duration != 0) {\r\n                this.speed = 1 / duration;\r\n            }\r\n            else {\r\n                this.speed = 0;\r\n                this.normalizedTime = 1;\r\n                this.lerpTime = 1;\r\n            }\r\n            transfromSystem_2.TransformSystem.createAndAddToEngine();\r\n        }\r\n        ScaleTransformComponent.prototype.update = function (dt) {\r\n            this.normalizedTime = Scalar.Clamp(this.normalizedTime + dt * this.speed, 0, 1);\r\n            this.lerpTime = (0, interpolation_2.Interpolate)(this.interpolationType, this.normalizedTime);\r\n        };\r\n        ScaleTransformComponent.prototype.hasFinished = function () {\r\n            return this.normalizedTime >= 1;\r\n        };\r\n        ScaleTransformComponent.prototype.assignValueToTransform = function (transform) {\r\n            transform.scale = Vector3.Lerp(this.start, this.end, this.lerpTime);\r\n        };\r\n        ScaleTransformComponent = __decorate([\r\n            Component('scaleTransformComponent')\r\n        ], ScaleTransformComponent);\r\n        return ScaleTransformComponent;\r\n    }());\r\n    exports.ScaleTransformComponent = ScaleTransformComponent;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/component/followpath\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\"], function (require, exports, transfromSystem_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.FollowPathComponent = void 0;\r\n    /**\r\n     * Component to move a entity down a fixed path in an amount of time\r\n     */\r\n    var FollowPathComponent = /** @class */ (function () {\r\n        /**\r\n         * Create a FollowPathComponent instance to add as a component to a Entity\r\n         * @param points array of points for the path\r\n         * @param duration duration of the movement through the path\r\n         * @param onFinishCallback called when movement ends\r\n         * @param onPointReachedCallback called everytime an entity reaches a point of the path\r\n         */\r\n        function FollowPathComponent(points, duration, onFinishCallback, onPointReachedCallback) {\r\n            this.speed = [];\r\n            this.normalizedTime = 0;\r\n            this.currentIndex = 0;\r\n            this.points = points;\r\n            this.onFinishCallback = onFinishCallback;\r\n            this.onPointReachedCallback = onPointReachedCallback;\r\n            if (points.length < 2) {\r\n                throw new Error('At least 2 points are needed for FollowPathComponent.');\r\n            }\r\n            if (duration > 0) {\r\n                var sqTotalDist = 0;\r\n                var sqPointsDist = [];\r\n                for (var i = 0; i < points.length - 1; i++) {\r\n                    var sqDist = Vector3.DistanceSquared(points[i], points[i + 1]);\r\n                    sqTotalDist += sqDist;\r\n                    sqPointsDist.push(sqDist);\r\n                }\r\n                for (var i = 0; i < sqPointsDist.length; i++) {\r\n                    this.speed.push(1 / ((sqPointsDist[i] / sqTotalDist) * duration));\r\n                }\r\n            }\r\n            else {\r\n                this.normalizedTime = 1;\r\n                this.currentIndex = points.length - 2;\r\n            }\r\n            transfromSystem_3.TransformSystem.createAndAddToEngine();\r\n        }\r\n        FollowPathComponent.prototype.update = function (dt) {\r\n            this.normalizedTime = Scalar.Clamp(this.normalizedTime + dt * this.speed[this.currentIndex], 0, 1);\r\n            if (this.normalizedTime >= 1 &&\r\n                this.currentIndex < this.points.length - 2) {\r\n                this.currentIndex++;\r\n                this.normalizedTime = 0;\r\n                if (this.onPointReachedCallback &&\r\n                    this.currentIndex < this.points.length - 1)\r\n                    this.onPointReachedCallback(this.points[this.currentIndex], this.points[this.currentIndex + 1]);\r\n            }\r\n        };\r\n        FollowPathComponent.prototype.hasFinished = function () {\r\n            return (this.currentIndex >= this.points.length - 2 && this.normalizedTime >= 1);\r\n        };\r\n        FollowPathComponent.prototype.assignValueToTransform = function (transform) {\r\n            transform.position = Vector3.Lerp(this.points[this.currentIndex], this.points[this.currentIndex + 1], this.normalizedTime);\r\n        };\r\n        FollowPathComponent = __decorate([\r\n            Component('followPathComponent')\r\n        ], FollowPathComponent);\r\n        return FollowPathComponent;\r\n    }());\r\n    exports.FollowPathComponent = FollowPathComponent;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/component/keeprotating\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\"], function (require, exports, transfromSystem_4) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.KeepRotatingComponent = void 0;\r\n    /**\r\n     * Component to rotate entity indefinitely until stop is called\r\n     */\r\n    var KeepRotatingComponent = /** @class */ (function () {\r\n        /**\r\n         * Rotates an entity continuously. The entity will keep rotating forever until it's explicitly stopped or the component is removed.\r\n         * @param rotationVelocity a quaternion describing the desired rotation to perform each second second\r\n         * @param onFinishCallback called when rotation ends\r\n         */\r\n        function KeepRotatingComponent(rotationVelocity, onFinishCallback) {\r\n            this.rotationVelocity = rotationVelocity;\r\n            this.onFinishCallback = onFinishCallback;\r\n            this.rotation = Quaternion.Identity;\r\n            this.finished = false;\r\n            transfromSystem_4.TransformSystem.createAndAddToEngine();\r\n        }\r\n        KeepRotatingComponent.prototype.update = function (dt) {\r\n            this.rotation = Quaternion.Slerp(Quaternion.Identity, this.rotationVelocity, dt);\r\n        };\r\n        KeepRotatingComponent.prototype.hasFinished = function () {\r\n            return this.finished;\r\n        };\r\n        KeepRotatingComponent.prototype.assignValueToTransform = function (transform) {\r\n            transform.rotation = transform.rotation.multiply(this.rotation);\r\n        };\r\n        KeepRotatingComponent.prototype.stop = function () {\r\n            this.finished = true;\r\n        };\r\n        KeepRotatingComponent = __decorate([\r\n            Component('keepRotatingComponent')\r\n        ], KeepRotatingComponent);\r\n        return KeepRotatingComponent;\r\n    }());\r\n    exports.KeepRotatingComponent = KeepRotatingComponent;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/component/move\", \"node_modules/decentraland-ecs-utils/transform/component/rotate\", \"node_modules/decentraland-ecs-utils/transform/component/scale\", \"node_modules/decentraland-ecs-utils/transform/component/followpath\", \"node_modules/decentraland-ecs-utils/transform/component/keeprotating\"], function (require, exports, move_1, rotate_1, scale_1, followpath_1, keeprotating_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.TransformSystem = void 0;\r\n    var TransformSystem = /** @class */ (function () {\r\n        function TransformSystem() {\r\n            this._components = [];\r\n            this._componentGroups = [];\r\n            TransformSystem._instance = this;\r\n            this._components.push(move_1.MoveTransformComponent);\r\n            this._componentGroups.push(engine.getComponentGroup(move_1.MoveTransformComponent, Transform));\r\n            this._components.push(rotate_1.RotateTransformComponent);\r\n            this._componentGroups.push(engine.getComponentGroup(rotate_1.RotateTransformComponent, Transform));\r\n            this._components.push(scale_1.ScaleTransformComponent);\r\n            this._componentGroups.push(engine.getComponentGroup(scale_1.ScaleTransformComponent, Transform));\r\n            this._components.push(followpath_1.FollowPathComponent);\r\n            this._componentGroups.push(engine.getComponentGroup(followpath_1.FollowPathComponent, Transform));\r\n            this._components.push(keeprotating_1.KeepRotatingComponent);\r\n            this._componentGroups.push(engine.getComponentGroup(keeprotating_1.KeepRotatingComponent, Transform));\r\n        }\r\n        TransformSystem.createAndAddToEngine = function () {\r\n            if (this._instance == null) {\r\n                this._instance = new TransformSystem();\r\n                engine.addSystem(this._instance);\r\n            }\r\n            return this._instance;\r\n        };\r\n        TransformSystem.registerCustomComponent = function (component) {\r\n            this.createAndAddToEngine()._components.push(component);\r\n        };\r\n        TransformSystem.prototype.update = function (dt) {\r\n            for (var i = 0; i < this._components.length; i++) {\r\n                this.updateComponent(dt, this._components[i], this._componentGroups[i]);\r\n            }\r\n        };\r\n        TransformSystem.prototype.updateComponent = function (dt, component, group) {\r\n            group.entities.forEach(function (entity) {\r\n                var transform = entity.getComponent(Transform);\r\n                var comp = entity.getComponent(component);\r\n                comp.update(dt);\r\n                comp.assignValueToTransform(transform);\r\n                if (comp.hasFinished()) {\r\n                    entity.removeComponent(comp);\r\n                    if (comp.onFinishCallback != null)\r\n                        comp.onFinishCallback();\r\n                }\r\n            });\r\n        };\r\n        TransformSystem._instance = null;\r\n        return TransformSystem;\r\n    }());\r\n    exports.TransformSystem = TransformSystem;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/transform/component/move\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\", \"node_modules/decentraland-ecs-utils/transform/math/interpolation\"], function (require, exports, transfromSystem_5, interpolation_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MoveTransformComponent = void 0;\r\n    /**\r\n     * Component to translate entity from one position (start) to another (end) in an amount of time\r\n     */\r\n    var MoveTransformComponent = /** @class */ (function () {\r\n        /**\r\n         * Create a MoveTransformComponent instance to add as a component to a Entity\r\n         * @param start starting position\r\n         * @param end ending position\r\n         * @param duration duration (in seconds) of start to end translation\r\n         * @param onFinishCallback called when translation ends\r\n         * @param interpolationType type of interpolation to be used (default: LINEAR)\r\n         */\r\n        function MoveTransformComponent(start, end, duration, onFinishCallback, interpolationType) {\r\n            if (interpolationType === void 0) { interpolationType = interpolation_3.InterpolationType.LINEAR; }\r\n            this.start = start;\r\n            this.end = end;\r\n            this.normalizedTime = 0;\r\n            this.lerpTime = 0;\r\n            this.onFinishCallback = onFinishCallback;\r\n            this.interpolationType = interpolationType;\r\n            if (duration != 0) {\r\n                this.speed = 1 / duration;\r\n            }\r\n            else {\r\n                this.speed = 0;\r\n                this.normalizedTime = 1;\r\n                this.lerpTime = 1;\r\n            }\r\n            transfromSystem_5.TransformSystem.createAndAddToEngine();\r\n        }\r\n        MoveTransformComponent.prototype.update = function (dt) {\r\n            this.normalizedTime = Scalar.Clamp(this.normalizedTime + dt * this.speed, 0, 1);\r\n            this.lerpTime = (0, interpolation_3.Interpolate)(this.interpolationType, this.normalizedTime);\r\n        };\r\n        MoveTransformComponent.prototype.hasFinished = function () {\r\n            return this.normalizedTime >= 1;\r\n        };\r\n        MoveTransformComponent.prototype.assignValueToTransform = function (transform) {\r\n            transform.position = Vector3.Lerp(this.start, this.end, this.lerpTime);\r\n        };\r\n        MoveTransformComponent = __decorate([\r\n            Component('moveTransformComponent')\r\n        ], MoveTransformComponent);\r\n        return MoveTransformComponent;\r\n    }());\r\n    exports.MoveTransformComponent = MoveTransformComponent;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/toggle/toggleComponent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ToggleComponent = exports.ToggleState = void 0;\r\n    var ToggleState;\r\n    (function (ToggleState) {\r\n        ToggleState[ToggleState[\"Off\"] = 0] = \"Off\";\r\n        ToggleState[ToggleState[\"On\"] = 1] = \"On\";\r\n    })(ToggleState = exports.ToggleState || (exports.ToggleState = {}));\r\n    /**\r\n     * Toggle component for entities with two states (ON or OFF)\r\n     */\r\n    var ToggleComponent = /** @class */ (function () {\r\n        /**\r\n         * Create an instance of a ToggleComponent\r\n         * @param startingState starting state of the toggle (ON or OFF)\r\n         * @param onValueChangedCallback called when toggle state changed\r\n         */\r\n        function ToggleComponent(startingState, onValueChangedCallback) {\r\n            if (startingState === void 0) { startingState = ToggleState.On; }\r\n            this.enabled = true;\r\n            this.state = ToggleState.Off;\r\n            this.set(startingState);\r\n            if (onValueChangedCallback)\r\n                this.setCallback(onValueChangedCallback);\r\n        }\r\n        /**\r\n         * Set trigger to a state\r\n         * @param state new state\r\n         */\r\n        ToggleComponent.prototype.set = function (state) {\r\n            this.state = state;\r\n            if (this.onValueChangedCallback)\r\n                this.onValueChangedCallback(state);\r\n        };\r\n        /**\r\n         * Toggle state of ToggleComponent\r\n         */\r\n        ToggleComponent.prototype.toggle = function () {\r\n            if (this.enabled) {\r\n                this.set(1 - this.state);\r\n            }\r\n        };\r\n        /**\r\n         * Get if current toggle state is ON\r\n         */\r\n        ToggleComponent.prototype.isOn = function () {\r\n            return this.state == ToggleState.On;\r\n        };\r\n        /**\r\n         * Set callback for when ToggleComponent state changed\r\n         * @param onValueChangedCallback callback\r\n         */\r\n        ToggleComponent.prototype.setCallback = function (onValueChangedCallback) {\r\n            this.onValueChangedCallback = onValueChangedCallback;\r\n        };\r\n        ToggleComponent = __decorate([\r\n            Component('toggle')\r\n        ], ToggleComponent);\r\n        return ToggleComponent;\r\n    }());\r\n    exports.ToggleComponent = ToggleComponent;\r\n    exports.default = {\r\n        ToggleComponent: ToggleComponent,\r\n        ToggleState: ToggleState\r\n    };\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/timer/component/itimercomponent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/timer/component/interval\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/timer/system/timerSystem\"], function (require, exports, timerSystem_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Interval = void 0;\r\n    /**\r\n     * Execute every X milliseconds\r\n     */\r\n    var Interval = /** @class */ (function () {\r\n        /**\r\n         * @param millisecs amount of time in milliseconds\r\n         * @param onTimeReachedCallback callback for when time is reached\r\n         */\r\n        function Interval(millisecs, onTimeReachedCallback) {\r\n            var _this = this;\r\n            timerSystem_1.TimerSystem.createAndAddToEngine();\r\n            this.elapsedTime = 0;\r\n            this.targetTime = millisecs / 1000;\r\n            this.onTimeReachedCallback = onTimeReachedCallback;\r\n            this.onTargetTimeReached = function () {\r\n                _this.elapsedTime = 0;\r\n                if (_this.onTimeReachedCallback)\r\n                    _this.onTimeReachedCallback();\r\n            };\r\n        }\r\n        Interval.prototype.setCallback = function (onTimeReachedCallback) {\r\n            this.onTimeReachedCallback = onTimeReachedCallback;\r\n        };\r\n        Interval = __decorate([\r\n            Component('timerInterval')\r\n        ], Interval);\r\n        return Interval;\r\n    }());\r\n    exports.Interval = Interval;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/timer/component/expire\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/timer/system/timerSystem\"], function (require, exports, timerSystem_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ExpireIn = void 0;\r\n    /**\r\n     * Remove entity after X milliseconds\r\n     */\r\n    var ExpireIn = /** @class */ (function () {\r\n        /**\r\n         * @param millisecs amount of time in milliseconds\r\n         * @param onTimeReachedCallback callback for when time is reached\r\n         */\r\n        function ExpireIn(millisecs, onTimeReachedCallback) {\r\n            var _this = this;\r\n            timerSystem_2.TimerSystem.createAndAddToEngine();\r\n            this.elapsedTime = 0;\r\n            this.targetTime = millisecs / 1000;\r\n            this.onTimeReachedCallback = onTimeReachedCallback;\r\n            this.onTargetTimeReached = function (entity) {\r\n                if (_this.onTimeReachedCallback)\r\n                    _this.onTimeReachedCallback();\r\n                entity.removeComponent(_this);\r\n                engine.removeEntity(entity);\r\n            };\r\n        }\r\n        ExpireIn.prototype.setCallback = function (onTimeReachedCallback) {\r\n            this.onTimeReachedCallback = onTimeReachedCallback;\r\n        };\r\n        ExpireIn = __decorate([\r\n            Component('timerExpireIn')\r\n        ], ExpireIn);\r\n        return ExpireIn;\r\n    }());\r\n    exports.ExpireIn = ExpireIn;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/timer/system/timerSystem\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/timer/component/interval\", \"node_modules/decentraland-ecs-utils/timer/component/delay\", \"node_modules/decentraland-ecs-utils/timer/component/expire\"], function (require, exports, interval_1, delay_1, expire_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.TimerSystem = void 0;\r\n    var TimerSystem = /** @class */ (function () {\r\n        function TimerSystem() {\r\n            this._components = [];\r\n            TimerSystem._instance = this;\r\n            this._components.push(interval_1.Interval);\r\n            this._components.push(delay_1.Delay);\r\n            this._components.push(expire_1.ExpireIn);\r\n        }\r\n        TimerSystem.createAndAddToEngine = function () {\r\n            if (this._instance == null) {\r\n                this._instance = new TimerSystem();\r\n                engine.addSystem(this._instance);\r\n            }\r\n            return this._instance;\r\n        };\r\n        TimerSystem.registerCustomComponent = function (component) {\r\n            this.createAndAddToEngine()._components.push(component);\r\n        };\r\n        TimerSystem.prototype.update = function (dt) {\r\n            var _this = this;\r\n            this._components.forEach(function (component) {\r\n                _this.updateComponent(dt, component);\r\n            });\r\n        };\r\n        TimerSystem.prototype.updateComponent = function (dt, component) {\r\n            var record = engine.getEntitiesWithComponent(component);\r\n            for (var key in record) {\r\n                if (record.hasOwnProperty(key)) {\r\n                    var entity = record[key];\r\n                    var timerComponent = entity.getComponent(component);\r\n                    timerComponent.elapsedTime += dt;\r\n                    if (timerComponent.elapsedTime >= timerComponent.targetTime) {\r\n                        timerComponent.onTargetTimeReached(entity);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        TimerSystem._instance = null;\r\n        return TimerSystem;\r\n    }());\r\n    exports.TimerSystem = TimerSystem;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/timer/component/delay\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/timer/system/timerSystem\"], function (require, exports, timerSystem_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Delay = void 0;\r\n    /**\r\n     * Execute once after X milliseconds\r\n     */\r\n    var Delay = /** @class */ (function () {\r\n        /**\r\n         * @param millisecs amount of time in milliseconds\r\n         * @param onTimeReachedCallback callback for when time is reached\r\n         */\r\n        function Delay(millisecs, onTimeReachedCallback) {\r\n            var _this = this;\r\n            timerSystem_3.TimerSystem.createAndAddToEngine();\r\n            this.elapsedTime = 0;\r\n            this.targetTime = millisecs / 1000;\r\n            this.onTimeReachedCallback = onTimeReachedCallback;\r\n            this.onTargetTimeReached = function (entity) {\r\n                if (_this.onTimeReachedCallback)\r\n                    _this.onTimeReachedCallback();\r\n                entity.removeComponent(_this);\r\n            };\r\n        }\r\n        Delay.prototype.setCallback = function (onTimeReachedCallback) {\r\n            this.onTimeReachedCallback = onTimeReachedCallback;\r\n        };\r\n        Delay = __decorate([\r\n            Component('timerDelay')\r\n        ], Delay);\r\n        return Delay;\r\n    }());\r\n    exports.Delay = Delay;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/helpers/helperfunctions\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.getEntityWorldRotation = exports.getEntityWorldPosition = exports.clamp = exports.map = void 0;\r\n    /**\r\n     * Maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum.\r\n     *\r\n     * @param {number} value input number\r\n     * @param {number} min1 Minimum value in the range of the input.\r\n     * @param {number} max1 Maximum value in the range of the input.\r\n     * @param {number} min2 Minimum value in the range of the output.\r\n     * @param {number} max2 Maximum value in the range of the output.\r\n     * @return {number} The resulting mapped value between the new min and max\r\n     *\r\n     */\r\n    function map(value, min1, max1, min2, max2) {\r\n        var range1 = max1 - min1;\r\n        var range2 = max2 - min2;\r\n        return ((value - min1) / range1) * range2 + min2;\r\n    }\r\n    exports.map = map;\r\n    // constrain\r\n    /**\r\n     * Clamps a value so that it doesn't exceed a minimum or a maximum value.\r\n     *\r\n     * @param {number} value input number\r\n     * @param {number} min Minimum output value.\r\n     * @param {number} max Maximum output value.\r\n     * @return {number} The resulting mapped value between the min and max\r\n     *\r\n     */\r\n    function clamp(value, min, max) {\r\n        var result = value;\r\n        if (value > max) {\r\n            result = max;\r\n        }\r\n        else if (value < min) {\r\n            result = min;\r\n        }\r\n        return result;\r\n    }\r\n    exports.clamp = clamp;\r\n    /**\r\n     * Returns the position of an entity that is a child of other entities, relative to the scene instead of relative to the parent. Returns a Vector3.\r\n     *\r\n     * @param {Entity} entity Entity to calculate position\r\n     * @return {Vector3} The Entity's global position in reference to the scene's origin\r\n     *\r\n     */\r\n    function getEntityWorldPosition(entity) {\r\n        var entityPosition = entity.hasComponent(Transform)\r\n            ? entity.getComponent(Transform).position.clone()\r\n            : Vector3.Zero();\r\n        var parentEntity = entity.getParent();\r\n        if (parentEntity != null) {\r\n            if (parentEntity.uuid == 'FirstPersonCameraEntityReference') {\r\n                //log('ATTACHED TO CAMERA')\r\n                var parentRotation = Camera.instance.rotation.clone();\r\n                return Camera.instance.position\r\n                    .clone()\r\n                    .add(entityPosition.rotate(parentRotation));\r\n            }\r\n            else if (parentEntity.uuid == 'AvatarEntityReference') {\r\n                //log('ATTACHED TO AVATAR')\r\n                var camRotation = Camera.instance.rotation;\r\n                var parentRotation = Quaternion.Euler(0, camRotation.eulerAngles.y, 0);\r\n                //log(Camera.instance.rotation.eulerAngles.y)\r\n                return Camera.instance.position\r\n                    .clone()\r\n                    .add(entityPosition.rotate(parentRotation))\r\n                    .add(new Vector3(0, -0.875, 0));\r\n            }\r\n            else {\r\n                var parentRotation = parentEntity.hasComponent(Transform)\r\n                    ? parentEntity.getComponent(Transform).rotation\r\n                    : Quaternion.Identity;\r\n                return getEntityWorldPosition(parentEntity).add(entityPosition.rotate(parentRotation));\r\n            }\r\n        }\r\n        return entityPosition;\r\n    }\r\n    exports.getEntityWorldPosition = getEntityWorldPosition;\r\n    /**\r\n     * Returns the position of an entity that is a child of other entities, relative to the scene instead of relative to the parent. Returns a Vector3.\r\n     *\r\n     * @param {Entity} entity Entity to calculate position\r\n     * @return {Quaternion} The Entity's global rotation in reference to the scene's origin\r\n     *\r\n     */\r\n    function getEntityWorldRotation(entity) {\r\n        var entityRotation = entity.hasComponent(Transform)\r\n            ? entity.getComponent(Transform).rotation.clone()\r\n            : Quaternion.Zero();\r\n        var parentEntity = entity.getParent();\r\n        if (parentEntity != null) {\r\n            if (parentEntity.uuid == 'FirstPersonCameraEntityReference') {\r\n                //log('ATTACHED TO CAMERA')\r\n                var parentRotation = Camera.instance.rotation.clone();\r\n                return entityRotation.multiply(parentRotation);\r\n            }\r\n            else if (parentEntity.uuid == 'AvatarEntityReference') {\r\n                //log('ATTACHED TO AVATAR')\r\n                var parentRotation = Quaternion.Euler(0, Camera.instance.rotation.eulerAngles.y, 0);\r\n                return entityRotation.multiply(parentRotation);\r\n            }\r\n            else {\r\n                //   let parentRotation = parentEntity.hasComponent(Transform)\r\n                //     ? parentEntity.getComponent(Transform).rotation\r\n                //     : Quaternion.Identity\r\n                return entityRotation.multiply(getEntityWorldRotation(parentEntity));\r\n            }\r\n        }\r\n        return entityRotation;\r\n    }\r\n    exports.getEntityWorldRotation = getEntityWorldRotation;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/helpers/testCube\", [\"require\", \"exports\", \"@decentraland/EnvironmentAPI\"], function (require, exports, EnvironmentAPI_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.addLabel = exports.addTestCube = void 0;\r\n    /**\r\n     * Quick function to add a cube that can run functions when clicked. By default only displayed when in preview mode for tests.\r\n     *\r\n     * @param {TranformConstructorArgs} pos Transform arguments for the cube, including position, scale and rotation\r\n     * @param {() => void} triggeredFunction Function to execute every time the cube is clicked.\r\n     * @param {string} label Text to display over cube and on hover.\r\n     * @param {Color3} color Cube color.\r\n     * @param {boolean} sphere If true, use a sphere shape instead of cube.\r\n     * @param {boolean} noCollider If true, cube has no collider.\r\n     * @return {Entity} A new entity with the configured settings and a label as a child\r\n     *\r\n     */\r\n    function addTestCube(pos, triggeredFunction, label, color, sphere, noCollider, keepInProduction) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _a, cube, cubeMaterial;\r\n            return __generator(this, function (_b) {\r\n                switch (_b.label) {\r\n                    case 0:\r\n                        _a = !keepInProduction;\r\n                        if (!_a) return [3 /*break*/, 2];\r\n                        return [4 /*yield*/, !(0, EnvironmentAPI_1.isPreviewMode)()];\r\n                    case 1:\r\n                        _a = (_b.sent());\r\n                        _b.label = 2;\r\n                    case 2:\r\n                        // if not in preview return\r\n                        if (_a) {\r\n                            return [2 /*return*/];\r\n                        }\r\n                        cube = new Entity();\r\n                        cube.addComponent(new Transform(pos));\r\n                        if (sphere) {\r\n                            cube.addComponent(new SphereShape());\r\n                            cube.getComponent(Transform).scale.setAll(0.5);\r\n                        }\r\n                        else {\r\n                            cube.addComponent(new BoxShape());\r\n                        }\r\n                        engine.addEntity(cube);\r\n                        cube.addComponent(new OnPointerDown(triggeredFunction, {\r\n                            hoverText: label ? label : 'click',\r\n                            button: ActionButton.POINTER\r\n                        }));\r\n                        if (color) {\r\n                            cubeMaterial = new Material();\r\n                            cubeMaterial.albedoColor = color;\r\n                            cube.addComponent(cubeMaterial);\r\n                        }\r\n                        if (noCollider) {\r\n                            cube.getComponent(BoxShape).withCollisions = false;\r\n                        }\r\n                        if (label) {\r\n                            addLabel(label, cube, true);\r\n                        }\r\n                        return [2 /*return*/, cube];\r\n                }\r\n            });\r\n        });\r\n    }\r\n    exports.addTestCube = addTestCube;\r\n    /**\r\n     * Maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum.\r\n     *\r\n     * @param {string} text Text to use on label\r\n     * @param {Entity} parent Entity to place label on.\r\n     * @param {boolean} billboard If true, label turns to always face player.\r\n     * @param {Color3} color Text color. Black by default.\r\n     * @param {number} size Text font size, 3 by default.\r\n     * @param {TranformConstructorArgs} textOffset Offset from parent entity's position. By default 1.5 meters above the parent.\r\n     * @return {Entity} A new entity with the configured settings that is a child of the provided parent\r\n     *\r\n     */\r\n    function addLabel(text, parent, billboard, color, size, textOffset) {\r\n        var label = new Entity();\r\n        label.addComponent(new Transform(textOffset ? textOffset : { position: new Vector3(0, 1.5, 0) }));\r\n        label.setParent(parent);\r\n        var textShape = new TextShape(text);\r\n        textShape.fontSize = size ? size : 3;\r\n        textShape.color = color ? color : Color3.Black();\r\n        label.addComponent(textShape);\r\n        if (billboard) {\r\n            label.addComponent(new Billboard());\r\n        }\r\n        engine.addEntity(label);\r\n        return label;\r\n    }\r\n    exports.addLabel = addLabel;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/triggers/triggerSystem\", [\"require\", \"exports\", \"@decentraland/EnvironmentAPI\"], function (require, exports, EnvironmentAPI_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.TriggerSphereShape = exports.TriggerBoxShape = exports.TriggerComponent = exports.TriggerSystem = void 0;\r\n    var TriggerSystem = /** @class */ (function () {\r\n        function TriggerSystem() {\r\n            this._triggers = {};\r\n            TriggerSystem._instance = this;\r\n            this._cameraTriggerWrapper = new CameraTrigger(new TriggerBoxShape(new Vector3(0.5, 1.8, 0.5), new Vector3(0, 0.91, 0)));\r\n            this._componentGroup = engine.getComponentGroup(TriggerComponent);\r\n        }\r\n        Object.defineProperty(TriggerSystem, \"instance\", {\r\n            get: function () {\r\n                return this.createAndAddToEngine();\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        TriggerSystem.createAndAddToEngine = function () {\r\n            if (this._instance == null) {\r\n                this._instance = new TriggerSystem();\r\n                engine.addSystem(this._instance);\r\n            }\r\n            return this._instance;\r\n        };\r\n        /**\r\n         * set a custom trigger's shape for the camera\r\n         * @param shape custom trigger's shape\r\n         */\r\n        TriggerSystem.prototype.setCameraTriggerShape = function (shape) {\r\n            this._cameraTriggerWrapper.setShape(shape);\r\n        };\r\n        TriggerSystem.prototype.update = function () {\r\n            var _this = this;\r\n            var entitiesWithTriggers = this._componentGroup.entities;\r\n            //iterate through all entities with triggers and wrap entities that weren't wrapped yet\r\n            entitiesWithTriggers.forEach(function (entity) {\r\n                if (_this.shouldWrapTriggerEntity(entity)) {\r\n                    _this.wrapTriggerEntity(entity);\r\n                }\r\n            });\r\n            //iterate through wrapped entities\r\n            for (var key in this._triggers) {\r\n                if (this._triggers.hasOwnProperty(key)) {\r\n                    var wrapper = this._triggers[key];\r\n                    //update debug entity\r\n                    if (wrapper.isDebugging()) {\r\n                        wrapper.updateDebugEntity();\r\n                    }\r\n                    if (!wrapper.isInEngine()) {\r\n                        //remove debugging\r\n                        if (wrapper.isDebugging()) {\r\n                            wrapper.removeDebugEntity();\r\n                        }\r\n                        //remove old collisions\r\n                        TriggerSystem.removeTriggerFromSystem(wrapper);\r\n                        //remove from record\r\n                        delete this._triggers[key];\r\n                    }\r\n                    else if (wrapper.trigger != null && wrapper.trigger.enabled) {\r\n                        //if was set as enabled in last frame\r\n                        if (!wrapper.wasEnabled) {\r\n                            if (wrapper.isDebugging()) {\r\n                                wrapper.addDebugEntity();\r\n                            }\r\n                        }\r\n                        //set as enabled\r\n                        wrapper.wasEnabled = true;\r\n                        //check collision camera\r\n                        if (wrapper.trigger.onCameraEnter || wrapper.trigger.onCameraExit) {\r\n                            this.checkCollisionAgainstCamera(wrapper);\r\n                        }\r\n                        //check collision with others\r\n                        if (wrapper.trigger.onTriggerEnter || wrapper.trigger.onTriggerExit) {\r\n                            this.checkCollisionAgainstOtherTriggers(wrapper);\r\n                        }\r\n                    }\r\n                    else if (wrapper.wasEnabled) {\r\n                        wrapper.wasEnabled = false;\r\n                        //remove debugging\r\n                        if (wrapper.isDebugging()) {\r\n                            wrapper.removeDebugEntity();\r\n                        }\r\n                        TriggerSystem.removeTriggerFromSystem(wrapper);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        TriggerSystem.prototype.shouldWrapTriggerEntity = function (entity) {\r\n            return (this._triggers[entity.uuid] == undefined ||\r\n                this._triggers[entity.uuid] == null);\r\n        };\r\n        TriggerSystem.prototype.wrapTriggerEntity = function (entity) {\r\n            this._triggers[entity.uuid] = new TriggerWrapper(entity);\r\n        };\r\n        TriggerSystem.removeTriggerFromSystem = function (wrapper) {\r\n            var _a;\r\n            var activeCollisions = wrapper.getActiveCollisions();\r\n            for (var i = 0; i < activeCollisions.length; i++) {\r\n                var activeCollisionHasTrigger = !(activeCollisions[i] ===\r\n                    ((_a = TriggerSystem._instance) === null || _a === void 0 ? void 0 : _a._cameraTriggerWrapper) ||\r\n                    activeCollisions[i].trigger == null);\r\n                if (activeCollisionHasTrigger &&\r\n                    activeCollisions[i].trigger.onTriggerExit &&\r\n                    wrapper.entity)\r\n                    activeCollisions[i].trigger.onTriggerExit(wrapper.entity);\r\n                activeCollisions[i].disengageActiveCollision(wrapper);\r\n                wrapper.disengageActiveCollision(activeCollisions[i]);\r\n            }\r\n        };\r\n        TriggerSystem.disengageCollision = function (t1, t2) {\r\n            t1.disengageActiveCollision(t2);\r\n            t2.disengageActiveCollision(t1);\r\n            if (t1.trigger.onTriggerExit && t2.entity)\r\n                t1.trigger.onTriggerExit(t2.entity);\r\n            if (t2.trigger.onTriggerExit && t1.entity)\r\n                t2.trigger.onTriggerExit(t1.entity);\r\n        };\r\n        TriggerSystem.engageCollision = function (t1, t2) {\r\n            t1.engageCollision(t2);\r\n            t2.engageCollision(t1);\r\n            if (t1.trigger.onTriggerEnter && t2.entity)\r\n                t1.trigger.onTriggerEnter(t2.entity);\r\n            if (t2.trigger.onTriggerEnter && t1.entity)\r\n                t2.trigger.onTriggerEnter(t1.entity);\r\n        };\r\n        TriggerSystem.prototype.checkCollisionAgainstCamera = function (wrapper) {\r\n            var wereColliding = wrapper.hasActiveCollision(this._cameraTriggerWrapper);\r\n            var areColliding = TriggerSystem.areColliding(wrapper, this._cameraTriggerWrapper);\r\n            if (wereColliding && !areColliding) {\r\n                wrapper.disengageActiveCollision(this._cameraTriggerWrapper);\r\n                if (wrapper.trigger.onCameraExit)\r\n                    wrapper.trigger.onCameraExit();\r\n            }\r\n            else if (!wereColliding && areColliding) {\r\n                wrapper.engageCollision(this._cameraTriggerWrapper);\r\n                if (wrapper.trigger.onCameraEnter)\r\n                    wrapper.trigger.onCameraEnter();\r\n            }\r\n        };\r\n        TriggerSystem.prototype.checkCollisionAgainstOtherTriggers = function (wrapper) {\r\n            for (var key in this._triggers) {\r\n                if (this._triggers.hasOwnProperty(key)) {\r\n                    if (key != wrapper.uuid && this._triggers[key].trigger.enabled) {\r\n                        if (TriggerSystem.canTriggersCollide(wrapper, this._triggers[key])) {\r\n                            var wereColliding = wrapper.hasActiveCollision(this._triggers[key]);\r\n                            var areColliding = TriggerSystem.areColliding(wrapper, this._triggers[key]);\r\n                            if (wereColliding && !areColliding)\r\n                                TriggerSystem.disengageCollision(wrapper, this._triggers[key]);\r\n                            else if (!wereColliding && areColliding)\r\n                                TriggerSystem.engageCollision(wrapper, this._triggers[key]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        TriggerSystem.canTriggersCollide = function (t1, t2) {\r\n            if (t1.trigger.triggeredByLayer == 0)\r\n                return true;\r\n            return (t2.trigger.layer & t1.trigger.triggeredByLayer) != 0;\r\n        };\r\n        TriggerSystem.areColliding = function (t1, t2) {\r\n            if (t1.getShape() instanceof TriggerBoxShape &&\r\n                t2.getShape() instanceof TriggerBoxShape) {\r\n                return TriggerSystem.areCollidingAABB(t1.getGlobalPosition(), t1.getShape(), t2.getGlobalPosition(), t2.getShape());\r\n            }\r\n            else if (t1.getShape() instanceof TriggerSphereShape &&\r\n                t2.getShape() instanceof TriggerSphereShape) {\r\n                return TriggerSystem.areCollidingSphere(t1.getGlobalPosition(), t1.getShape(), t2.getGlobalPosition(), t2.getShape());\r\n            }\r\n            else if (t1.getShape() instanceof TriggerBoxShape &&\r\n                t2.getShape() instanceof TriggerSphereShape) {\r\n                return TriggerSystem.areCollidingAABBSphere(t1.getGlobalPosition(), t1.getShape(), t2.getGlobalPosition(), t2.getShape());\r\n            }\r\n            else if (t1.getShape() instanceof TriggerSphereShape &&\r\n                t2.getShape() instanceof TriggerBoxShape) {\r\n                return TriggerSystem.areCollidingAABBSphere(t2.getGlobalPosition(), t2.getShape(), t1.getGlobalPosition(), t1.getShape());\r\n            }\r\n            return false;\r\n        };\r\n        TriggerSystem.areCollidingAABB = function (t1GlobalPosition, t1Shape, t2GlobalPosition, t2Shape) {\r\n            var t1 = TriggerSystem.getBoxShapeValues(t1GlobalPosition, t1Shape);\r\n            var t2 = TriggerSystem.getBoxShapeValues(t2GlobalPosition, t2Shape);\r\n            return (t1.min.x <= t2.max.x &&\r\n                t1.max.x >= t2.min.x &&\r\n                t1.min.y <= t2.max.y &&\r\n                t1.max.y >= t2.min.y &&\r\n                t1.min.z <= t2.max.z &&\r\n                t1.max.z >= t2.min.z);\r\n        };\r\n        TriggerSystem.areCollidingSphere = function (t1GlobalPosition, t1Shape, t2GlobalPosition, t2Shape) {\r\n            var sqDist = Vector3.DistanceSquared(t1GlobalPosition.add(t1Shape.position), t2GlobalPosition.add(t2Shape.position));\r\n            return (sqDist < t1Shape.radius * t1Shape.radius + t2Shape.radius * t2Shape.radius);\r\n        };\r\n        TriggerSystem.areCollidingAABBSphere = function (t1GlobalPosition, t1Shape, t2GlobalPosition, t2Shape) {\r\n            var box = TriggerSystem.getBoxShapeValues(t1GlobalPosition, t1Shape);\r\n            var sphere = {\r\n                center: t2GlobalPosition.add(t2Shape.position),\r\n                radius: t2Shape.radius\r\n            };\r\n            var dmin = 0;\r\n            if (sphere.center.x < box.min.x)\r\n                dmin += (box.min.x - sphere.center.x) * (box.min.x - sphere.center.x);\r\n            if (sphere.center.x > box.max.x)\r\n                dmin += (sphere.center.x - box.max.x) * (sphere.center.x - box.max.x);\r\n            if (sphere.center.y < box.min.y)\r\n                dmin += (box.min.y - sphere.center.y) * (box.min.y - sphere.center.y);\r\n            if (sphere.center.y > box.max.y)\r\n                dmin += (sphere.center.y - box.max.y) * (sphere.center.y - box.max.y);\r\n            if (sphere.center.z < box.min.z)\r\n                dmin += (box.min.z - sphere.center.z) * (box.min.z - sphere.center.z);\r\n            if (sphere.center.z > box.max.z)\r\n                dmin += (sphere.center.z - box.max.z) * (sphere.center.z - box.max.z);\r\n            return dmin < sphere.radius * sphere.radius;\r\n        };\r\n        TriggerSystem.getBoxShapeValues = function (entityGlobalPosition, shape) {\r\n            var center = entityGlobalPosition.add(shape.position);\r\n            return {\r\n                center: center,\r\n                min: center.subtract(shape.size.scale(0.5)),\r\n                max: center.add(shape.size.scale(0.5))\r\n            };\r\n        };\r\n        TriggerSystem._instance = null;\r\n        return TriggerSystem;\r\n    }());\r\n    exports.TriggerSystem = TriggerSystem;\r\n    var TriggerWrapper = /** @class */ (function () {\r\n        function TriggerWrapper(entity) {\r\n            this.wasEnabled = true;\r\n            this._uuid = '';\r\n            this._collidingWith = {};\r\n            this._isDebug = false;\r\n            this._debugEntity = null;\r\n            this._entity = entity;\r\n            if (entity) {\r\n                this._trigger = entity.getComponent(TriggerComponent);\r\n                this._uuid = entity.uuid;\r\n                this._isDebug = this._trigger.debugEnabled;\r\n                if (this._isDebug) {\r\n                    this.addDebugEntity();\r\n                }\r\n            }\r\n        }\r\n        Object.defineProperty(TriggerWrapper.prototype, \"entity\", {\r\n            get: function () {\r\n                return this._entity;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TriggerWrapper.prototype, \"trigger\", {\r\n            get: function () {\r\n                return this._trigger;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        Object.defineProperty(TriggerWrapper.prototype, \"uuid\", {\r\n            get: function () {\r\n                return this._uuid;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        TriggerWrapper.prototype.getGlobalPosition = function () {\r\n            if (this._entity)\r\n                return TriggerWrapper.getEntityWorldPosition(this._entity);\r\n            return Vector3.Zero();\r\n        };\r\n        TriggerWrapper.prototype.getShape = function () {\r\n            return this._trigger.shape;\r\n        };\r\n        TriggerWrapper.prototype.isInEngine = function () {\r\n            return this._entity != null && this._entity.isAddedToEngine();\r\n        };\r\n        TriggerWrapper.prototype.getActiveCollisions = function () {\r\n            var ret = [];\r\n            for (var key in this._collidingWith) {\r\n                if (this._collidingWith.hasOwnProperty(key)) {\r\n                    ret.push(this._collidingWith[key]);\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n        TriggerWrapper.prototype.hasActiveCollision = function (other) {\r\n            return (this._collidingWith[other.uuid] != undefined &&\r\n                this._collidingWith[other.uuid] != null);\r\n        };\r\n        TriggerWrapper.prototype.disengageActiveCollision = function (other) {\r\n            delete this._collidingWith[other.uuid];\r\n        };\r\n        TriggerWrapper.prototype.engageCollision = function (other) {\r\n            this._collidingWith[other.uuid] = other;\r\n        };\r\n        TriggerWrapper.prototype.isDebugging = function () {\r\n            return this._isDebug;\r\n        };\r\n        TriggerWrapper.prototype.addDebugEntity = function () {\r\n            return __awaiter(this, void 0, void 0, function () {\r\n                var transform, shape, shape, rad;\r\n                return __generator(this, function (_a) {\r\n                    switch (_a.label) {\r\n                        case 0: return [4 /*yield*/, !(0, EnvironmentAPI_2.isPreviewMode)()];\r\n                        case 1:\r\n                            if (_a.sent()) {\r\n                                return [2 /*return*/];\r\n                            }\r\n                            if (!TriggerWrapper._debugMaterial) {\r\n                                TriggerWrapper._debugMaterial = new Material();\r\n                                TriggerWrapper._debugMaterial.alphaTest = 0.5;\r\n                            }\r\n                            if (this._debugEntity == null) {\r\n                                this._debugEntity = new Entity();\r\n                                transform = new Transform();\r\n                                this._debugEntity.addComponent(transform);\r\n                                this._debugEntity.addComponent(TriggerWrapper._debugMaterial);\r\n                                if (this.getShape() instanceof TriggerBoxShape) {\r\n                                    shape = new BoxShape();\r\n                                    shape.withCollisions = false;\r\n                                    this._debugEntity.addComponent(shape);\r\n                                    transform.scale = this.getShape().size;\r\n                                }\r\n                                if (this.getShape() instanceof TriggerSphereShape) {\r\n                                    shape = new SphereShape();\r\n                                    shape.withCollisions = false;\r\n                                    this._debugEntity.addComponent(shape);\r\n                                    rad = this.getShape().radius;\r\n                                    transform.scale = new Vector3(rad, rad, rad);\r\n                                }\r\n                            }\r\n                            engine.addEntity(this._debugEntity);\r\n                            return [2 /*return*/];\r\n                    }\r\n                });\r\n            });\r\n        };\r\n        TriggerWrapper.prototype.removeDebugEntity = function () {\r\n            if (this._debugEntity != null)\r\n                engine.removeEntity(this._debugEntity);\r\n        };\r\n        TriggerWrapper.prototype.updateDebugEntity = function () {\r\n            if (this._debugEntity) {\r\n                this._debugEntity.getComponent(Transform).position = this.getGlobalPosition().add(this.getShape().position);\r\n            }\r\n        };\r\n        TriggerWrapper.getEntityWorldPosition = function (entity) {\r\n            var entityPosition = entity.hasComponent(Transform)\r\n                ? entity.getComponent(Transform).position.clone()\r\n                : Vector3.Zero();\r\n            var parentEntity = entity.getParent();\r\n            if (parentEntity != null) {\r\n                var parentRotation = parentEntity.hasComponent(Transform)\r\n                    ? parentEntity.getComponent(Transform).rotation\r\n                    : Quaternion.Identity;\r\n                return this.getEntityWorldPosition(parentEntity).add(entityPosition.rotate(parentRotation));\r\n            }\r\n            return entityPosition;\r\n        };\r\n        TriggerWrapper._debugMaterial = null;\r\n        return TriggerWrapper;\r\n    }());\r\n    var CameraTrigger = /** @class */ (function (_super) {\r\n        __extends(CameraTrigger, _super);\r\n        function CameraTrigger(shape) {\r\n            var _this = _super.call(this) || this;\r\n            _this._shape = shape;\r\n            _this._uuid = 'cameraTrigger';\r\n            return _this;\r\n        }\r\n        CameraTrigger.prototype.getGlobalPosition = function () {\r\n            return Camera.instance.position;\r\n        };\r\n        CameraTrigger.prototype.getShape = function () {\r\n            return this._shape;\r\n        };\r\n        CameraTrigger.prototype.setShape = function (shape) {\r\n            this._shape = shape;\r\n        };\r\n        CameraTrigger.prototype.isInEngine = function () {\r\n            return false;\r\n        };\r\n        CameraTrigger.prototype.hasActiveCollision = function (other) {\r\n            return false;\r\n        };\r\n        CameraTrigger.prototype.disengageActiveCollision = function (other) { };\r\n        CameraTrigger.prototype.engageCollision = function (other) { };\r\n        CameraTrigger.prototype.isDebugging = function () {\r\n            return false;\r\n        };\r\n        return CameraTrigger;\r\n    }(TriggerWrapper));\r\n    var TriggerComponent = /** @class */ (function () {\r\n        /**\r\n         *\r\n         * @param shape shape of the triggering collider area\r\n         * @param layer layer of the Trigger, useful to discriminate between trigger events. You can set multiple layers by using a | symbol.\r\n         * @param triggeredByLayer against which layers to check collisions\r\n         * @param onTriggerEnter callback when an entity of a valid layer enters the trigger area\r\n         * @param onTriggerExit callback when an entity of a valid layer leaves the trigger area\r\n         * @param onCameraEnter callback when the player enters the trigger area\r\n         * @param onCameraExit callback when the player leaves the trigger area\r\n         * @param enableDebug when true makes the trigger area visible for debug purposes.\r\n         */\r\n        function TriggerComponent(shape, layer, triggeredByLayer, onTriggerEnter, onTriggerExit, onCameraEnter, onCameraExit, enableDebug) {\r\n            if (layer === void 0) { layer = 0; }\r\n            if (triggeredByLayer === void 0) { triggeredByLayer = 0; }\r\n            if (enableDebug === void 0) { enableDebug = false; }\r\n            /**\r\n             * is trigger enable?\r\n             */\r\n            this.enabled = true;\r\n            /**\r\n             * bit layer of the Tigger (usefull to discriminate between trigger events)\r\n             */\r\n            this.layer = 0;\r\n            /**\r\n             * against which layer are we going to check trigger's collisions\r\n             */\r\n            this.triggeredByLayer = 0;\r\n            TriggerSystem.createAndAddToEngine();\r\n            this.shape = shape;\r\n            this.layer = layer;\r\n            this.triggeredByLayer = triggeredByLayer;\r\n            this.onTriggerEnter = onTriggerEnter;\r\n            this.onTriggerExit = onTriggerExit;\r\n            this.onCameraEnter = onCameraEnter;\r\n            this.onCameraExit = onCameraExit;\r\n            this._debugEnabled = enableDebug;\r\n        }\r\n        Object.defineProperty(TriggerComponent.prototype, \"debugEnabled\", {\r\n            /**\r\n             * get if debug is enabled\r\n             */\r\n            get: function () {\r\n                return this._debugEnabled;\r\n            },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        TriggerComponent = __decorate([\r\n            Component('triggerComponent')\r\n        ], TriggerComponent);\r\n        return TriggerComponent;\r\n    }());\r\n    exports.TriggerComponent = TriggerComponent;\r\n    var TriggerBoxShape = /** @class */ (function () {\r\n        function TriggerBoxShape(size, position) {\r\n            this.size = size;\r\n            this.position = position;\r\n        }\r\n        return TriggerBoxShape;\r\n    }());\r\n    exports.TriggerBoxShape = TriggerBoxShape;\r\n    var TriggerSphereShape = /** @class */ (function () {\r\n        function TriggerSphereShape(radius, position) {\r\n            this.radius = radius;\r\n            this.position = position;\r\n        }\r\n        return TriggerSphereShape;\r\n    }());\r\n    exports.TriggerSphereShape = TriggerSphereShape;\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/actionsSequenceSystem/actionsSequenceSystem\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ActionsSequenceSystem = void 0;\r\n    var ActionsSequenceSystem = /** @class */ (function () {\r\n        function ActionsSequenceSystem(sequenceBuilt) {\r\n            this.beginSequenceNode = null;\r\n            this.currentSequenceNode = null;\r\n            this.running = false;\r\n            this.started = false;\r\n            if (sequenceBuilt) {\r\n                this.startSequence(sequenceBuilt);\r\n            }\r\n        }\r\n        ActionsSequenceSystem.prototype.startSequence = function (sequenceBuilt) {\r\n            this.beginSequenceNode = sequenceBuilt.beginSequenceNode;\r\n            this.currentSequenceNode = this.beginSequenceNode;\r\n            this.running = true;\r\n            this.started = false;\r\n        };\r\n        ActionsSequenceSystem.prototype.setOnFinishCallback = function (onFinishCallback) {\r\n            this.onFinishCallback = onFinishCallback;\r\n        };\r\n        ActionsSequenceSystem.prototype.isRunning = function () {\r\n            return this.running;\r\n        };\r\n        ActionsSequenceSystem.prototype.stop = function () {\r\n            this.running = false;\r\n        };\r\n        ActionsSequenceSystem.prototype.resume = function () {\r\n            if (this.beginSequenceNode != null) {\r\n                this.running = true;\r\n            }\r\n        };\r\n        ActionsSequenceSystem.prototype.reset = function () {\r\n            this.currentSequenceNode = this.beginSequenceNode;\r\n            this.running = true;\r\n            this.started = false;\r\n        };\r\n        ActionsSequenceSystem.prototype.getRunningAction = function () {\r\n            var currentNode = this.currentSequenceNode;\r\n            if (this.currentSequenceNode instanceof SubSequenceNode) {\r\n                do {\r\n                    currentNode = currentNode.currentInnerSequence;\r\n                } while (currentNode instanceof SubSequenceNode);\r\n            }\r\n            return currentNode.action;\r\n        };\r\n        ActionsSequenceSystem.prototype.update = function (dt) {\r\n            if (this.running) {\r\n                if (!this.started) {\r\n                    ;\r\n                    this.currentSequenceNode.onStart();\r\n                    this.started = true;\r\n                }\r\n                else {\r\n                    if (!this.currentSequenceNode.hasFinish()) {\r\n                        ;\r\n                        this.currentSequenceNode.update(dt);\r\n                    }\r\n                    else {\r\n                        ;\r\n                        this.currentSequenceNode.onFinish();\r\n                        this.currentSequenceNode = this\r\n                            .currentSequenceNode.next;\r\n                        if (this.currentSequenceNode) {\r\n                            this.currentSequenceNode.onStart();\r\n                        }\r\n                        else {\r\n                            this.running = false;\r\n                            if (this.onFinishCallback)\r\n                                this.onFinishCallback();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return ActionsSequenceSystem;\r\n    }());\r\n    exports.ActionsSequenceSystem = ActionsSequenceSystem;\r\n    (function (ActionsSequenceSystem) {\r\n        var SequenceBuilder = /** @class */ (function () {\r\n            function SequenceBuilder() {\r\n                this.currentSequenceNode = null;\r\n                this.beginSequenceNode = null;\r\n                this.whileNodeStack = [];\r\n            }\r\n            SequenceBuilder.prototype.then = function (action) {\r\n                if (this.currentSequenceNode == null) {\r\n                    this.currentSequenceNode = new SequenceNode();\r\n                    this.currentSequenceNode.action = action;\r\n                    this.beginSequenceNode = this.currentSequenceNode;\r\n                }\r\n                else {\r\n                    var next = new SequenceNode();\r\n                    next.action = action;\r\n                    this.currentSequenceNode = this.currentSequenceNode.then(next);\r\n                }\r\n                return this;\r\n            };\r\n            SequenceBuilder.prototype.if = function (condition) {\r\n                var ifSeq = new IfSequenceNode(condition);\r\n                if (this.currentSequenceNode == null) {\r\n                    this.currentSequenceNode = ifSeq;\r\n                    this.beginSequenceNode = ifSeq;\r\n                }\r\n                else {\r\n                    this.currentSequenceNode = this.currentSequenceNode.then(ifSeq);\r\n                }\r\n                return this;\r\n            };\r\n            SequenceBuilder.prototype.else = function () {\r\n                var seq = this.currentSequenceNode.getSequence();\r\n                if (seq instanceof IfSequenceNode) {\r\n                    seq.closed = true;\r\n                    var elseSeq = new ElseSequenceNode(seq);\r\n                    this.currentSequenceNode = this\r\n                        .currentSequenceNode.then(elseSeq);\r\n                }\r\n                else {\r\n                    throw new Error('IF statement is needed to be called before ELSE statement.');\r\n                }\r\n                return this;\r\n            };\r\n            SequenceBuilder.prototype.endIf = function () {\r\n                var seq = this.currentSequenceNode.getSequence();\r\n                if (seq instanceof IfSequenceNode || seq instanceof ElseSequenceNode) {\r\n                    seq.closed = true;\r\n                }\r\n                else {\r\n                    throw new Error('IF statement is needed to be called before ENDIF statement.');\r\n                }\r\n                return this;\r\n            };\r\n            SequenceBuilder.prototype.while = function (condition) {\r\n                var whileSeq = new WhileSequenceNode(condition);\r\n                if (this.currentSequenceNode == null) {\r\n                    this.currentSequenceNode = whileSeq;\r\n                    this.beginSequenceNode = whileSeq;\r\n                }\r\n                else {\r\n                    this.currentSequenceNode = this.currentSequenceNode.then(whileSeq);\r\n                }\r\n                this.whileNodeStack.push(whileSeq);\r\n                return this;\r\n            };\r\n            SequenceBuilder.prototype.endWhile = function () {\r\n                var seq = this.currentSequenceNode.getSequence();\r\n                if (seq instanceof WhileSequenceNode) {\r\n                    seq.closed = true;\r\n                    if (this.whileNodeStack.length > 0) {\r\n                        this.whileNodeStack.splice(this.whileNodeStack.length - 1, 1);\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('WHILE statement is needed to be called before ENDWHILE statement.');\r\n                }\r\n                return this;\r\n            };\r\n            SequenceBuilder.prototype.breakWhile = function () {\r\n                if (this.whileNodeStack.length > 0) {\r\n                    this.currentSequenceNode = this\r\n                        .currentSequenceNode.then(new BreakWhileSequenceNode(this.whileNodeStack[this.whileNodeStack.length - 1]));\r\n                }\r\n                else {\r\n                    throw new Error('WHILE statement is needed to be called before BREAKWHILE statement.');\r\n                }\r\n                return this;\r\n            };\r\n            return SequenceBuilder;\r\n        }());\r\n        ActionsSequenceSystem.SequenceBuilder = SequenceBuilder;\r\n    })(ActionsSequenceSystem = exports.ActionsSequenceSystem || (exports.ActionsSequenceSystem = {}));\r\n    exports.ActionsSequenceSystem = ActionsSequenceSystem;\r\n    var SequenceNode = /** @class */ (function () {\r\n        function SequenceNode() {\r\n            this.action = null;\r\n            this.next = null;\r\n        }\r\n        SequenceNode.prototype.then = function (next) {\r\n            this.next = next;\r\n            return next;\r\n        };\r\n        SequenceNode.prototype.onStart = function () {\r\n            if (this.action)\r\n                this.action.onStart();\r\n        };\r\n        SequenceNode.prototype.update = function (dt) {\r\n            if (this.action)\r\n                this.action.update(dt);\r\n        };\r\n        SequenceNode.prototype.onFinish = function () {\r\n            if (this.action)\r\n                this.action.onFinish();\r\n        };\r\n        SequenceNode.prototype.hasFinish = function () {\r\n            if (this.action)\r\n                return this.action.hasFinished;\r\n            else\r\n                return true;\r\n        };\r\n        SequenceNode.prototype.getSequence = function () {\r\n            return this;\r\n        };\r\n        return SequenceNode;\r\n    }());\r\n    var SubSequenceNode = /** @class */ (function (_super) {\r\n        __extends(SubSequenceNode, _super);\r\n        function SubSequenceNode() {\r\n            var _this = _super !== null && _super.apply(this, arguments) || this;\r\n            _this.currentInnerSequence = null;\r\n            _this.startingInnerSequence = null;\r\n            _this.closed = false;\r\n            return _this;\r\n        }\r\n        SubSequenceNode.prototype.then = function (next) {\r\n            if (this.currentInnerSequence == null) {\r\n                this.currentInnerSequence = next;\r\n                this.startingInnerSequence = next;\r\n            }\r\n            else {\r\n                if (this.closed) {\r\n                    this.next = next;\r\n                    return next;\r\n                }\r\n                else {\r\n                    this.currentInnerSequence = this.currentInnerSequence.then(next);\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        SubSequenceNode.prototype.onStart = function () {\r\n            this.currentInnerSequence = this.startingInnerSequence;\r\n            if (this.currentInnerSequence)\r\n                this.currentInnerSequence.onStart();\r\n        };\r\n        SubSequenceNode.prototype.update = function (dt) {\r\n            if (this.currentInnerSequence) {\r\n                if (!this.currentInnerSequence.hasFinish()) {\r\n                    this.currentInnerSequence.update(dt);\r\n                }\r\n                else {\r\n                    this.currentInnerSequence.onFinish();\r\n                    this.currentInnerSequence = this.currentInnerSequence.next;\r\n                    if (this.currentInnerSequence)\r\n                        this.currentInnerSequence.onStart();\r\n                }\r\n            }\r\n        };\r\n        SubSequenceNode.prototype.onFinish = function () {\r\n            if (this.currentInnerSequence)\r\n                this.currentInnerSequence.onFinish();\r\n        };\r\n        SubSequenceNode.prototype.hasFinish = function () {\r\n            return this.currentInnerSequence == null;\r\n        };\r\n        SubSequenceNode.prototype.getSequence = function () {\r\n            if (this.currentInnerSequence) {\r\n                var innerSeq = this.currentInnerSequence.getSequence();\r\n                if (innerSeq instanceof SubSequenceNode) {\r\n                    if (!innerSeq.closed) {\r\n                        return innerSeq;\r\n                    }\r\n                }\r\n            }\r\n            return this;\r\n        };\r\n        return SubSequenceNode;\r\n    }(SequenceNode));\r\n    var IfSequenceNode = /** @class */ (function (_super) {\r\n        __extends(IfSequenceNode, _super);\r\n        function IfSequenceNode(condition) {\r\n            var _this = _super.call(this) || this;\r\n            _this.result = false;\r\n            _this.condition = condition;\r\n            return _this;\r\n        }\r\n        IfSequenceNode.prototype.onStart = function () {\r\n            this.result = this.condition();\r\n            if (this.result)\r\n                _super.prototype.onStart.call(this);\r\n            else\r\n                this.currentInnerSequence = null;\r\n        };\r\n        return IfSequenceNode;\r\n    }(SubSequenceNode));\r\n    var ElseSequenceNode = /** @class */ (function (_super) {\r\n        __extends(ElseSequenceNode, _super);\r\n        function ElseSequenceNode(ifSequence) {\r\n            var _this = _super.call(this) || this;\r\n            _this.ifSequence = null;\r\n            _this.ifSequence = ifSequence;\r\n            return _this;\r\n        }\r\n        ElseSequenceNode.prototype.onStart = function () {\r\n            if (this.ifSequence && !this.ifSequence.result)\r\n                _super.prototype.onStart.call(this);\r\n            else\r\n                this.currentInnerSequence = null;\r\n        };\r\n        return ElseSequenceNode;\r\n    }(SubSequenceNode));\r\n    var WhileSequenceNode = /** @class */ (function (_super) {\r\n        __extends(WhileSequenceNode, _super);\r\n        function WhileSequenceNode(condition) {\r\n            var _this = _super.call(this) || this;\r\n            _this.breakWhile = false;\r\n            _this.condition = condition;\r\n            return _this;\r\n        }\r\n        WhileSequenceNode.prototype.onStart = function () {\r\n            this.breakWhile = false;\r\n            if (this.condition())\r\n                _super.prototype.onStart.call(this);\r\n            else\r\n                this.currentInnerSequence = null;\r\n        };\r\n        WhileSequenceNode.prototype.update = function (dt) {\r\n            if (this.currentInnerSequence) {\r\n                if (!this.currentInnerSequence.hasFinish()) {\r\n                    this.currentInnerSequence.update(dt);\r\n                }\r\n                else {\r\n                    this.currentInnerSequence.onFinish();\r\n                    this.currentInnerSequence = this.currentInnerSequence.next;\r\n                    if (this.currentInnerSequence == null)\r\n                        this.currentInnerSequence = this.startingInnerSequence;\r\n                    if (this.currentInnerSequence)\r\n                        this.currentInnerSequence.onStart();\r\n                }\r\n            }\r\n        };\r\n        WhileSequenceNode.prototype.hasFinish = function () {\r\n            return this.breakWhile || !this.condition();\r\n        };\r\n        return WhileSequenceNode;\r\n    }(SubSequenceNode));\r\n    var BreakWhileSequenceNode = /** @class */ (function (_super) {\r\n        __extends(BreakWhileSequenceNode, _super);\r\n        function BreakWhileSequenceNode(whileNode) {\r\n            var _this = _super.call(this) || this;\r\n            _this.whileNode = whileNode;\r\n            return _this;\r\n        }\r\n        BreakWhileSequenceNode.prototype.onStart = function () {\r\n            this.whileNode.breakWhile = true;\r\n        };\r\n        return BreakWhileSequenceNode;\r\n    }(SequenceNode));\r\n});\r\ndefine(\"node_modules/decentraland-ecs-utils/index\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/transform/component/move\", \"node_modules/decentraland-ecs-utils/transform/component/rotate\", \"node_modules/decentraland-ecs-utils/transform/component/scale\", \"node_modules/decentraland-ecs-utils/transform/component/followpath\", \"node_modules/decentraland-ecs-utils/transform/component/keeprotating\", \"node_modules/decentraland-ecs-utils/transform/system/transfromSystem\", \"node_modules/decentraland-ecs-utils/transform/math/interpolation\", \"node_modules/decentraland-ecs-utils/toggle/toggleComponent\", \"node_modules/decentraland-ecs-utils/timer/component/delay\", \"node_modules/decentraland-ecs-utils/timer/component/expire\", \"node_modules/decentraland-ecs-utils/timer/component/interval\", \"node_modules/decentraland-ecs-utils/helpers/helperfunctions\", \"node_modules/decentraland-ecs-utils/helpers/testCube\", \"node_modules/decentraland-ecs-utils/triggers/triggerSystem\", \"node_modules/decentraland-ecs-utils/actionsSequenceSystem/actionsSequenceSystem\"], function (require, exports, move_2, rotate_2, scale_2, followpath_2, keeprotating_2, transfromSystem_6, interpolation_4, toggleComponent_1, delay_2, expire_2, interval_2, helperfunctions_1, testCube_1, triggerSystem_1, actionsSequenceSystem_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = {\r\n        TransformSystem: transfromSystem_6.TransformSystem,\r\n        MoveTransformComponent: move_2.MoveTransformComponent,\r\n        RotateTransformComponent: rotate_2.RotateTransformComponent,\r\n        ScaleTransformComponent: scale_2.ScaleTransformComponent,\r\n        FollowPathComponent: followpath_2.FollowPathComponent,\r\n        KeepRotatingComponent: keeprotating_2.KeepRotatingComponent,\r\n        Interpolate: interpolation_4.Interpolate,\r\n        InterpolationType: interpolation_4.InterpolationType,\r\n        ToggleComponent: toggleComponent_1.ToggleComponent,\r\n        ToggleState: toggleComponent_1.ToggleState,\r\n        Delay: delay_2.Delay,\r\n        ExpireIn: expire_2.ExpireIn,\r\n        Interval: interval_2.Interval,\r\n        TriggerComponent: triggerSystem_1.TriggerComponent,\r\n        TriggerSystem: triggerSystem_1.TriggerSystem,\r\n        TriggerSphereShape: triggerSystem_1.TriggerSphereShape,\r\n        TriggerBoxShape: triggerSystem_1.TriggerBoxShape,\r\n        ActionsSequenceSystem: actionsSequenceSystem_1.ActionsSequenceSystem,\r\n        map: helperfunctions_1.map,\r\n        clamp: helperfunctions_1.clamp,\r\n        addTestCube: testCube_1.addTestCube,\r\n        addLabel: testCube_1.addLabel\r\n    };\r\n});\r\ndefine(\"src/components/mouseFollowPathComponent\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, index_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseFollowPathComponent = void 0;\r\n    var MouseFollowPathComponent = /** @class */ (function () {\r\n        function MouseFollowPathComponent(startDelay, idleTime, path, movingTime) {\r\n            this.startDelay = startDelay;\r\n            this.idleTime = idleTime;\r\n            this.path = path;\r\n            this.movingTime = movingTime;\r\n            this.currentTime = idleTime;\r\n            this.isInIdleTime = true;\r\n        }\r\n        MouseFollowPathComponent.prototype.update = function (dt, mouseEntity) {\r\n            var _this = this;\r\n            // Verifica se está esperando o início\r\n            if (this.startDelay > 0) {\r\n                this.startDelay -= dt;\r\n            }\r\n            // Quando o mouse está em repouso\r\n            else if (this.isInIdleTime) {\r\n                // Aumenta o tempo no estado de repouso\r\n                this.currentTime += dt;\r\n                // Quando o tempo de repouso é atingido\r\n                if (this.currentTime >= this.idleTime) {\r\n                    // Não estamos mais em estado de repouso\r\n                    this.isInIdleTime = false;\r\n                    // Gira o mouse para olhar para o próximo ponto no caminho\r\n                    mouseEntity.getComponent(Transform).lookAt(this.path[1]);\r\n                    // Adiciona componente para seguir o caminho\r\n                    mouseEntity.addComponentOrReplace(new index_1.default.FollowPathComponent(this.path, this.movingTime, function () {\r\n                        // Quando o caminho é concluído, redefinimos as variáveis do mouse\r\n                        _this.isInIdleTime = true;\r\n                        _this.currentTime = 0;\r\n                        // Definimos o mouse para ir na direção oposta na próxima vez\r\n                        _this.path.reverse();\r\n                    }, function (currentPoint, nextPoint) {\r\n                        // Quando chegamos a um novo ponto no caminho, giramos o mouse para olhar para o próximo ponto\r\n                        mouseEntity.getComponent(Transform).lookAt(nextPoint);\r\n                    }));\r\n                }\r\n            }\r\n        };\r\n        MouseFollowPathComponent = __decorate([\r\n            Component(\"mouseFollowPathComponent\")\r\n        ], MouseFollowPathComponent);\r\n        return MouseFollowPathComponent;\r\n    }());\r\n    exports.MouseFollowPathComponent = MouseFollowPathComponent;\r\n});\r\ndefine(\"src/gameObjects/arcadeScreen\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/components/mouseFollowPathComponent\"], function (require, exports, index_2, mouseFollowPathComponent_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ArcadeScreen = void 0;\r\n    var ArcadeScreen = /** @class */ (function () {\r\n        function ArcadeScreen(tileSize, columnCount, rowCount, tileSpacing, initialPosition, screenRotation) {\r\n            var _this = this;\r\n            this.tilesPaintedByPlayer = 0;\r\n            // Criando os Materiais\r\n            var miceMaterial = new Material();\r\n            miceMaterial.albedoColor = Color3.Magenta();\r\n            var playerMaterial = new Material();\r\n            playerMaterial.albedoColor = Color3.Green();\r\n            var defaultMaterial = new Material();\r\n            defaultMaterial.albedoColor = Color3.Teal();\r\n            // Criando a Tela\r\n            var tileShape = new PlaneShape();\r\n            tileShape.withCollisions = false;\r\n            for (var column = 0; column < columnCount; column++) {\r\n                var _loop_1 = function (row) {\r\n                    // Calculando a Posição do Azulejo\r\n                    var tilePos = new Vector3(column * (tileSize.x + tileSpacing.x), row * (tileSize.y + tileSpacing.y), 0);\r\n                    tilePos = initialPosition.add(tilePos.rotate(screenRotation));\r\n                    // Criando a Entidade do Azulejo\r\n                    var tileEntity = new Entity();\r\n                    engine.addEntity(tileEntity);\r\n                    tileEntity.addComponent(new Transform({\r\n                        position: tilePos,\r\n                        scale: tileSize,\r\n                        rotation: screenRotation\r\n                    }));\r\n                    tileEntity.addComponent(tileShape);\r\n                    tileEntity.addComponent(defaultMaterial);\r\n                    tileEntity.addComponent(new OnClick(function () {\r\n                        if (tileEntity.getComponent(Material) != playerMaterial) {\r\n                            tileEntity.addComponentOrReplace(playerMaterial);\r\n                            _this.tilesPaintedByPlayer++;\r\n                            if (_this.tilesPaintedByPlayer === columnCount * rowCount) {\r\n                                _this.onCompletion();\r\n                            }\r\n                        }\r\n                    }));\r\n                    tileEntity.addComponent(new index_2.default.TriggerComponent(new index_2.default.TriggerBoxShape(new Vector3(0.15, 0.15, 0.15), Vector3.Zero()), 2, 2, function (entityEnter) {\r\n                        if (entityEnter.hasComponent(mouseFollowPathComponent_1.MouseFollowPathComponent)) {\r\n                            // Verifica se o azulejo foi pintado pelo jogador\r\n                            if (tileEntity.getComponent(Material) == playerMaterial) {\r\n                                // Diminui a variável de azulejos pintados\r\n                                _this.tilesPaintedByPlayer--;\r\n                            }\r\n                            tileEntity.addComponentOrReplace(miceMaterial);\r\n                        }\r\n                    }));\r\n                };\r\n                for (var row = 0; row < rowCount; row++) {\r\n                    _loop_1(row);\r\n                }\r\n            }\r\n        }\r\n        return ArcadeScreen;\r\n    }());\r\n    exports.ArcadeScreen = ArcadeScreen;\r\n});\r\n/**\r\n * Shared resources which may be used by multiple gameObjects, to improve performance.\r\n */\r\ndefine(\"src/resources\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.default = {\r\n        sounds: {\r\n            button: new AudioClip(\"sounds/button.mp3\"),\r\n            doorSqueak: new AudioClip(\"sounds/door_squeak.mp3\"),\r\n            moveObject1: new AudioClip(\"sounds/move_object1.mp3\"),\r\n            moveObject2: new AudioClip(\"sounds/move_object2.mp3\"),\r\n            whip: new AudioClip(\"sounds/room3/whip.mp3\"),\r\n            accessGranted: new AudioClip(\"sounds/access_granted.mp3\"),\r\n            accessDenied: new AudioClip(\"sounds/access_denied.mp3\"),\r\n            spotlight: new AudioClip(\"sounds/spotlight_on.mp3\"),\r\n            doorSqueek: new AudioClip(\"sounds/door_squeak.mp3\"),\r\n            fanAudio: new AudioClip(\"sounds/fan.mp3\")\r\n        },\r\n        models: {\r\n            book1: new GLTFShape(\"models/room4/Puzzle04_Book1.glb\"),\r\n            book2: new GLTFShape(\"models/room4/Puzzle04_Book2.glb\"),\r\n            candleHolder: new GLTFShape(\"models/room4/Puzzle04_CandleHolder.glb\"),\r\n            door1: new GLTFShape(\"models/room1/Puzzle01_Door.glb\"),\r\n            door2: new GLTFShape(\"models/room2/Puzzle02_Door.glb\"),\r\n            door3: new GLTFShape(\"models/room3/Puzzle03_Door.glb\"),\r\n            door4: new GLTFShape(\"models/room4/Puzzle04_LibraryDoor.glb\"),\r\n            door5: new GLTFShape(\"models/room5/Puzzle05_Door.glb\"),\r\n            door6: new GLTFShape(\"models/room6/Puzzle06_Door.glb\"),\r\n            door7: new GLTFShape(\"models/room7/Puzzle07_Door.glb\"),\r\n            door8: new GLTFShape(\"models/room8/Puzzle08_Door.glb\"),\r\n            door9: new GLTFShape(\"models/room9/Puzzle09_Door.glb\"),\r\n            mouseWill: new GLTFShape(\"models/room9/Puzzle09_MouseWill.glb\"),\r\n            fanModel: new GLTFShape(\"models/room9/Fan.glb\"),\r\n            drawer: new GLTFShape(\"models/room9/Drawer.glb\"),\r\n            kitchenModel: new GLTFShape(\"models/room9/Puzzle09_Game.glb\"),\r\n            mouse: new GLTFShape(\"models/room8/Mouse.glb\"),\r\n            ticket: new GLTFShape(\"models/room8/Ticket.glb\"),\r\n            numpad1: new GLTFShape(\"models/room5/Numpad1.glb\"),\r\n            numpad2: new GLTFShape(\"models/room6/Numpad2.glb\"),\r\n            carpet: new GLTFShape(\"models/room5/Puzzle05_Carpet.glb\"),\r\n            postit: new GLTFShape(\"models/room5/Puzzle05_Postit.glb\"),\r\n            pictureFrame: new GLTFShape(\"models/room5/Puzzle05_PictureMain.glb\"),\r\n            glass: new GLTFShape(\"models/room4/Puzzle04_WGlass.glb\"),\r\n            globe: new GLTFShape(\"models/room4/Puzzle04_Globe.glb\"),\r\n            plant1: new GLTFShape(\"models/room3/Puzzle03_Plant1.glb\"),\r\n            plant2: new GLTFShape(\"models/room3/Puzzle03_Plant2.glb\"),\r\n            plant3: new GLTFShape(\"models/room3/Puzzle03_Plant3.glb\"),\r\n            plant4: new GLTFShape(\"models/room3/Puzzle03_Plant4.glb\"),\r\n            roundButton: new GLTFShape(\"models/generic/Round_Button.glb\"),\r\n            scene: new GLTFShape(\"models/scene.glb\"),\r\n            squareButton: new GLTFShape(\"models/room2/Square_Button.glb\"),\r\n            telescope: new GLTFShape(\"models/room4/Puzzle04_Telescope.glb\"),\r\n            muna: new GLTFShape(\"models/room6/Puzzle06_Muna.glb\"),\r\n            spotlight: new GLTFShape(\"models/room6/spotlightlight.glb\"),\r\n            tvOff: new GLTFShape(\"models/room7/TVColor.glb\"),\r\n            tvOn: new GLTFShape(\"models/room7/TVOrange.glb\"),\r\n            lightOnSrc: \"models/room7/Puzzle07_LightOn.glb\",\r\n            lightOffSrc: \"models/room7/Puzzle07_LightOff.glb\"\r\n        },\r\n        textures: {\r\n            closeHintButton: new Texture(\"images/room5/button_close.png\"),\r\n            fernHint: new Texture(\"images/room5/fernpictureHint.png\"),\r\n            postitHint: new Texture(\"images/room5/Postit_001.png\"),\r\n            clearButton: new Texture(\"images/codepad/pwdpanel_clear.png\"),\r\n            closeButton: new Texture(\"images/codepad/button_close.png\"),\r\n            enterButton: new Texture(\"images/codepad/pwdpanel_enter.png\"),\r\n            inputBox: new Texture(\"images/codepad/pwdpanel_input.png\"),\r\n            numberButton: new Texture(\"images/codepad/pwdpanel_buttons.png\"),\r\n            panelBackground: new Texture(\"images/codepad/pwdpanel_bg.png\"),\r\n            textContainer: new Texture(\"images/dialogs/textContainer.png\"),\r\n            optionsContainer: new Texture(\"images/dialogs/optionsContainer.png\"),\r\n            playerPortraitDefault: new Texture(\"images/dialogs/player_default.png\", {\r\n                hasAlpha: true\r\n            }),\r\n            playerPortraitSurprised: new Texture(\"images/dialogs/player_surprised.png\", { hasAlpha: true }),\r\n            playerPortraitThinking: new Texture(\"images/dialogs/player_thinking.png\", {\r\n                hasAlpha: true\r\n            }),\r\n            npcPortraitDefault: new Texture(\"images/dialogs/dog_default.png\", {\r\n                hasAlpha: true\r\n            }),\r\n            npcPortraitSurprised: new Texture(\"images/dialogs/dog_surprised.png\", {\r\n                hasAlpha: true\r\n            }),\r\n            npcPortraitThinking: new Texture(\"images/dialogs/dog_thinking.png\", {\r\n                hasAlpha: true\r\n            }),\r\n            bubble: new Texture(\"images/room9/bubbleTexture.png\", {\r\n                hasAlpha: false\r\n            })\r\n        }\r\n    };\r\n});\r\ndefine(\"src/gameObjects/baseScene\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.BaseScene = void 0;\r\n    var BaseScene = /** @class */ (function (_super) {\r\n        __extends(BaseScene, _super);\r\n        function BaseScene() {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(resources_1.default.models.scene);\r\n            return _this;\r\n        }\r\n        return BaseScene;\r\n    }(Entity));\r\n    exports.BaseScene = BaseScene;\r\n});\r\ndefine(\"src/gameObjects/button\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Button = void 0;\r\n    var Button = /** @class */ (function (_super) {\r\n        __extends(Button, _super);\r\n        function Button(model, transform) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(model);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new AudioSource(resources_2.default.sounds.button));\r\n            _this.addComponent(new Animator());\r\n            _this.getComponent(Animator).addClip(new AnimationState(\"Button_Action\", { looping: false }));\r\n            return _this;\r\n        }\r\n        Button.prototype.press = function () {\r\n            this.getComponent(Animator)\r\n                .getClip(\"Button_Action\")\r\n                .stop(); // bug workaround\r\n            this.getComponent(Animator)\r\n                .getClip(\"Button_Action\")\r\n                .play();\r\n            this.getComponent(AudioSource).playOnce();\r\n        };\r\n        return Button;\r\n    }(Entity));\r\n    exports.Button = Button;\r\n});\r\ndefine(\"src/gameObjects/door\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Door = void 0;\r\n    var Door = /** @class */ (function (_super) {\r\n        __extends(Door, _super);\r\n        function Door(model, transform, sound) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(model);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new Animator());\r\n            _this.getComponent(Animator).addClip(new AnimationState(\"Door_Open\", { looping: false }));\r\n            _this.getComponent(Animator).addClip(new AnimationState(\"Door_Close\", { looping: false }));\r\n            _this.addComponent(new AudioSource(sound));\r\n            return _this;\r\n        }\r\n        Door.prototype.openDoor = function (playAudio) {\r\n            if (playAudio === void 0) { playAudio = true; }\r\n            if (!this.isOpen) {\r\n                this.isOpen = true;\r\n                this.getComponent(Animator)\r\n                    .getClip(\"Door_Close\")\r\n                    .stop(); // bug workaround\r\n                this.getComponent(Animator)\r\n                    .getClip(\"Door_Open\")\r\n                    .play();\r\n                if (playAudio) {\r\n                    this.getComponent(AudioSource).playOnce();\r\n                }\r\n            }\r\n        };\r\n        Door.prototype.closeDoor = function (playAudio) {\r\n            if (playAudio === void 0) { playAudio = true; }\r\n            if (this.isOpen) {\r\n                this.isOpen = false;\r\n                this.getComponent(Animator)\r\n                    .getClip(\"Door_Open\")\r\n                    .stop(); // bug workaround\r\n                this.getComponent(Animator)\r\n                    .getClip(\"Door_Close\")\r\n                    .play();\r\n                if (playAudio) {\r\n                    this.getComponent(AudioSource).playOnce();\r\n                }\r\n            }\r\n        };\r\n        Door.prototype.toggleDoor = function (playAudio) {\r\n            if (playAudio === void 0) { playAudio = true; }\r\n            if (this.isOpen) {\r\n                this.closeDoor(playAudio);\r\n            }\r\n            else {\r\n                this.openDoor(playAudio);\r\n            }\r\n        };\r\n        return Door;\r\n    }(Entity));\r\n    exports.Door = Door;\r\n});\r\ndefine(\"src/gameObjects/model\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Model = void 0;\r\n    var Model = /** @class */ (function (_super) {\r\n        __extends(Model, _super);\r\n        function Model(model, transform) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(model);\r\n            return _this;\r\n        }\r\n        return Model;\r\n    }(Entity));\r\n    exports.Model = Model;\r\n});\r\ndefine(\"src/gameObjects/mouse\", [\"require\", \"exports\", \"src/resources\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, resources_3, index_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Mouse = void 0;\r\n    var Mouse = /** @class */ (function (_super) {\r\n        __extends(Mouse, _super);\r\n        function Mouse(transform) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(resources_3.default.models.mouse);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new Animator());\r\n            _this.getComponent(Animator).addClip(new AnimationState(\"Mouse_Action\"));\r\n            _this.getComponent(Animator)\r\n                .getClip(\"Mouse_Action\")\r\n                .play();\r\n            _this.addComponent(new index_3.default.TriggerComponent(new index_3.default.TriggerBoxShape(new Vector3(0.05, 0.05, 0.05), Vector3.Zero()), 2, 2));\r\n            return _this;\r\n        }\r\n        return Mouse;\r\n    }(Entity));\r\n    exports.Mouse = Mouse;\r\n});\r\ndefine(\"src/gameObjects/movableEntity\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, index_4) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MovableEntity = void 0;\r\n    var MovableEntity = /** @class */ (function (_super) {\r\n        __extends(MovableEntity, _super);\r\n        function MovableEntity(model, transform, sound, deltaPosition, moveTime) {\r\n            if (moveTime === void 0) { moveTime = 0.5; }\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(model);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new AudioSource(sound));\r\n            var startPos = transform.position;\r\n            var endPos = transform.position.add(deltaPosition);\r\n            _this.addComponent(new index_4.default.ToggleComponent(index_4.default.ToggleState.Off, function (value) {\r\n                if (value == index_4.default.ToggleState.On) {\r\n                    _this.addComponentOrReplace(new index_4.default.MoveTransformComponent(_this.getComponent(Transform).position, endPos, moveTime));\r\n                }\r\n                else {\r\n                    _this.addComponentOrReplace(new index_4.default.MoveTransformComponent(_this.getComponent(Transform).position, startPos, moveTime));\r\n                }\r\n                _this.getComponent(AudioSource).playOnce();\r\n            }));\r\n            return _this;\r\n        }\r\n        return MovableEntity;\r\n    }(Entity));\r\n    exports.MovableEntity = MovableEntity;\r\n});\r\ndefine(\"src/gameObjects/numPadLock\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_4) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.NumPadLock = void 0;\r\n    var NumPadLock = /** @class */ (function (_super) {\r\n        __extends(NumPadLock, _super);\r\n        function NumPadLock(model) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(model);\r\n            return _this;\r\n        }\r\n        NumPadLock.prototype.playButtonPressed = function () {\r\n            var clip = this.addComponentOrReplace(new AudioSource(resources_4.default.sounds.button));\r\n            clip.playOnce();\r\n        };\r\n        NumPadLock.prototype.playAccessGranted = function () {\r\n            var clip = this.addComponentOrReplace(new AudioSource(resources_4.default.sounds.accessGranted));\r\n            clip.playOnce();\r\n        };\r\n        NumPadLock.prototype.playAccessDenied = function () {\r\n            var clip = this.addComponentOrReplace(new AudioSource(resources_4.default.sounds.accessDenied));\r\n            clip.playOnce();\r\n        };\r\n        return NumPadLock;\r\n    }(Entity));\r\n    exports.NumPadLock = NumPadLock;\r\n});\r\ndefine(\"src/gameObjects/rotatableEntity\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, index_5) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.RotatableEntity = void 0;\r\n    /**\r\n     * An object which rotates back and forth when toggled.\r\n     */\r\n    var RotatableEntity = /** @class */ (function (_super) {\r\n        __extends(RotatableEntity, _super);\r\n        function RotatableEntity(model, transform, audio, rotation) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(model);\r\n            _this.addComponent(new Transform(transform));\r\n            if (audio) {\r\n                _this.addComponent(new AudioSource(audio));\r\n            }\r\n            var startRot = transform.rotation;\r\n            var endRot = rotation;\r\n            _this.addComponent(new index_5.default.ToggleComponent(index_5.default.ToggleState.Off, function (value) {\r\n                if (value == index_5.default.ToggleState.On) {\r\n                    _this.addComponentOrReplace(new index_5.default.RotateTransformComponent(_this.getComponent(Transform).rotation, endRot, 0.5));\r\n                }\r\n                else {\r\n                    _this.addComponentOrReplace(new index_5.default.RotateTransformComponent(_this.getComponent(Transform).rotation, startRot, 0.5));\r\n                }\r\n                _this.getComponent(AudioSource).playOnce();\r\n            }));\r\n            return _this;\r\n        }\r\n        return RotatableEntity;\r\n    }(Entity));\r\n    exports.RotatableEntity = RotatableEntity;\r\n});\r\ndefine(\"src/gameObjects/spotlight\", [\"require\", \"exports\", \"src/resources\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, resources_5, index_6) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Spotlight = void 0;\r\n    var Spotlight = /** @class */ (function (_super) {\r\n        __extends(Spotlight, _super);\r\n        function Spotlight(transform, hiddenNumberValue) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new AudioSource(resources_5.default.sounds.spotlight));\r\n            _this.addComponent(new index_6.default.ToggleComponent(index_6.default.ToggleState.Off, function (value) {\r\n                if (value == index_6.default.ToggleState.On) {\r\n                    _this.addComponent(resources_5.default.models.spotlight);\r\n                    var hiddenNumber = new Entity();\r\n                    hiddenNumber.addComponent(new TextShape());\r\n                    hiddenNumber.getComponent(TextShape).value = hiddenNumberValue;\r\n                    hiddenNumber.getComponent(TextShape).fontSize = 5;\r\n                    hiddenNumber.setParent(_this);\r\n                    hiddenNumber.addComponent(new Transform({ position: new Vector3(0, 0.9, -0.4) }));\r\n                    _this.getComponent(AudioSource).playOnce();\r\n                }\r\n            }));\r\n            return _this;\r\n        }\r\n        return Spotlight;\r\n    }(Entity));\r\n    exports.Spotlight = Spotlight;\r\n});\r\ndefine(\"src/gameObjects/ticket\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_6) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Ticket = void 0;\r\n    var Ticket = /** @class */ (function (_super) {\r\n        __extends(Ticket, _super);\r\n        function Ticket(transform) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(resources_6.default.models.ticket);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new Animator());\r\n            _this.getComponent(Animator).addClip(new AnimationState(\"Ticket_Action\", { looping: false }));\r\n            return _this;\r\n        }\r\n        Ticket.prototype.emitTicket = function () {\r\n            this.getComponent(Animator)\r\n                .getClip(\"Ticket_Action\")\r\n                .play();\r\n        };\r\n        return Ticket;\r\n    }(Entity));\r\n    exports.Ticket = Ticket;\r\n});\r\ndefine(\"src/gameObjects/timer\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Timer = void 0;\r\n    /**\r\n     * Um temporizador que pode ser colocado em uma parede.\r\n     */\r\n    var Timer = /** @class */ (function (_super) {\r\n        __extends(Timer, _super);\r\n        // Armazena a entidade de texto para uso no método abaixo\r\n        function Timer(transform) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(new Transform(transform));\r\n            // O valor a ser exibido será controlado pela própria cena\r\n            _this.addComponent(new TextShape());\r\n            _this.getComponent(TextShape).color = Color3.Red();\r\n            _this.getComponent(TextShape).fontSize = 5;\r\n            return _this;\r\n        }\r\n        Timer.prototype.formatTimeString = function (seconds) {\r\n            var mins = Math.floor(seconds / 60);\r\n            var secs = Math.floor(seconds % 60);\r\n            return (mins.toLocaleString(undefined, { minimumIntegerDigits: 2 }) +\r\n                \":\" +\r\n                secs.toLocaleString(undefined, { minimumIntegerDigits: 2 }));\r\n        };\r\n        // Este método pode ser chamado a qualquer momento para alterar o número de segundos no relógio\r\n        Timer.prototype.updateTimeString = function (seconds) {\r\n            this.getComponent(TextShape).value = this.formatTimeString(seconds);\r\n        };\r\n        return Timer;\r\n    }(Entity));\r\n    exports.Timer = Timer;\r\n});\r\ndefine(\"src/components/toggleModelComponent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ToggleModelComponent = void 0;\r\n    var ToggleModelComponent = /** @class */ (function () {\r\n        function ToggleModelComponent(entity, onModel, offModel) {\r\n            this.onModel = onModel;\r\n            var onEntity = new Entity();\r\n            onEntity.addComponent(this.onModel);\r\n            onEntity.setParent(entity);\r\n            this.offModel = offModel;\r\n            var offEntity = new Entity();\r\n            offEntity.addComponent(this.offModel);\r\n            offEntity.setParent(entity);\r\n            this.onModel.visible = false;\r\n        }\r\n        ToggleModelComponent.prototype.isOn = function () {\r\n            return this.onModel.visible;\r\n        };\r\n        ToggleModelComponent.prototype.toggle = function () {\r\n            if (this.isOn()) {\r\n                this.onModel.visible = false;\r\n                this.offModel.visible = true;\r\n            }\r\n            else {\r\n                this.offModel.visible = false;\r\n                this.onModel.visible = true;\r\n            }\r\n        };\r\n        ToggleModelComponent = __decorate([\r\n            Component(\"toggleModelComponent\")\r\n        ], ToggleModelComponent);\r\n        return ToggleModelComponent;\r\n    }());\r\n    exports.ToggleModelComponent = ToggleModelComponent;\r\n});\r\ndefine(\"src/gameObjects/toggleEntity\", [\"require\", \"exports\", \"src/components/toggleModelComponent\"], function (require, exports, toggleModelComponent_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ToggleEntity = void 0;\r\n    var ToggleEntity = /** @class */ (function (_super) {\r\n        __extends(ToggleEntity, _super);\r\n        function ToggleEntity(transform, onModel, offModel) {\r\n            var _this = _super.call(this) || this;\r\n            engine.addEntity(_this);\r\n            _this.addComponent(new Transform(transform));\r\n            _this.addComponent(new toggleModelComponent_1.ToggleModelComponent(_this, onModel, offModel));\r\n            return _this;\r\n        }\r\n        return ToggleEntity;\r\n    }(Entity));\r\n    exports.ToggleEntity = ToggleEntity;\r\n});\r\ndefine(\"src/gameObjects/index\", [\"require\", \"exports\", \"src/gameObjects/arcadeScreen\", \"src/gameObjects/baseScene\", \"src/gameObjects/button\", \"src/gameObjects/door\", \"src/gameObjects/model\", \"src/gameObjects/mouse\", \"src/gameObjects/movableEntity\", \"src/gameObjects/numPadLock\", \"src/gameObjects/rotatableEntity\", \"src/gameObjects/spotlight\", \"src/gameObjects/ticket\", \"src/gameObjects/timer\", \"src/gameObjects/toggleEntity\"], function (require, exports, arcadeScreen_1, baseScene_1, button_1, door_1, model_1, mouse_1, movableEntity_1, numPadLock_1, rotatableEntity_1, spotlight_1, ticket_1, timer_1, toggleEntity_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ToggleEntity = exports.Timer = exports.Ticket = exports.Spotlight = exports.RotatableEntity = exports.NumPadLock = exports.MovableEntity = exports.Mouse = exports.Model = exports.Door = exports.Button = exports.BaseScene = exports.ArcadeScreen = void 0;\r\n    Object.defineProperty(exports, \"ArcadeScreen\", { enumerable: true, get: function () { return arcadeScreen_1.ArcadeScreen; } });\r\n    Object.defineProperty(exports, \"BaseScene\", { enumerable: true, get: function () { return baseScene_1.BaseScene; } });\r\n    Object.defineProperty(exports, \"Button\", { enumerable: true, get: function () { return button_1.Button; } });\r\n    Object.defineProperty(exports, \"Door\", { enumerable: true, get: function () { return door_1.Door; } });\r\n    Object.defineProperty(exports, \"Model\", { enumerable: true, get: function () { return model_1.Model; } });\r\n    Object.defineProperty(exports, \"Mouse\", { enumerable: true, get: function () { return mouse_1.Mouse; } });\r\n    Object.defineProperty(exports, \"MovableEntity\", { enumerable: true, get: function () { return movableEntity_1.MovableEntity; } });\r\n    Object.defineProperty(exports, \"NumPadLock\", { enumerable: true, get: function () { return numPadLock_1.NumPadLock; } });\r\n    Object.defineProperty(exports, \"RotatableEntity\", { enumerable: true, get: function () { return rotatableEntity_1.RotatableEntity; } });\r\n    Object.defineProperty(exports, \"Spotlight\", { enumerable: true, get: function () { return spotlight_1.Spotlight; } });\r\n    Object.defineProperty(exports, \"Ticket\", { enumerable: true, get: function () { return ticket_1.Ticket; } });\r\n    Object.defineProperty(exports, \"Timer\", { enumerable: true, get: function () { return timer_1.Timer; } });\r\n    Object.defineProperty(exports, \"ToggleEntity\", { enumerable: true, get: function () { return toggleEntity_1.ToggleEntity; } });\r\n});\r\ndefine(\"src/scenes/room1\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/gameObjects/index\", \"src/resources\"], function (require, exports, index_7, index_8, resources_7) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom1 = void 0;\r\n    function CreateRoom1() {\r\n        var door = new index_8.Door(resources_7.default.models.door1, { position: new Vector3(21.18, 10.8, 24.5) }, resources_7.default.sounds.doorSqueak);\r\n        // Uma estátua bloqueia a entrada\r\n        var munaStatue = new index_8.MovableEntity(resources_7.default.models.muna, { position: new Vector3(21.89, 10.8, 23.07),\r\n            rotation: Quaternion.Euler(0, -90, 0) // Rotaciona em 180 graus em torno do eixo Y\r\n        }, resources_7.default.sounds.moveObject1, new Vector3(2, 0, 0), 1.5);\r\n        door.addComponent(new OnPointerDown(function () {\r\n            munaStatue.getComponent(index_7.default.ToggleComponent).toggle();\r\n            door.openDoor();\r\n        }));\r\n    }\r\n    exports.CreateRoom1 = CreateRoom1;\r\n});\r\ndefine(\"src/scenes/room2\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/gameObjects/index\", \"src/resources\"], function (require, exports, index_9, index_10, resources_8) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom2 = void 0;\r\n    var openDoorTime = 5;\r\n    function CreateRoom2() {\r\n        var door = new index_10.Door(resources_8.default.models.door2, { position: new Vector3(24.1, 5.51634, 24.9) }, resources_8.default.sounds.doorSqueak);\r\n        var countdownClock = new index_10.Timer({\r\n            position: new Vector3(25.1272, 9.51119, 25.2116),\r\n            rotation: Quaternion.Euler(20, 180, 0)\r\n        });\r\n        countdownClock.updateTimeString(openDoorTime);\r\n        var button = new index_10.Button(resources_8.default.models.squareButton, {\r\n            position: new Vector3(26.3714, 6.89, 26.8936)\r\n        });\r\n        var munaStatue = new index_10.MovableEntity(resources_8.default.models.muna, { position: new Vector3(25.14, 5.51634, 26.22),\r\n            rotation: Quaternion.Euler(0, 90, 0) // Rotaciona em 180 graus em torno do eixo Y\r\n        }, resources_8.default.sounds.moveObject1, new Vector3(0, 0, 4));\r\n        button.addComponent(new OnPointerDown(function () {\r\n            if (!countdownClock.hasComponent(index_9.default.Interval)) {\r\n                button.press();\r\n                door.openDoor();\r\n                munaStatue.getComponent(index_9.default.ToggleComponent).toggle();\r\n                var timeRemaining_1 = openDoorTime;\r\n                countdownClock.addComponent(new index_9.default.Interval(1000, function () {\r\n                    timeRemaining_1--;\r\n                    if (timeRemaining_1 > 0) {\r\n                        countdownClock.updateTimeString(timeRemaining_1);\r\n                    }\r\n                    else {\r\n                        countdownClock.removeComponent(index_9.default.Interval);\r\n                        door.closeDoor();\r\n                        munaStatue.getComponent(index_9.default.ToggleComponent).toggle();\r\n                        countdownClock.updateTimeString(openDoorTime);\r\n                    }\r\n                }));\r\n            }\r\n        }));\r\n    }\r\n    exports.CreateRoom2 = CreateRoom2;\r\n});\r\ndefine(\"src/scenes/room3\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/gameObjects/index\", \"src/resources\"], function (require, exports, index_11, index_12, resources_9) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom3 = void 0;\r\n    function CreateRoom3() {\r\n        var door = new index_12.Door(resources_9.default.models.door3, { position: new Vector3(24.1166, 7.17, 15.78) }, resources_9.default.sounds.whip);\r\n        door.isOpen = true;\r\n        var trigger = new Entity();\r\n        engine.addEntity(trigger);\r\n        trigger.addComponent(new Transform({ position: new Vector3(25.5, 7.17, 19.5) }));\r\n        trigger.addComponent(new index_11.default.TriggerComponent(new index_11.default.TriggerBoxShape(new Vector3(4.2, 3, 8), Vector3.Zero()), 0, 0, null, null, function () {\r\n            door.closeDoor();\r\n        }, function () {\r\n            door.openDoor(false);\r\n        }));\r\n        var button = new index_12.Button(resources_9.default.models.roundButton, {\r\n            position: new Vector3(22.4456, 5.92706, 24.18)\r\n        });\r\n        button.addComponent(new OnPointerDown(function () {\r\n            button.press();\r\n            door.openDoor(false);\r\n            trigger.getComponent(index_11.default.TriggerComponent).enabled = false;\r\n        }));\r\n        var fern1 = new index_12.MovableEntity(resources_9.default.models.plant1, { position: new Vector3(23.2489, 5.5071, 23.813) }, resources_9.default.sounds.moveObject1, new Vector3(0, 0, -0.5));\r\n        fern1.addComponent(new OnPointerDown(function () {\r\n            fern1.getComponent(index_11.default.ToggleComponent).toggle();\r\n        }));\r\n        var fern2 = new index_12.MovableEntity(resources_9.default.models.plant2, { position: new Vector3(26.9356, 5.52006, 23.4817) }, resources_9.default.sounds.moveObject1, new Vector3(0, 0, -0.5));\r\n        fern2.addComponent(new OnPointerDown(function () {\r\n            fern2.getComponent(index_11.default.ToggleComponent).toggle();\r\n        }));\r\n        var fern3 = new index_12.MovableEntity(resources_9.default.models.plant3, { position: new Vector3(23.4513, 5.50571, 16.8218) }, resources_9.default.sounds.moveObject1, new Vector3(0, 0, 0.5));\r\n        fern3.addComponent(new OnPointerDown(function () {\r\n            fern3.getComponent(index_11.default.ToggleComponent).toggle();\r\n        }));\r\n        var fern4 = new index_12.MovableEntity(resources_9.default.models.plant4, { position: new Vector3(26.9878, 5.51511, 16.8279) }, resources_9.default.sounds.moveObject1, new Vector3(0, 0, 0.5));\r\n        fern4.addComponent(new OnPointerDown(function () {\r\n            fern4.getComponent(index_11.default.ToggleComponent).toggle();\r\n        }));\r\n    }\r\n    exports.CreateRoom3 = CreateRoom3;\r\n});\r\ndefine(\"src/scenes/room4\", [\"require\", \"exports\", \"src/gameObjects/index\", \"node_modules/decentraland-ecs-utils/index\", \"src/resources\"], function (require, exports, index_13, index_14, resources_10) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom4 = void 0;\r\n    // Função para criar a sala 4\r\n    function CreateRoom4() {\r\n        // Criando uma estante móvel\r\n        var bookshelf = new index_13.MovableEntity(resources_10.default.models.door4, new Transform({\r\n            position: new Vector3(20.6557, 5.4996, 15.041)\r\n        }), resources_10.default.sounds.moveObject1, new Vector3(1.5, 0, 0), 3);\r\n        // Criando um livro móvel\r\n        var movableBook = new index_13.MovableEntity(resources_10.default.models.book2, new Transform({\r\n            position: new Vector3(20.41, 6.4118, 10.4922)\r\n        }), resources_10.default.sounds.moveObject1, new Vector3(0, 0, -0.2));\r\n        movableBook.addComponent(new OnPointerDown(function () {\r\n            movableBook.getComponent(index_14.default.ToggleComponent).toggle();\r\n        }));\r\n        // Criando um copo de vinho móvel\r\n        var wineGlass = new index_13.MovableEntity(resources_10.default.models.glass, new Transform({\r\n            position: new Vector3(25.7505, 6.95786, 10.5917)\r\n        }), resources_10.default.sounds.moveObject2, new Vector3(0.2, 0, 0));\r\n        wineGlass.addComponent(new OnPointerDown(function () {\r\n            wineGlass.getComponent(index_14.default.ToggleComponent).toggle();\r\n        }));\r\n        // Criando um telescópio rotacionável\r\n        var telescope = new index_13.RotatableEntity(resources_10.default.models.telescope, new Transform({\r\n            position: new Vector3(22.6554, 7.02615, 10.6208)\r\n        }), resources_10.default.sounds.moveObject1, Quaternion.Euler(0, 127, 0));\r\n        telescope.addComponent(new OnPointerDown(function () {\r\n            telescope.getComponent(index_14.default.ToggleComponent).toggle();\r\n        }));\r\n        // Criando um globo terrestre rotacionável\r\n        var globe = new index_13.RotatableEntity(resources_10.default.models.globe, new Transform({\r\n            position: new Vector3(21.2191, 7.11234, 10.6817),\r\n            rotation: Quaternion.Euler(0.146, 34.9, -33.8)\r\n        }), resources_10.default.sounds.moveObject1, Quaternion.Euler(174, -26.43, -149.37));\r\n        globe.addComponent(new OnPointerDown(function () {\r\n            globe.getComponent(index_14.default.ToggleComponent).toggle();\r\n        }));\r\n        // Criando um livro rotacionável\r\n        var rotatableBook = new index_13.RotatableEntity(resources_10.default.models.book1, new Transform({\r\n            position: new Vector3(15.8321, 7.83095, 14.1252)\r\n        }), resources_10.default.sounds.moveObject1, Quaternion.Euler(0, 0, -25));\r\n        rotatableBook.addComponent(new OnPointerDown(function () {\r\n            rotatableBook.getComponent(index_14.default.ToggleComponent).toggle();\r\n        }));\r\n        // Criando um suporte para velas rotacionável\r\n        var candleHolder = new index_13.RotatableEntity(resources_10.default.models.candleHolder, new Transform({\r\n            position: new Vector3(17.5056, 7.61611, 15.3835)\r\n        }), resources_10.default.sounds.moveObject2, Quaternion.Euler(0, 0, 30));\r\n        candleHolder.addComponent(new OnPointerDown(function () {\r\n            candleHolder.getComponent(index_14.default.ToggleComponent).toggle();\r\n            bookshelf.getComponent(index_14.default.ToggleComponent).toggle();\r\n        }));\r\n    }\r\n    exports.CreateRoom4 = CreateRoom4;\r\n});\r\ndefine(\"src/ui/imageHint\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_11) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.ImageHint = void 0;\r\n    /**\r\n     * Classe para exibir dicas de imagem.\r\n     */\r\n    var ImageHint = /** @class */ (function () {\r\n        function ImageHint(gameCanvas, texture) {\r\n            var _this = this;\r\n            this.container = new UIContainerRect(gameCanvas);\r\n            this.container.width = \"100%\";\r\n            this.container.height = \"100%\";\r\n            // Adicionar a imagem principal\r\n            var hintImage = new UIImage(this.container, texture);\r\n            hintImage.sourceWidth = 512;\r\n            hintImage.sourceHeight = 512;\r\n            hintImage.width = 512;\r\n            hintImage.height = 512;\r\n            // E adicionar um botão de fechar no canto superior direito\r\n            var close = new UIImage(this.container, resources_11.default.textures.closeHintButton);\r\n            close.sourceWidth = 92;\r\n            close.sourceHeight = 92;\r\n            close.width = 46;\r\n            close.height = 46;\r\n            close.positionX = 256;\r\n            close.positionY = 256;\r\n            // O UI tem uma forma diferente de registrar suporte para OnClick\r\n            close.onClick = new OnClick(function () {\r\n                _this.container.visible = false;\r\n            });\r\n        }\r\n        return ImageHint;\r\n    }());\r\n    exports.ImageHint = ImageHint;\r\n});\r\ndefine(\"src/ui/keypad\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_12) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Keypad = void 0;\r\n    // Constantes para posicionamento\r\n    var panelPosition = new Vector2(12, -24);\r\n    var buttonSize = new Vector2(55, 55);\r\n    var buttonSpace = new Vector2(5, 5);\r\n    /**\r\n     * Classe para o teclado numérico.\r\n     */\r\n    var Keypad = /** @class */ (function () {\r\n        function Keypad(parent) {\r\n            var _this = this;\r\n            this.container = new UIContainerRect(parent);\r\n            this.container.positionX = -50;\r\n            this.container.positionY = 50;\r\n            this.container.width = \"100%\";\r\n            this.container.height = \"100%\";\r\n            // Exibir uma imagem no fundo para o teclado numérico\r\n            var panelBackground = new UIImage(this.container, resources_12.default.textures.panelBackground);\r\n            panelBackground.sourceWidth = 918;\r\n            panelBackground.sourceHeight = 1300;\r\n            panelBackground.width = 310;\r\n            panelBackground.height = 420;\r\n            panelBackground.positionX = 70;\r\n            panelBackground.positionY = -55;\r\n            // Adicionar um botão de fechar próximo ao canto superior direito\r\n            var closeImage = new UIImage(this.container, resources_12.default.textures.closeButton);\r\n            closeImage.sourceWidth = 92;\r\n            closeImage.sourceHeight = 92;\r\n            closeImage.width = 32;\r\n            closeImage.height = 32;\r\n            closeImage.positionX = 194;\r\n            closeImage.positionY = 108;\r\n            // Quando o botão de fechar é clicado, esconder o UI\r\n            closeImage.onClick = new OnClick(function () {\r\n                _this.container.visible = false;\r\n            });\r\n            // 3 caixas para mostrar o código inserido ou a mensagem atual\r\n            this.panelInputs = [];\r\n            for (var i = 0; i < 3; i++) {\r\n                var inputImage = new UIImage(this.container, resources_12.default.textures.inputBox);\r\n                var inputSlot = new UIText(this.container);\r\n                inputImage.sourceWidth = 173;\r\n                inputImage.sourceHeight = 173;\r\n                inputImage.width = inputSlot.width = buttonSize.x;\r\n                inputImage.height = inputSlot.height = buttonSize.y;\r\n                inputImage.positionX = inputSlot.positionX =\r\n                    i * (buttonSpace.x + buttonSize.x) + 5;\r\n                inputImage.positionY = inputSlot.positionY = 45;\r\n                inputSlot.fontAutoSize = true;\r\n                inputSlot.hTextAlign = \"center\";\r\n                this.panelInputs.push(inputSlot);\r\n            }\r\n            // Botões de entrada do usuário\r\n            for (var col = 0; col < 3; col++) {\r\n                var _loop_2 = function (row) {\r\n                    // O valor representado por este botão\r\n                    var value;\r\n                    if (col == 1 && row == 3) {\r\n                        // O botão 0 é um caso especial\r\n                        value = 0;\r\n                    }\r\n                    else {\r\n                        value = row * 3 + col + 1;\r\n                    }\r\n                    // Criar o botão e seu evento\r\n                    var buttonImage = null;\r\n                    if (col == 0 && row == 3) {\r\n                        // O botão de limpar no canto inferior esquerdo\r\n                        buttonImage = new UIImage(this_1.container, resources_12.default.textures.clearButton);\r\n                        // Chamar onReset quando clicado\r\n                        buttonImage.onClick = new OnClick(function () {\r\n                            _this.onReset();\r\n                        });\r\n                    }\r\n                    else if (col == 2 && row == 3) {\r\n                        // O botão de enviar no canto inferior direito\r\n                        buttonImage = new UIImage(this_1.container, resources_12.default.textures.enterButton);\r\n                        // Chamar onSubmit quando clicado\r\n                        buttonImage.onClick = new OnClick(function () {\r\n                            _this.onSubmit();\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Botão de valor numérico\r\n                        buttonImage = new UIImage(this_1.container, resources_12.default.textures.numberButton);\r\n                        var numberText = new UIText(buttonImage);\r\n                        numberText.isPointerBlocker = false;\r\n                        numberText.positionX = -23;\r\n                        numberText.fontAutoSize = true;\r\n                        numberText.hTextAlign = \"center\";\r\n                        numberText.value = value.toString();\r\n                        // Chamar onInput quando clicado\r\n                        buttonImage.onClick = new OnClick(function () {\r\n                            _this.onInput(value);\r\n                        });\r\n                    }\r\n                    // Configurar a imagem do botão\r\n                    buttonImage.sourceWidth = 171;\r\n                    buttonImage.sourceHeight = 171;\r\n                    buttonImage.width = buttonSize.x;\r\n                    buttonImage.height = buttonSize.y;\r\n                    buttonImage.positionX =\r\n                        panelPosition.x + col * (buttonSpace.x + buttonSize.x);\r\n                    buttonImage.positionY =\r\n                        panelPosition.y - row * (buttonSpace.y + buttonSize.y);\r\n                };\r\n                var this_1 = this;\r\n                for (var row = 0; row < 4; row++) {\r\n                    _loop_2(row);\r\n                }\r\n            }\r\n        }\r\n        // Exibir uma mensagem acima do teclado numérico, até 3 caracteres\r\n        Keypad.prototype.display = function (message, color) {\r\n            if (color === void 0) { color = Color4.White(); }\r\n            for (var i = 0; i < this.panelInputs.length; i++) {\r\n                var character = message.length > i ? message[i] : \"\";\r\n                this.panelInputs[i].value = character;\r\n                this.panelInputs[i].color = color;\r\n            }\r\n        };\r\n        return Keypad;\r\n    }());\r\n    exports.Keypad = Keypad;\r\n});\r\ndefine(\"src/modules/simpleDialog\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/actionsSequenceSystem/actionsSequenceSystem\"], function (require, exports, actionsSequenceSystem_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.SimpleDialog = void 0;\r\n    var SimpleDialog = /** @class */ (function () {\r\n        function SimpleDialog(dialogConfig) {\r\n            var _this = this;\r\n            this.portraitContainers = [];\r\n            this.dialogContainer = new UIContainerRect(dialogConfig.canvas);\r\n            this.dialogContainer.width = \"100%\";\r\n            this.dialogContainer.height = \"100%\";\r\n            this.portraitContainers.push(new PortraitContainer(dialogConfig.leftPortrait, this.dialogContainer));\r\n            this.portraitContainers.push(new PortraitContainer(dialogConfig.rightPortrait, this.dialogContainer));\r\n            this.textContainer = new DialogTextContainer(dialogConfig.dialogText, this.dialogContainer);\r\n            this.optionsContainer = new OptionContainer(dialogConfig.optionsContainer, this.dialogContainer);\r\n            if (this.textContainer.background) {\r\n                this.textContainer.background.onClick = new OnClick(function () {\r\n                    if (_this.actionsSequenceSystem) {\r\n                        if (_this.actionsSequenceSystem.getRunningAction() instanceof SayWithCallbackAction) {\r\n                            _this.actionsSequenceSystem.getRunningAction().skipDialog();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            this.gameCanvas = dialogConfig.canvas;\r\n            this.hide();\r\n        }\r\n        /**\r\n         * play dialog tree\r\n         * @param dialogTree dialog tree instance\r\n         */\r\n        SimpleDialog.prototype.runDialogTree = function (dialogTree) {\r\n            var _this = this;\r\n            this.portraitContainers.forEach(function (portrait) {\r\n                portrait.hide();\r\n            });\r\n            this.hideOptions();\r\n            this.show();\r\n            dialogTree.simpleDialogInstance = this;\r\n            this.actionsSequenceSystem = new actionsSequenceSystem_2.ActionsSequenceSystem();\r\n            this.actionsSequenceSystem.startSequence(dialogTree.actionsSequenceBuilder);\r\n            this.actionsSequenceSystem.setOnFinishCallback(function () {\r\n                engine.removeSystem(_this.actionsSequenceSystem);\r\n                _this.actionsSequenceSystem = null;\r\n                if (_this.onFinishCallback)\r\n                    _this.onFinishCallback();\r\n                _this.hide();\r\n            });\r\n            engine.addSystem(this.actionsSequenceSystem);\r\n        };\r\n        /**\r\n         * set callback for when dialog finish\r\n         * @param onFinishCallback callback\r\n         */\r\n        SimpleDialog.prototype.setFinishCallback = function (onFinishCallback) {\r\n            this.onFinishCallback = onFinishCallback;\r\n        };\r\n        /**\r\n         * get if dialog is running\r\n         */\r\n        SimpleDialog.prototype.isDialogTreeRunning = function () {\r\n            if (this.actionsSequenceSystem == null)\r\n                return false;\r\n            else\r\n                return this.actionsSequenceSystem.isRunning();\r\n        };\r\n        /**\r\n         * set portrait\r\n         * @param portraitIndex portrait index\r\n         * @param texture texture for portrait\r\n         * @param imageConfig portrait's image configuration\r\n         */\r\n        SimpleDialog.prototype.setPortrait = function (portraitIndex, texture, imageConfig) {\r\n            this.portraitContainers[portraitIndex].setImage(texture, imageConfig);\r\n        };\r\n        /**\r\n         * set protrait image configuration\r\n         * @param portraitIndex portrait index\r\n         * @param imageConfig portrait's image configuration\r\n         */\r\n        SimpleDialog.prototype.setPortraitImageConfig = function (portraitIndex, imageConfig) {\r\n            this.portraitContainers[portraitIndex].configPortraitImage(imageConfig);\r\n        };\r\n        /**\r\n         * set text in dialog box\r\n         * @param text text value\r\n         * @param textConfig configuration for text\r\n         */\r\n        SimpleDialog.prototype.setText = function (text, textConfig) {\r\n            this.textContainer.text.value = text;\r\n            if (textConfig) {\r\n                configText(this.textContainer.text, textConfig);\r\n                this.textContainer.config.textConfig = textConfig;\r\n            }\r\n        };\r\n        /**\r\n         * configure text in dialog box\r\n         * @param textConfig text's configuration\r\n         */\r\n        SimpleDialog.prototype.setTextConfig = function (textConfig) {\r\n            if (textConfig) {\r\n                configText(this.textContainer.text, textConfig);\r\n                this.textContainer.config.textConfig = textConfig;\r\n            }\r\n        };\r\n        /**\r\n         * show dialog\r\n         */\r\n        SimpleDialog.prototype.show = function () {\r\n            this.dialogContainer.visible = true;\r\n        };\r\n        /**\r\n         * hide dialog\r\n         */\r\n        SimpleDialog.prototype.hide = function () {\r\n            this.dialogContainer.visible = false;\r\n        };\r\n        /**\r\n         * show a portrait\r\n         * @param portraitIndex portrait's index to show\r\n         */\r\n        SimpleDialog.prototype.showPortrait = function (portraitIndex) {\r\n            this.portraitContainers[portraitIndex].show();\r\n        };\r\n        /**\r\n         * hide a portrait\r\n         * @param portraitIndex portrait's index to hide\r\n         */\r\n        SimpleDialog.prototype.hidePortrait = function (portraitIndex) {\r\n            this.portraitContainers[portraitIndex].hide();\r\n        };\r\n        /**\r\n         * get configured dialog text speed\r\n         */\r\n        SimpleDialog.prototype.getConfigDialogTextSpeed = function () {\r\n            if (this.textContainer.config.textSpeed)\r\n                return this.textContainer.config.textSpeed;\r\n            return 15;\r\n        };\r\n        /**\r\n         * get configured idle time for text (idle time between dialogs)\r\n         */\r\n        SimpleDialog.prototype.getConfigDialogTextIdleTime = function () {\r\n            if (this.textContainer.config.textIdleTime)\r\n                return this.textContainer.config.textIdleTime;\r\n            return 3;\r\n        };\r\n        /**\r\n         * add an option to dialog system\r\n         * @param text text value\r\n         * @param callback callback for when option is pressed\r\n         */\r\n        SimpleDialog.prototype.addOption = function (text, callback) {\r\n            this.optionsContainer.addOption(text, callback);\r\n        };\r\n        /**\r\n         * show dialog's options\r\n         */\r\n        SimpleDialog.prototype.showOptions = function () {\r\n            this.optionsContainer.show();\r\n        };\r\n        /**\r\n         * hide dialog's options\r\n         */\r\n        SimpleDialog.prototype.hideOptions = function () {\r\n            this.optionsContainer.hideAndClearOptions();\r\n        };\r\n        /**\r\n         * get dialog box container\r\n         */\r\n        SimpleDialog.prototype.getDialogTextContainer = function () {\r\n            return this.textContainer.container;\r\n        };\r\n        /**\r\n         * get options container\r\n         */\r\n        SimpleDialog.prototype.getOptionsContainer = function () {\r\n            return this.optionsContainer.optionsStack;\r\n        };\r\n        return SimpleDialog;\r\n    }());\r\n    exports.SimpleDialog = SimpleDialog;\r\n    (function (SimpleDialog) {\r\n        var DialogTree = /** @class */ (function () {\r\n            function DialogTree() {\r\n                this.optionsGroupStack = [];\r\n                this.actionsSequenceBuilder = new actionsSequenceSystem_2.ActionsSequenceSystem.SequenceBuilder();\r\n            }\r\n            /**\r\n             * start text displaying on dialog box\r\n             * @param stringFunction function to get text from\r\n             * @param textConfig text configuration\r\n             * @param textSpeed text type writing animation speed\r\n             * @param textIdleTime idle time to wait after full text is displayed\r\n             */\r\n            DialogTree.prototype.say = function (stringFunction, textConfig, textSpeed, textIdleTime) {\r\n                var _this = this;\r\n                this.actionsSequenceBuilder.then(new SayWithCallbackAction(stringFunction, textConfig, function () { return _this.simpleDialogInstance; }, textSpeed, textIdleTime));\r\n                return this;\r\n            };\r\n            /**\r\n             * show one of the portraits\r\n             * @param index index of portrait to show\r\n             * @param changeTexture texture to change portrait's image\r\n             * @param changeConfig change configuration for portrait's image\r\n             */\r\n            DialogTree.prototype.showPortrait = function (index, changeTexture, changeConfig) {\r\n                var _this = this;\r\n                this.actionsSequenceBuilder.then(new ShowPortraitAction(index, changeTexture, changeConfig, function () { return _this.simpleDialogInstance; }));\r\n                return this;\r\n            };\r\n            /**\r\n             * hide one of the portraits\r\n             * @param index index of portrait to hide\r\n             */\r\n            DialogTree.prototype.hidePortrait = function (index) {\r\n                var _this = this;\r\n                this.actionsSequenceBuilder.then(new HidePortraitAction(index, function () { return _this.simpleDialogInstance; }));\r\n                return this;\r\n            };\r\n            /**\r\n             * IF conditional statement\r\n             * @param condition condition function\r\n             */\r\n            DialogTree.prototype.if = function (condition) {\r\n                this.actionsSequenceBuilder.if(condition);\r\n                return this;\r\n            };\r\n            /**\r\n             * ELSE conditional statement\r\n             */\r\n            DialogTree.prototype.else = function () {\r\n                this.actionsSequenceBuilder.else();\r\n                return this;\r\n            };\r\n            /**\r\n             * ends a conditional block\r\n             */\r\n            DialogTree.prototype.endif = function () {\r\n                this.actionsSequenceBuilder.endIf();\r\n                return this;\r\n            };\r\n            /**\r\n             * begin an options block group\r\n             */\r\n            DialogTree.prototype.beginOptionsGroup = function () {\r\n                var groupData = new OptionsGroupData();\r\n                this.optionsGroupStack.push(groupData);\r\n                this.actionsSequenceBuilder.while(function () { return true; });\r\n                return this;\r\n            };\r\n            /**\r\n             * ends options block group\r\n             */\r\n            DialogTree.prototype.endOptionsGroup = function () {\r\n                var _this = this;\r\n                this.actionsSequenceBuilder.then(new WaitForInputAction(this.optionsGroupStack[this.optionsGroupStack.length - 1], function () { return _this.simpleDialogInstance; }));\r\n                this.actionsSequenceBuilder.endWhile();\r\n                this.optionsGroupStack.splice(this.optionsGroupStack.length - 1, 1);\r\n                return this;\r\n            };\r\n            /**\r\n             * add a option to the options block\r\n             * @param stringFunction function to get text for option\r\n             */\r\n            DialogTree.prototype.option = function (stringFunction) {\r\n                var _this = this;\r\n                var group = this.optionsGroupStack[this.optionsGroupStack.length - 1];\r\n                var optionAction = new OptionAction(stringFunction, function () { return _this.simpleDialogInstance; });\r\n                group.options.push(optionAction);\r\n                this.actionsSequenceBuilder.if(function () { return group.optionSelected == -1; });\r\n                this.actionsSequenceBuilder.then(optionAction);\r\n                this.actionsSequenceBuilder.endIf();\r\n                this.actionsSequenceBuilder.if(function () { return optionAction.selected; });\r\n                this.actionsSequenceBuilder.then(new CallbackAction(function () { optionAction.selected = false; group.optionSelected = -1; }));\r\n                return this;\r\n            };\r\n            /**\r\n             * ends a option block\r\n             */\r\n            DialogTree.prototype.endOption = function () {\r\n                this.actionsSequenceBuilder.breakWhile();\r\n                this.actionsSequenceBuilder.endIf();\r\n                return this;\r\n            };\r\n            /**\r\n             * call a function\r\n             * @param callback function to call\r\n             */\r\n            DialogTree.prototype.call = function (callback) {\r\n                this.actionsSequenceBuilder.then(new CallbackAction(callback));\r\n                return this;\r\n            };\r\n            /**\r\n             * run a custom action\r\n             * @param action action to run\r\n             */\r\n            DialogTree.prototype.customAction = function (action) {\r\n                this.actionsSequenceBuilder.then(action);\r\n                return this;\r\n            };\r\n            /**\r\n             * wait a number of seconds\r\n             * @param seconds seconds to wait\r\n             */\r\n            DialogTree.prototype.wait = function (seconds) {\r\n                this.actionsSequenceBuilder.then(new WaitAction(seconds));\r\n                return this;\r\n            };\r\n            return DialogTree;\r\n        }());\r\n        SimpleDialog.DialogTree = DialogTree;\r\n        var DialogConfig = /** @class */ (function () {\r\n            function DialogConfig() {\r\n            }\r\n            return DialogConfig;\r\n        }());\r\n        SimpleDialog.DialogConfig = DialogConfig;\r\n        var PortraitConfig = /** @class */ (function () {\r\n            function PortraitConfig() {\r\n            }\r\n            return PortraitConfig;\r\n        }());\r\n        SimpleDialog.PortraitConfig = PortraitConfig;\r\n        var DialogTextConfig = /** @class */ (function () {\r\n            function DialogTextConfig() {\r\n            }\r\n            return DialogTextConfig;\r\n        }());\r\n        SimpleDialog.DialogTextConfig = DialogTextConfig;\r\n        var OptionsContainerConfig = /** @class */ (function () {\r\n            function OptionsContainerConfig() {\r\n            }\r\n            return OptionsContainerConfig;\r\n        }());\r\n        SimpleDialog.OptionsContainerConfig = OptionsContainerConfig;\r\n        var ShapeConfig = /** @class */ (function () {\r\n            function ShapeConfig() {\r\n            }\r\n            return ShapeConfig;\r\n        }());\r\n        SimpleDialog.ShapeConfig = ShapeConfig;\r\n        var ImageConfig = /** @class */ (function (_super) {\r\n            __extends(ImageConfig, _super);\r\n            function ImageConfig() {\r\n                return _super !== null && _super.apply(this, arguments) || this;\r\n            }\r\n            return ImageConfig;\r\n        }(ShapeConfig));\r\n        SimpleDialog.ImageConfig = ImageConfig;\r\n        var RectContainerConfig = /** @class */ (function (_super) {\r\n            __extends(RectContainerConfig, _super);\r\n            function RectContainerConfig() {\r\n                return _super !== null && _super.apply(this, arguments) || this;\r\n            }\r\n            return RectContainerConfig;\r\n        }(ShapeConfig));\r\n        SimpleDialog.RectContainerConfig = RectContainerConfig;\r\n        var TextConfig = /** @class */ (function (_super) {\r\n            __extends(TextConfig, _super);\r\n            function TextConfig() {\r\n                return _super !== null && _super.apply(this, arguments) || this;\r\n            }\r\n            return TextConfig;\r\n        }(ShapeConfig));\r\n        SimpleDialog.TextConfig = TextConfig;\r\n        var PortraitIndex;\r\n        (function (PortraitIndex) {\r\n            PortraitIndex[PortraitIndex[\"LEFT\"] = 0] = \"LEFT\";\r\n            PortraitIndex[PortraitIndex[\"RIGHT\"] = 1] = \"RIGHT\";\r\n        })(PortraitIndex = SimpleDialog.PortraitIndex || (SimpleDialog.PortraitIndex = {}));\r\n    })(SimpleDialog = exports.SimpleDialog || (exports.SimpleDialog = {}));\r\n    exports.SimpleDialog = SimpleDialog;\r\n    function configShape(shape, shapeConfig) {\r\n        if (shapeConfig.hAlign)\r\n            shape.hAlign = shapeConfig.hAlign;\r\n        if (shapeConfig.vAlign)\r\n            shape.vAlign = shapeConfig.vAlign;\r\n        if (shapeConfig.width)\r\n            shape.width = shapeConfig.width;\r\n        if (shapeConfig.height)\r\n            shape.height = shapeConfig.height;\r\n        if (shapeConfig.positionX)\r\n            shape.positionX = shapeConfig.positionX;\r\n        if (shapeConfig.positionY)\r\n            shape.positionY = shapeConfig.positionY;\r\n    }\r\n    function configImage(image, imageConfig) {\r\n        configShape(image, imageConfig);\r\n        if (imageConfig.sourceLeft)\r\n            image.sourceLeft = imageConfig.sourceLeft;\r\n        if (imageConfig.sourceTop)\r\n            image.sourceTop = imageConfig.sourceTop;\r\n        if (imageConfig.sourceWidth)\r\n            image.sourceWidth = imageConfig.sourceWidth;\r\n        if (imageConfig.sourceHeight)\r\n            image.sourceHeight = imageConfig.sourceHeight;\r\n        if (imageConfig.paddingTop)\r\n            image.paddingTop = imageConfig.paddingTop;\r\n        if (imageConfig.paddingRight)\r\n            image.paddingRight = imageConfig.paddingRight;\r\n        if (imageConfig.paddingBottom)\r\n            image.paddingBottom = imageConfig.paddingBottom;\r\n        if (imageConfig.paddingLeft)\r\n            image.paddingLeft = imageConfig.paddingLeft;\r\n        if (imageConfig.sizeInPixels)\r\n            image.sizeInPixels = imageConfig.sizeInPixels;\r\n    }\r\n    function configRectContainer(container, containerConfig) {\r\n        configShape(container, containerConfig);\r\n        if (containerConfig.adaptWidth)\r\n            container.adaptWidth = containerConfig.adaptWidth;\r\n        if (containerConfig.adaptHeight)\r\n            container.adaptHeight = containerConfig.adaptHeight;\r\n        if (containerConfig.thickness)\r\n            container.thickness = containerConfig.thickness;\r\n        if (containerConfig.color)\r\n            container.color = containerConfig.color;\r\n        if (containerConfig.alignmentUsesSize)\r\n            container.alignmentUsesSize = containerConfig.alignmentUsesSize;\r\n    }\r\n    function configText(text, textConfig) {\r\n        configShape(text, textConfig);\r\n        if (textConfig.outlineWidth)\r\n            text.outlineWidth = textConfig.outlineWidth;\r\n        if (textConfig.outlineColor)\r\n            text.outlineColor = textConfig.outlineColor;\r\n        if (textConfig.color)\r\n            text.color = textConfig.color;\r\n        if (textConfig.fontSize)\r\n            text.fontSize = textConfig.fontSize;\r\n        if (textConfig.fontAutoSize)\r\n            text.fontAutoSize = textConfig.fontAutoSize;\r\n        if (textConfig.fontWeight)\r\n            text.fontWeight = textConfig.fontWeight;\r\n        if (textConfig.lineSpacing)\r\n            text.lineSpacing = textConfig.lineSpacing;\r\n        if (textConfig.lineCount)\r\n            text.lineCount = textConfig.lineCount;\r\n        if (textConfig.adaptWidth)\r\n            text.adaptWidth = textConfig.adaptWidth;\r\n        if (textConfig.adaptHeight)\r\n            text.adaptHeight = textConfig.adaptHeight;\r\n        if (textConfig.textWrapping)\r\n            text.textWrapping = textConfig.textWrapping;\r\n        if (textConfig.shadowBlur)\r\n            text.shadowBlur = textConfig.shadowBlur;\r\n        if (textConfig.shadowOffsetX)\r\n            text.shadowOffsetX = textConfig.shadowOffsetX;\r\n        if (textConfig.shadowOffsetY)\r\n            text.shadowOffsetY = textConfig.shadowOffsetY;\r\n        if (textConfig.shadowColor)\r\n            text.shadowColor = textConfig.shadowColor;\r\n        if (textConfig.hTextAlign)\r\n            text.hTextAlign = textConfig.hTextAlign;\r\n        if (textConfig.vTextAlign)\r\n            text.vTextAlign = textConfig.vTextAlign;\r\n        if (textConfig.paddingTop)\r\n            text.paddingTop = textConfig.paddingTop;\r\n        if (textConfig.paddingRight)\r\n            text.paddingRight = textConfig.paddingRight;\r\n        if (textConfig.paddingBottom)\r\n            text.paddingBottom = textConfig.paddingBottom;\r\n        if (textConfig.paddingLeft)\r\n            text.paddingLeft = textConfig.paddingLeft;\r\n    }\r\n    var PortraitContainer = /** @class */ (function () {\r\n        function PortraitContainer(config, parent) {\r\n            this.config = config;\r\n            this.container = new UIContainerRect(parent);\r\n            this.configPortrait(config);\r\n        }\r\n        PortraitContainer.prototype.configPortrait = function (config) {\r\n            if (config.hAlign)\r\n                this.container.hAlign = config.hAlign;\r\n            if (config.vAlign)\r\n                this.container.vAlign = config.vAlign;\r\n            if (config.positionX)\r\n                this.container.positionX = config.positionX;\r\n            if (config.positionY)\r\n                this.container.positionY = config.positionY;\r\n            if (config.height)\r\n                this.container.height = config.height;\r\n            if (config.width)\r\n                this.container.width = config.width;\r\n        };\r\n        PortraitContainer.prototype.configPortraitImage = function (imageConfig) {\r\n            configImage(this.image, imageConfig);\r\n            if (imageConfig.sourceWidth == null && this.config.sourceWidth)\r\n                this.image.sourceWidth = this.config.sourceWidth;\r\n            if (imageConfig.sourceHeight == null && this.config.sourceHeight)\r\n                this.image.sourceHeight = this.config.sourceHeight;\r\n        };\r\n        PortraitContainer.prototype.setImage = function (texture, imageConfig) {\r\n            if (this.image) {\r\n                this.image.source = texture;\r\n            }\r\n            else {\r\n                this.image = new UIImage(this.container, texture);\r\n                if (this.config.sourceWidth)\r\n                    this.image.sourceWidth = this.config.sourceWidth;\r\n                if (this.config.sourceHeight)\r\n                    this.image.sourceHeight = this.config.sourceHeight;\r\n                this.image.width = \"100%\";\r\n                this.image.height = \"100%\";\r\n            }\r\n            if (imageConfig) {\r\n                this.configPortraitImage(imageConfig);\r\n            }\r\n        };\r\n        PortraitContainer.prototype.show = function () {\r\n            this.container.visible = true;\r\n        };\r\n        PortraitContainer.prototype.hide = function () {\r\n            this.container.visible = false;\r\n        };\r\n        return PortraitContainer;\r\n    }());\r\n    var DialogTextContainer = /** @class */ (function () {\r\n        function DialogTextContainer(config, parent) {\r\n            this.container = new UIContainerRect(parent);\r\n            if (config.background) {\r\n                var bg = new UIImage(this.container, config.background);\r\n                bg.width = \"100%\";\r\n                bg.height = \"100%\";\r\n                bg.isPointerBlocker = true;\r\n                this.background = bg;\r\n                if (config.backgroundConfig)\r\n                    configImage(bg, config.backgroundConfig);\r\n            }\r\n            this.text = new UIText(this.container);\r\n            this.text.width = \"100%\";\r\n            this.text.height = \"100%\";\r\n            this.text.hTextAlign = \"left\";\r\n            this.text.vTextAlign = \"center\";\r\n            this.text.textWrapping = true;\r\n            this.text.isPointerBlocker = false;\r\n            if (config.textConfig)\r\n                configText(this.text, config.textConfig);\r\n            this.setConfig(config);\r\n        }\r\n        DialogTextContainer.prototype.setConfig = function (config) {\r\n            this.config = config;\r\n            if (config.hAlign)\r\n                this.container.hAlign = config.hAlign;\r\n            if (config.vAlign)\r\n                this.container.vAlign = config.vAlign;\r\n            if (config.positionX)\r\n                this.container.positionX = config.positionX;\r\n            if (config.positionY)\r\n                this.container.positionY = config.positionY;\r\n            if (config.height)\r\n                this.container.height = config.height;\r\n            if (config.width)\r\n                this.container.width = config.width;\r\n            if (config.textConfig)\r\n                configText(this.text, config.textConfig);\r\n        };\r\n        return DialogTextContainer;\r\n    }());\r\n    var OptionContainerData = /** @class */ (function () {\r\n        function OptionContainerData() {\r\n        }\r\n        return OptionContainerData;\r\n    }());\r\n    var OptionContainer = /** @class */ (function () {\r\n        function OptionContainer(config, parent) {\r\n            this.options = [];\r\n            this.container = new UIContainerRect(parent);\r\n            this.background = new UIImage(this.container, null);\r\n            this.background.opacity = 0;\r\n            this.background.width = \"100%\";\r\n            this.background.height = \"100%\";\r\n            this.optionsStack = new UIContainerStack(this.container);\r\n            this.optionsStack.adaptHeight = false;\r\n            this.optionsStack.adaptWidth = false;\r\n            this.optionsStack.width = \"100%\";\r\n            this.optionsStack.height = \"100%\";\r\n            this.setConfig(config);\r\n        }\r\n        OptionContainer.prototype.setConfig = function (config) {\r\n            this.config = config;\r\n            if (config.adaptWidth)\r\n                this.optionsStack.adaptWidth = config.adaptWidth;\r\n            if (config.adaptHeight)\r\n                this.optionsStack.adaptHeight = config.adaptHeight;\r\n            if (config.color)\r\n                this.container.color = config.color;\r\n            if (config.spacing)\r\n                this.optionsStack.spacing = config.spacing;\r\n            if (config.stackOrientation)\r\n                this.optionsStack.stackOrientation = config.stackOrientation;\r\n            if (config.hAlign)\r\n                this.container.hAlign = config.hAlign;\r\n            if (config.vAlign)\r\n                this.container.vAlign = config.vAlign;\r\n            if (config.width)\r\n                this.container.width = config.width;\r\n            if (config.height)\r\n                this.container.height = config.height;\r\n            if (config.positionX)\r\n                this.container.positionX = config.positionX;\r\n            if (config.positionY)\r\n                this.container.positionY = config.positionY;\r\n            if (config.background) {\r\n                if (this.background) {\r\n                    this.background.source = config.background;\r\n                    this.background.opacity = 1;\r\n                }\r\n                if (config.backgroundConfig) {\r\n                    configImage(this.background, config.backgroundConfig);\r\n                }\r\n            }\r\n            this.options.forEach(function (option) {\r\n                if (config.optionsTextConfig) {\r\n                    configText(option.text, config.optionsTextConfig);\r\n                }\r\n                if (config.optionsTextConfig == null || config.optionsTextConfig.fontAutoSize == null) {\r\n                    option.text.fontSize = 10;\r\n                }\r\n            });\r\n        };\r\n        OptionContainer.prototype.addOption = function (text, callback) {\r\n            var optionData = null;\r\n            var defaultFontSize = 10;\r\n            for (var i = 0; i < this.options.length; i++) {\r\n                if (!this.options[i].active) {\r\n                    optionData = this.options[i];\r\n                    break;\r\n                }\r\n            }\r\n            var uitext;\r\n            var uiImage;\r\n            if (optionData != null) {\r\n                uitext = optionData.text;\r\n                uiImage = optionData.image;\r\n                optionData.active = true;\r\n                uiImage.visible = false;\r\n            }\r\n            else {\r\n                uitext = new UIText(this.optionsStack);\r\n                uiImage = new UIImage(uitext, null);\r\n                uitext.adaptHeight = true;\r\n                uitext.adaptWidth = true;\r\n                uitext.fontSize = defaultFontSize;\r\n                uiImage.width = \"100%\";\r\n                uiImage.height = \"100%\";\r\n                uiImage.opacity = 0;\r\n            }\r\n            uiImage.onClick = new OnClick(callback);\r\n            uiImage.paddingLeft = uitext.paddingLeft;\r\n            uiImage.paddingRight = uitext.paddingRight;\r\n            uiImage.paddingTop = uitext.paddingTop;\r\n            uiImage.paddingBottom = uitext.paddingBottom;\r\n            uitext.value = text;\r\n            if (this.config.optionsTextConfig) {\r\n                configText(uitext, this.config.optionsTextConfig);\r\n            }\r\n            if (this.config.optionsTextConfig == null || this.config.optionsTextConfig.fontSize == null) {\r\n                uitext.fontSize = defaultFontSize;\r\n            }\r\n            if (optionData == null) {\r\n                optionData = { text: uitext, active: true, callback: callback, image: uiImage };\r\n                this.options.push(optionData);\r\n            }\r\n            else {\r\n                optionData.callback = callback;\r\n            }\r\n        };\r\n        OptionContainer.prototype.hideAndClearOptions = function () {\r\n            for (var i = 0; i < this.options.length; i++) {\r\n                this.options[i].active = false;\r\n                this.options[i].text.visible = false;\r\n                this.options[i].image.visible = false;\r\n            }\r\n            this.container.visible = false;\r\n        };\r\n        OptionContainer.prototype.show = function () {\r\n            for (var i = 0; i < this.options.length; i++) {\r\n                if (this.options[i].active) {\r\n                    this.options[i].text.visible = true;\r\n                    this.options[i].image.visible = true;\r\n                }\r\n            }\r\n            this.container.visible = true;\r\n        };\r\n        return OptionContainer;\r\n    }());\r\n    var OptionsGroupData = /** @class */ (function () {\r\n        function OptionsGroupData() {\r\n            this.optionSelected = -1;\r\n            this.options = [];\r\n        }\r\n        return OptionsGroupData;\r\n    }());\r\n    var SayWithCallbackAction = /** @class */ (function () {\r\n        function SayWithCallbackAction(text, textConfig, getDialogInstance, textSpeed, idleTime) {\r\n            this.hasFinished = false;\r\n            this.callback = text;\r\n            this.textConfig = textConfig;\r\n            this.getDialogInstance = getDialogInstance;\r\n            this.textSpeed = textSpeed;\r\n            this.idleTime = idleTime;\r\n        }\r\n        SayWithCallbackAction.prototype.onStart = function () {\r\n            if (this.textConfig)\r\n                this.getDialogInstance().setTextConfig(this.textConfig);\r\n            this.hasFinished = false;\r\n            this.wordIndex = 0;\r\n            this.time = 0;\r\n            this.text = this.callback().split(\" \");\r\n            this.writting = true;\r\n            this.getDialogInstance().setText(\"\");\r\n            if (!this.textSpeed)\r\n                this.textSpeed = this.getDialogInstance().getConfigDialogTextSpeed();\r\n            if (!this.idleTime)\r\n                this.idleTime = this.getDialogInstance().getConfigDialogTextIdleTime();\r\n            this.lastSkipTime = 0;\r\n        };\r\n        SayWithCallbackAction.prototype.update = function (dt) {\r\n            if (this.writting) {\r\n                this.time += dt * this.textSpeed;\r\n                var floorTime = Math.ceil(this.time);\r\n                if (floorTime > this.wordIndex) {\r\n                    this.wordIndex = Scalar.Clamp(floorTime, 0, this.text.length);\r\n                    if (this.wordIndex >= this.text.length) {\r\n                        this.writting = false;\r\n                        this.time = 0;\r\n                    }\r\n                    this.getDialogInstance().setText(this.getText(this.wordIndex));\r\n                }\r\n            }\r\n            else {\r\n                this.time += dt;\r\n                if (this.time > this.idleTime) {\r\n                    this.hasFinished = true;\r\n                }\r\n            }\r\n        };\r\n        SayWithCallbackAction.prototype.onFinish = function () {\r\n        };\r\n        SayWithCallbackAction.prototype.skipDialog = function () {\r\n            if (this.writting) {\r\n                this.writting = false;\r\n                this.time = 0;\r\n                this.getDialogInstance().setText(this.getText(this.text.length));\r\n                this.lastSkipTime = Date.now();\r\n            }\r\n            else if (Date.now() - this.lastSkipTime >= 1500) {\r\n                this.hasFinished = true;\r\n            }\r\n        };\r\n        SayWithCallbackAction.prototype.getText = function (lastIndex) {\r\n            var ret = \"\";\r\n            for (var i = 0; i < lastIndex; i++) {\r\n                if (i != 0)\r\n                    ret += \" \";\r\n                ret += this.text[i];\r\n            }\r\n            return ret;\r\n        };\r\n        return SayWithCallbackAction;\r\n    }());\r\n    var OptionAction = /** @class */ (function () {\r\n        function OptionAction(textCallback, getDialogInstance) {\r\n            this.selected = false;\r\n            this.hasFinished = false;\r\n            this.textCallback = textCallback;\r\n            this.getDialogInstance = getDialogInstance;\r\n            this.selected = false;\r\n        }\r\n        OptionAction.prototype.onStart = function () {\r\n            var _this = this;\r\n            this.getDialogInstance().addOption(this.textCallback(), function () {\r\n                _this.selected = true;\r\n            });\r\n            this.hasFinished = true;\r\n        };\r\n        OptionAction.prototype.update = function (dt) {\r\n        };\r\n        OptionAction.prototype.onFinish = function () {\r\n        };\r\n        return OptionAction;\r\n    }());\r\n    var CallbackAction = /** @class */ (function () {\r\n        function CallbackAction(callback) {\r\n            this.callback = callback;\r\n        }\r\n        CallbackAction.prototype.onStart = function () {\r\n            if (this.callback)\r\n                this.callback();\r\n            this.hasFinished = true;\r\n        };\r\n        CallbackAction.prototype.update = function (dt) {\r\n        };\r\n        CallbackAction.prototype.onFinish = function () {\r\n        };\r\n        return CallbackAction;\r\n    }());\r\n    var WaitForInputAction = /** @class */ (function () {\r\n        function WaitForInputAction(group, getDialogInstance) {\r\n            this.group = group;\r\n            this.getDialogInstance = getDialogInstance;\r\n        }\r\n        WaitForInputAction.prototype.onStart = function () {\r\n            this.hasFinished = false;\r\n            this.getDialogInstance().showOptions();\r\n        };\r\n        WaitForInputAction.prototype.update = function (dt) {\r\n            for (var i = 0; i < this.group.options.length; i++) {\r\n                if (this.group.options[i].selected) {\r\n                    this.group.optionSelected = i;\r\n                    this.hasFinished = true;\r\n                    this.getDialogInstance().hideOptions();\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        WaitForInputAction.prototype.onFinish = function () {\r\n        };\r\n        return WaitForInputAction;\r\n    }());\r\n    var ShowPortraitAction = /** @class */ (function () {\r\n        function ShowPortraitAction(index, changeTexture, changeConfig, getDialogInstance) {\r\n            this.getDialogInstance = getDialogInstance;\r\n            this.changeTexture = changeTexture;\r\n            this.changeConfig = changeConfig;\r\n            this.index = index;\r\n        }\r\n        ShowPortraitAction.prototype.onStart = function () {\r\n            if (this.changeTexture) {\r\n                this.getDialogInstance().setPortrait(this.index, this.changeTexture, this.changeConfig);\r\n            }\r\n            else if (this.changeConfig) {\r\n                this.getDialogInstance().setPortraitImageConfig(this.index, this.changeConfig);\r\n            }\r\n            this.getDialogInstance().showPortrait(this.index);\r\n            this.hasFinished = true;\r\n        };\r\n        ShowPortraitAction.prototype.update = function (dt) {\r\n        };\r\n        ShowPortraitAction.prototype.onFinish = function () {\r\n        };\r\n        return ShowPortraitAction;\r\n    }());\r\n    var HidePortraitAction = /** @class */ (function () {\r\n        function HidePortraitAction(index, getDialogInstance) {\r\n            this.getDialogInstance = getDialogInstance;\r\n            this.index = index;\r\n        }\r\n        HidePortraitAction.prototype.onStart = function () {\r\n            this.getDialogInstance().hidePortrait(this.index);\r\n            this.hasFinished = true;\r\n        };\r\n        HidePortraitAction.prototype.update = function (dt) {\r\n        };\r\n        HidePortraitAction.prototype.onFinish = function () {\r\n        };\r\n        return HidePortraitAction;\r\n    }());\r\n    var WaitAction = /** @class */ (function () {\r\n        function WaitAction(seconds) {\r\n            this.seconds = seconds;\r\n        }\r\n        WaitAction.prototype.onStart = function () {\r\n            this.startingTime = Date.now();\r\n            this.hasFinished = false;\r\n        };\r\n        WaitAction.prototype.update = function (dt) {\r\n            this.hasFinished = (Date.now() - this.startingTime) >= this.seconds * 1000;\r\n        };\r\n        WaitAction.prototype.onFinish = function () {\r\n        };\r\n        return WaitAction;\r\n    }());\r\n});\r\ndefine(\"src/ui/munaDialog\", [\"require\", \"exports\", \"src/resources\", \"src/modules/simpleDialog\"], function (require, exports, resources_13, simpleDialog_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MunaDialog = void 0;\r\n    function selectRandom(options) {\r\n        return options[Math.floor(Math.random() * (options.length - 1))];\r\n    }\r\n    var MunaDialog = /** @class */ (function (_super) {\r\n        __extends(MunaDialog, _super);\r\n        function MunaDialog(gameCanvas) {\r\n            var _this = \r\n            // Create a new SimpleDialog to manage the dialog tree\r\n            _super.call(this, {\r\n                canvas: gameCanvas,\r\n                leftPortrait: {\r\n                    width: 256,\r\n                    height: 256,\r\n                    sourceWidth: 256,\r\n                    sourceHeight: 256,\r\n                    positionX: \"-17%\"\r\n                },\r\n                rightPortrait: {\r\n                    width: 256,\r\n                    height: 256,\r\n                    sourceWidth: 256,\r\n                    sourceHeight: 256,\r\n                    positionX: \"15%\"\r\n                },\r\n                dialogText: {\r\n                    width: \"25%\",\r\n                    height: \"25%\",\r\n                    textSpeed: 15,\r\n                    textIdleTime: 5,\r\n                    textConfig: { fontSize: 16, paddingLeft: 25, paddingRight: 25 },\r\n                    background: resources_13.default.textures.textContainer,\r\n                    backgroundConfig: { sourceWidth: 512, sourceHeight: 257 }\r\n                },\r\n                optionsContainer: {\r\n                    stackOrientation: UIStackOrientation.VERTICAL,\r\n                    spacing: 0,\r\n                    width: \"40%\",\r\n                    height: \"12%\",\r\n                    vAlign: \"top\",\r\n                    hAlign: \"center\",\r\n                    positionY: \"-65%\",\r\n                    background: resources_13.default.textures.optionsContainer,\r\n                    backgroundConfig: { sourceWidth: 512, sourceHeight: 79 },\r\n                    optionsTextConfig: { fontSize: 20, paddingLeft: 20, positionY: \"-35%\" }\r\n                }\r\n            }) || this;\r\n            // Some random replies for muna\r\n            var randomStartingOptions = [\r\n                \"Entendo...\", \"...\", \"...OK...\"\r\n            ];\r\n            var randomWrongAnswers = [\r\n                \"Você está apenas adivinhando...\",\r\n                \"Não não é...\",\r\n                \"O quê? Nem perto!\"\r\n            ];\r\n            // Variables used in the dialog tree\r\n            var firstTimeDialog = true;\r\n            var firstOptionCorrect = false;\r\n            var secondOptionCorrect = false;\r\n            var thirdOptionCorrect = false;\r\n            // Dialog text colors\r\n            var npcColor = Color4.White();\r\n            var playerColor = new Color4(0.898, 0, 0.157);\r\n            _this.dialogTree = new simpleDialog_1.SimpleDialog.DialogTree()\r\n                .if(function () { return firstTimeDialog; })\r\n                .call(function () { return (firstTimeDialog = false); })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitDefault)\r\n                .say(function () { return \"Olá estranho!\"; }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitSurprised)\r\n                .say(function () { return \"Uma estátua de cachorro falante?!\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () {\r\n                return \"Você também é um urso falante... não me vê fazendo nenhum julgamento.\";\r\n            }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitThinking)\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitDefault)\r\n                .say(function () { return \"Enfim... como faço para sair deste lugar?\"; }, {\r\n                color: playerColor\r\n            })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitThinking)\r\n                .say(function () {\r\n                return \"Você terá que passar por mim. E eu só vou deixar você responder às minhas três perguntas.\";\r\n            }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitSurprised)\r\n                .say(function () {\r\n                return \"Então vá em frente, explore as outras salas e resolva os quebra-cabeças para encontrar as respostas para minhas perguntas!\";\r\n            }, { color: npcColor })\r\n                .say(function () { return \"Hum... claro, por que não? Quem sou eu para discutir?\"; }, {\r\n                color: playerColor\r\n            })\r\n                .wait(3)\r\n                .else()\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitDefault)\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitThinking)\r\n                .if(function () { return firstOptionCorrect && secondOptionCorrect && thirdOptionCorrect; })\r\n                .say(function () { return \"Acabamos de falar. \\nDigite o código e você pode sair.\"; }, {\r\n                color: npcColor\r\n            })\r\n                .wait(3)\r\n                .else()\r\n                .say(function () { return \"Você resolveu meus quebra-cabeças? você sabe as respostas?\"; }, {\r\n                color: npcColor\r\n            })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitThinking)\r\n                .beginOptionsGroup()\r\n                .option(function () { return \"- Sim.\"; })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitDefault)\r\n                .say(function () { return \"Sim. Por que você acha que vim até aqui?\"; }, {\r\n                color: playerColor\r\n            })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomStartingOptions); }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitThinking)\r\n                .say(function () { return \"Muito bem então... responda-me isto\"; }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitDefault)\r\n                .if(function () { return !firstOptionCorrect; })\r\n                .say(function () { return \"Qual é a minha cor favorita?\"; }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitThinking)\r\n                .beginOptionsGroup()\r\n                .option(function () { return \"- Verde.\"; })\r\n                .say(function () { return \"É verde?\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomWrongAnswers); }, { color: npcColor })\r\n                .endOption()\r\n                .option(function () { return \"- Azul.\"; })\r\n                .say(function () { return \"Azul... certo?\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomWrongAnswers); }, { color: npcColor })\r\n                .endOption()\r\n                .option(function () { return \"- Laranja.\"; })\r\n                .say(function () { return \"Laranja!\"; }, { color: playerColor })\r\n                .call(function () { return (firstOptionCorrect = true); })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return \"Isso mesmo!\"; }, { color: npcColor })\r\n                .say(function () { return '\"No meio da escuridão, a luz persiste.\"'; }, {\r\n                color: npcColor\r\n            })\r\n                .call(function () { return _this.onCorrectAnswer(0); })\r\n                .endOption()\r\n                .endOptionsGroup()\r\n                .else()\r\n                .if(function () { return !secondOptionCorrect; })\r\n                .say(function () { return \"Qual é o meu jogo favorito?\"; }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitThinking)\r\n                .beginOptionsGroup()\r\n                .option(function () { return \"- Jogos de arcade retrô.\"; })\r\n                .say(function () { return \"São jogos de arcade retrô?\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomWrongAnswers); }, { color: npcColor })\r\n                .endOption()\r\n                .option(function () { return \"- Dardos.\"; })\r\n                .say(function () { return \"Dardos?\"; }, { color: playerColor })\r\n                .call(function () { return (secondOptionCorrect = true); })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return \"É sim...\"; }, { color: npcColor })\r\n                .say(function () { return '\"Dê luz, e a escuridão desaparecerá por si mesma.\"'; }, {\r\n                color: npcColor\r\n            })\r\n                .call(function () { return _this.onCorrectAnswer(1); })\r\n                .endOption()\r\n                .option(function () { return \"- Boliche.\"; })\r\n                .say(function () { return \"Claro... É boliche... certo?\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomWrongAnswers); }, { color: npcColor })\r\n                .endOption()\r\n                .endOptionsGroup()\r\n                .else()\r\n                .if(function () { return !thirdOptionCorrect; })\r\n                .say(function () { return \"Qual é a minha sobremesa favorita?\"; }, { color: npcColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitThinking)\r\n                .beginOptionsGroup()\r\n                .option(function () { return \"- Bolo de queijo.\"; })\r\n                .say(function () { return \"Bolo de queijo?\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomWrongAnswers); }, { color: npcColor })\r\n                .endOption()\r\n                .option(function () { return \"- Bolo de Milho.\"; })\r\n                .say(function () { return \"Isso é bolo de milho?...\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return selectRandom(randomWrongAnswers); }, { color: npcColor })\r\n                .endOption()\r\n                .option(function () { return \"- Bolo de limão.\"; })\r\n                .say(function () { return \"Bolo de limão!\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .call(function () { return (thirdOptionCorrect = true); })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return \"Muito bom...\"; }, { color: npcColor })\r\n                .say(function () { return '\"Dê luz e as pessoas encontrarão o caminho.\"'; })\r\n                .call(function () { return _this.onCorrectAnswer(2); })\r\n                .endOption()\r\n                .endOptionsGroup()\r\n                .endif()\r\n                .endif()\r\n                .endif()\r\n                .endOption()\r\n                .option(function () { return \"- Não, não ainda.\"; })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.LEFT, resources_13.default.textures.playerPortraitDefault)\r\n                .say(function () { return \"Não, não ainda!\"; }, { color: playerColor })\r\n                .showPortrait(simpleDialog_1.SimpleDialog.PortraitIndex.RIGHT, resources_13.default.textures.npcPortraitSurprised)\r\n                .say(function () { return \"Você está desperdiçando o meu tempo.\"; }, { color: npcColor })\r\n                .endOption()\r\n                .endOptionsGroup()\r\n                .endif();\r\n            return _this;\r\n        }\r\n        MunaDialog.prototype.run = function () {\r\n            if (!this.isDialogTreeRunning()) {\r\n                this.runDialogTree(this.dialogTree);\r\n            }\r\n        };\r\n        return MunaDialog;\r\n    }(simpleDialog_1.SimpleDialog));\r\n    exports.MunaDialog = MunaDialog;\r\n});\r\ndefine(\"src/ui/index\", [\"require\", \"exports\", \"src/ui/imageHint\", \"src/ui/keypad\", \"src/ui/munaDialog\"], function (require, exports, imageHint_1, keypad_1, munaDialog_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MunaDialog = exports.Keypad = exports.ImageHint = void 0;\r\n    Object.defineProperty(exports, \"ImageHint\", { enumerable: true, get: function () { return imageHint_1.ImageHint; } });\r\n    Object.defineProperty(exports, \"Keypad\", { enumerable: true, get: function () { return keypad_1.Keypad; } });\r\n    Object.defineProperty(exports, \"MunaDialog\", { enumerable: true, get: function () { return munaDialog_1.MunaDialog; } });\r\n});\r\ndefine(\"src/scenes/room5\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/resources\", \"src/gameObjects/index\", \"src/ui/index\"], function (require, exports, index_15, resources_14, index_16, index_17) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom5 = void 0;\r\n    // Função para criar a sala 5, recebendo o canvas do jogo como parâmetro\r\n    function CreateRoom5(gameCanvas) {\r\n        // Criando a porta e configurando o comportamento de abertura ao clicar nela\r\n        var door = new index_16.Door(resources_14.default.models.door5, {\r\n            position: new Vector3(19.5141, 5.54709, 25.676)\r\n        }, resources_14.default.sounds.doorSqueak);\r\n        // Adicionando uma pintura com a primeira dica\r\n        var painting = new index_16.Model(resources_14.default.models.pictureFrame, {\r\n            position: new Vector3(22.2283, 7.60325, 20.9326)\r\n        });\r\n        var paintingHint = new index_17.ImageHint(gameCanvas, resources_14.default.textures.fernHint);\r\n        paintingHint.container.visible = false;\r\n        painting.addComponent(new OnPointerDown(function () {\r\n            paintingHint.container.visible = true;\r\n        }));\r\n        // E um tapete que cobre um bilhete de recado\r\n        var carpet = new index_16.RotatableEntity(resources_14.default.models.carpet, {\r\n            position: new Vector3(20.7079, 5.50579, 24.6273),\r\n            rotation: Quaternion.Identity\r\n        }, undefined, Quaternion.Euler(0, -10, 0));\r\n        carpet.addComponent(new OnPointerDown(function () {\r\n            carpet.getComponent(index_15.default.ToggleComponent).toggle();\r\n        }));\r\n        // O bilhete de recado contém a segunda dica\r\n        var postit = new index_16.Model(resources_14.default.models.postit, {\r\n            position: new Vector3(21.571, 5.50857, 25.9534)\r\n        });\r\n        var postitHint = new index_17.ImageHint(gameCanvas, resources_14.default.textures.postitHint);\r\n        postitHint.container.visible = false;\r\n        postit.addComponent(new OnPointerDown(function () {\r\n            postitHint.container.visible = true;\r\n        }));\r\n        // Preparando a interface do teclado numérico\r\n        var keypad = new index_17.Keypad(gameCanvas);\r\n        keypad.container.visible = false;\r\n        // Adicionando um painel que abre a interface ao ser clicado\r\n        var numPadLock = new index_16.NumPadLock(resources_14.default.models.numpad1);\r\n        numPadLock.addComponent(new OnPointerDown(function () {\r\n            keypad.container.visible = true;\r\n        }));\r\n        var bookshelf = new index_16.MovableEntity(resources_14.default.models.door4, new Transform({\r\n            position: new Vector3(18.8, 5.4, 23.65),\r\n            rotation: Quaternion.Euler(0, 90, 0) // Rotaciona em 180 graus em torno do eixo Y\r\n        }), resources_14.default.sounds.moveObject1, new Vector3(0, 0, -4), 3);\r\n        // Conectando a lógica do teclado numérico\r\n        var currentInput = \"\";\r\n        keypad.onInput = function (value) {\r\n            currentInput += value;\r\n            keypad.display(currentInput);\r\n            numPadLock.playButtonPressed();\r\n        };\r\n        keypad.onReset = function () {\r\n            currentInput = \"\";\r\n            keypad.display(currentInput);\r\n            numPadLock.playButtonPressed();\r\n        };\r\n        keypad.onSubmit = function () {\r\n            if (currentInput == \"155\") {\r\n                // Correto!\r\n                keypad.display(\"OK!\", Color4.Green());\r\n                numPadLock.playAccessGranted();\r\n                numPadLock.addComponentOrReplace(new index_15.default.ExpireIn(2000, function () {\r\n                    keypad.container.visible = false;\r\n                    door.openDoor();\r\n                    bookshelf.getComponent(index_15.default.ToggleComponent).toggle();\r\n                }));\r\n            }\r\n            else {\r\n                // A senha está incorreta\r\n                keypad.display(\"Err\", Color4.Red());\r\n                numPadLock.playAccessDenied();\r\n                currentInput = \"\";\r\n            }\r\n        };\r\n    }\r\n    exports.CreateRoom5 = CreateRoom5;\r\n});\r\ndefine(\"src/scenes/room6\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/resources\", \"src/gameObjects/index\", \"src/ui/index\"], function (require, exports, index_18, resources_15, index_19, index_20) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom6 = void 0;\r\n    // Função para criar a sala 6, recebendo o canvas do jogo como parâmetro\r\n    function CreateRoom6(gameCanvas) {\r\n        // Criando a porta e configurando o comportamento de abertura ao clicar nela\r\n        var door = new index_19.Door(resources_15.default.models.door6, {\r\n            position: new Vector3(28.3, 0.25, 19.75),\r\n            rotation: Quaternion.Euler(0, 180, 0)\r\n        }, resources_15.default.sounds.doorSqueak);\r\n        // Uma estátua bloqueia a passagem\r\n        var munaStatue = new index_19.MovableEntity(resources_15.default.models.muna, { position: new Vector3(27.0, 0.1054, 20.765) }, resources_15.default.sounds.moveObject1, new Vector3(0, 0, 2), 1.5);\r\n        // Preparando a interface do teclado numérico\r\n        var keypad = new index_20.Keypad(gameCanvas);\r\n        keypad.container.visible = false;\r\n        // Adicionando um painel que abre a interface ao ser clicado\r\n        var numPadLock = new index_19.NumPadLock(resources_15.default.models.numpad2);\r\n        numPadLock.addComponent(new OnPointerDown(function () {\r\n            keypad.container.visible = true;\r\n        }));\r\n        // Conectando a lógica do teclado numérico\r\n        var currentInput = \"\";\r\n        keypad.onInput = function (value) {\r\n            currentInput += value;\r\n            keypad.display(currentInput);\r\n            numPadLock.playButtonPressed();\r\n        };\r\n        keypad.onReset = function () {\r\n            currentInput = \"\";\r\n            keypad.display(currentInput);\r\n            numPadLock.playButtonPressed();\r\n        };\r\n        keypad.onSubmit = function () {\r\n            if (currentInput == \"104\") {\r\n                // Correto!\r\n                keypad.display(\"OK!\", Color4.Green());\r\n                numPadLock.playAccessGranted();\r\n                numPadLock.removeComponent(OnPointerDown);\r\n                munaStatue.getComponent(index_18.default.ToggleComponent).toggle();\r\n                numPadLock.addComponentOrReplace(new index_18.default.Delay(2000, function () {\r\n                    keypad.container.visible = false;\r\n                    door.openDoor();\r\n                }));\r\n            }\r\n            else {\r\n                // A senha está incorreta\r\n                keypad.display(\"Erro\", Color4.Red());\r\n                numPadLock.playAccessDenied();\r\n                currentInput = \"\";\r\n            }\r\n        };\r\n        // Refletores\r\n        var spotLight1 = new index_19.Spotlight({\r\n            position: new Vector3(-0.04, 0, 0)\r\n        }, \"1\");\r\n        spotLight1.setParent(munaStatue);\r\n        var spotLight2 = new index_19.Spotlight({\r\n            position: new Vector3(-0.02, 0, 0),\r\n            rotation: Quaternion.Euler(0, 90, 0)\r\n        }, \"0\");\r\n        spotLight2.setParent(munaStatue);\r\n        var spotLight3 = new index_19.Spotlight({\r\n            position: new Vector3(-0.03, 0, 0),\r\n            rotation: Quaternion.Euler(0, 180, 0)\r\n        }, \"4\");\r\n        spotLight3.setParent(munaStatue);\r\n        // Definindo a estrutura da árvore de diálogo\r\n        var dialog = new index_20.MunaDialog(gameCanvas);\r\n        // Iniciando o diálogo quando a estátua é clicada\r\n        munaStatue.addComponent(new OnPointerDown(function () {\r\n            dialog.run();\r\n        }));\r\n        // Revelando as dicas conforme o jogador responde corretamente às perguntas.\r\n        dialog.onCorrectAnswer = function (questionId) {\r\n            if (questionId === 0) {\r\n                spotLight1.getComponent(index_18.default.ToggleComponent).set(index_18.default.ToggleState.On);\r\n            }\r\n            else if (questionId === 1) {\r\n                spotLight2.getComponent(index_18.default.ToggleComponent).set(index_18.default.ToggleState.On);\r\n            }\r\n            else {\r\n                spotLight3.getComponent(index_18.default.ToggleComponent).set(index_18.default.ToggleState.On);\r\n            }\r\n        };\r\n    }\r\n    exports.CreateRoom6 = CreateRoom6;\r\n});\r\ndefine(\"src/scenes/room7\", [\"require\", \"exports\", \"src/resources\", \"src/gameObjects/index\", \"src/components/toggleModelComponent\"], function (require, exports, resources_16, index_21, toggleModelComponent_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom7 = void 0;\r\n    // Posições dos botões e lâmpadas\r\n    var buttonPositions = [\r\n        new Vector3(23.0891, 1.58507, 10.2526),\r\n        new Vector3(23.0891, 1.48205, 11.2557),\r\n        new Vector3(23.0891, 1.38123, 12.2855),\r\n        new Vector3(23.0891, 1.52253, 13.2941)\r\n    ];\r\n    var bulbPositions = [\r\n        new Vector3(23.408, 2.26006, 10.3273),\r\n        new Vector3(23.408, 2.22122, 11.1682),\r\n        new Vector3(23.408, 2.10693, 12.1568),\r\n        new Vector3(23.408, 2.24542, 13.1888)\r\n    ];\r\n    // Função para criar a sala 7\r\n    function CreateRoom7() {\r\n        // Criando a porta e configurando o comportamento de abertura ao clicar nela\r\n        var door = new index_21.Door(resources_16.default.models.door7, {\r\n            position: new Vector3(26.3087, 0, 14.9449),\r\n            rotation: Quaternion.Euler(0, -10.2, 0)\r\n        }, resources_16.default.sounds.doorSqueek);\r\n        door.addComponent(new OnPointerDown(function () {\r\n            if (!door.isOpen) {\r\n                door.openDoor();\r\n            }\r\n        }));\r\n        // Lâmpadas do quebra-cabeça\r\n        var lightbulbs = [];\r\n        for (var i = 0; i < 4; i++) {\r\n            lightbulbs.push(new index_21.ToggleEntity({ position: bulbPositions[i] }, new GLTFShape(resources_16.default.models.lightOnSrc), new GLTFShape(resources_16.default.models.lightOffSrc)));\r\n        }\r\n        // Interações dos botões com as lâmpadas\r\n        var buttonInteractions = [\r\n            function () {\r\n                lightbulbs[1].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                lightbulbs[2].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                lightbulbs[3].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n            },\r\n            function () {\r\n                lightbulbs[2].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                lightbulbs[3].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n            },\r\n            function () {\r\n                lightbulbs[0].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                lightbulbs[3].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n            },\r\n            function () {\r\n                lightbulbs[0].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                lightbulbs[2].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                lightbulbs[3].getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n            }\r\n        ];\r\n        // Verifica se todas as lâmpadas estão ligadas\r\n        var areAllLightsOn = function () {\r\n            var e_1, _a;\r\n            try {\r\n                for (var lightbulbs_1 = __values(lightbulbs), lightbulbs_1_1 = lightbulbs_1.next(); !lightbulbs_1_1.done; lightbulbs_1_1 = lightbulbs_1.next()) {\r\n                    var bulb = lightbulbs_1_1.value;\r\n                    if (!bulb.getComponent(toggleModelComponent_2.ToggleModelComponent).isOn()) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n            finally {\r\n                try {\r\n                    if (lightbulbs_1_1 && !lightbulbs_1_1.done && (_a = lightbulbs_1.return)) _a.call(lightbulbs_1);\r\n                }\r\n                finally { if (e_1) throw e_1.error; }\r\n            }\r\n            return true;\r\n        };\r\n        // A TV exibe a dica quando ativada\r\n        var tvScreen = new index_21.ToggleEntity({ position: new Vector3(26.91, 0, 10.44) }, resources_16.default.models.tvOn, resources_16.default.models.tvOff);\r\n        var areButtonsEnabled = true;\r\n        var _loop_3 = function (i) {\r\n            var button = new index_21.Button(resources_16.default.models.roundButton, {\r\n                position: buttonPositions[i]\r\n            });\r\n            button.addComponent(new OnPointerDown(function () {\r\n                if (areButtonsEnabled) {\r\n                    buttonInteractions[i]();\r\n                    button.press();\r\n                    if (areAllLightsOn()) {\r\n                        areButtonsEnabled = false;\r\n                        tvScreen.getComponent(toggleModelComponent_2.ToggleModelComponent).toggle();\r\n                    }\r\n                }\r\n            }));\r\n        };\r\n        // Criando os botões e configurando o comportamento ao clicar neles\r\n        for (var i = 0; i < buttonPositions.length; i++) {\r\n            _loop_3(i);\r\n        }\r\n    }\r\n    exports.CreateRoom7 = CreateRoom7;\r\n});\r\ndefine(\"src/components/mouseFollowPathSystem\", [\"require\", \"exports\", \"src/components/mouseFollowPathComponent\"], function (require, exports, mouseFollowPathComponent_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseFollowPathSystem = void 0;\r\n    var MouseFollowPathSystem = /** @class */ (function () {\r\n        function MouseFollowPathSystem() {\r\n        }\r\n        MouseFollowPathSystem.prototype.update = function (dt) {\r\n            var e_2, _a;\r\n            var mouseGroup = engine.getComponentGroup(mouseFollowPathComponent_2.MouseFollowPathComponent);\r\n            try {\r\n                for (var _b = __values(mouseGroup.entities), _c = _b.next(); !_c.done; _c = _b.next()) {\r\n                    var mouseEntity = _c.value;\r\n                    mouseEntity\r\n                        .getComponent(mouseFollowPathComponent_2.MouseFollowPathComponent)\r\n                        .update(dt, mouseEntity);\r\n                }\r\n            }\r\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\r\n            finally {\r\n                try {\r\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\r\n                }\r\n                finally { if (e_2) throw e_2.error; }\r\n            }\r\n        };\r\n        return MouseFollowPathSystem;\r\n    }());\r\n    exports.MouseFollowPathSystem = MouseFollowPathSystem;\r\n});\r\ndefine(\"src/components/index\", [\"require\", \"exports\", \"src/components/mouseFollowPathComponent\", \"src/components/mouseFollowPathSystem\"], function (require, exports, mouseFollowPathComponent_3, mouseFollowPathSystem_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseFollowPathSystem = exports.MouseFollowPathComponent = void 0;\r\n    Object.defineProperty(exports, \"MouseFollowPathComponent\", { enumerable: true, get: function () { return mouseFollowPathComponent_3.MouseFollowPathComponent; } });\r\n    Object.defineProperty(exports, \"MouseFollowPathSystem\", { enumerable: true, get: function () { return mouseFollowPathSystem_1.MouseFollowPathSystem; } });\r\n});\r\ndefine(\"src/scenes/room8\", [\"require\", \"exports\", \"src/resources\", \"src/gameObjects/index\", \"src/components/index\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, resources_17, index_22, index_23, index_24) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom8 = void 0;\r\n    // Função para criar a sala 8\r\n    function CreateRoom8() {\r\n        // Criando a porta e configurando o comportamento de abertura ao clicar nela\r\n        var door = new index_22.Door(resources_17.default.models.door8, {\r\n            position: new Vector3(22.612, 0, 14.9205),\r\n            rotation: Quaternion.Euler(0, 135, 0)\r\n        }, resources_17.default.sounds.doorSqueek);\r\n        door.addComponent(new OnPointerDown(function () {\r\n            door.openDoor();\r\n        }));\r\n        // O bilhete revelará a dica para esta sala\r\n        var ticket = new index_22.Ticket({\r\n            position: new Vector3(18.1903, 0.397274, 11.771),\r\n            rotation: Quaternion.Euler(0, 63.6, 0)\r\n        });\r\n        // Adicionando uma tela de fliperama\r\n        var columnCount = 5;\r\n        var rowCount = 5;\r\n        var arcade = new index_22.ArcadeScreen(new Vector3(0.3, 0.3, 1), columnCount, rowCount, new Vector3(0.09, 0.05, 0), new Vector3(17.7913, 0.871266, 10.6956), Quaternion.Euler(118, -45, 127.3));\r\n        // Adicionando ratos para correr pela tela\r\n        var mouse1 = new index_22.Mouse({\r\n            position: new Vector3(25.82, 1.46, 4.25),\r\n            scale: new Vector3(0.8, 0.8, 0.8)\r\n        });\r\n        var mouse2 = new index_22.Mouse({\r\n            position: new Vector3(26.54, 0.85, 3.9),\r\n            scale: new Vector3(0.8, 0.8, 0.8)\r\n        });\r\n        // Adicionando sistema de comportamento para os ratos\r\n        var mouseBehaviorSystem = new index_23.MouseFollowPathSystem();\r\n        engine.addSystem(mouseBehaviorSystem);\r\n        // Criando os componentes de seguir caminho para os ratos\r\n        mouse1.addComponent(new index_23.MouseFollowPathComponent(7.5, 7, [\r\n            new Vector3(17.37, 1.69, 10.06),\r\n            new Vector3(16.7, 1.7, 11.47),\r\n            new Vector3(16.3, 2.24, 11.28)\r\n        ], 2));\r\n        mouse2.addComponent(new index_23.MouseFollowPathComponent(0, 6, [\r\n            new Vector3(17.49, 0.6, 11.85),\r\n            new Vector3(16.7, 1.7, 11.47),\r\n            new Vector3(16.36, 1.7, 12.17)\r\n        ], 5));\r\n        // Quando o jogador vence o jogo\r\n        arcade.onCompletion = function () {\r\n            // Revelar a dica\r\n            ticket.emitTicket();\r\n            // Remover os componentes para parar os ratos\r\n            mouse1.removeComponent(index_24.default.FollowPathComponent);\r\n            mouse2.removeComponent(index_24.default.FollowPathComponent);\r\n            engine.removeSystem(mouseBehaviorSystem);\r\n        };\r\n    }\r\n    exports.CreateRoom8 = CreateRoom8;\r\n});\r\ndefine(\"src/modules/stateMachine\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.StateMachine = void 0;\r\n    var StateMachine = /** @class */ (function () {\r\n        function StateMachine() {\r\n        }\r\n        Object.defineProperty(StateMachine.prototype, \"state\", {\r\n            /**\r\n             * get current state\r\n             */\r\n            get: function () { return this.currentState; },\r\n            enumerable: false,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * set a new state\r\n         * @param state new state\r\n         */\r\n        StateMachine.prototype.setState = function (state) {\r\n            if (this.currentState != null) {\r\n                this.currentState.onKill();\r\n            }\r\n            this.currentState = state;\r\n            if (this.currentState != null) {\r\n                this.currentState.onStart();\r\n            }\r\n        };\r\n        /**\r\n         * handle a custom event\r\n         * @param event event to handle\r\n         */\r\n        StateMachine.prototype.handleEvent = function (event) {\r\n            if (this.currentState != null) {\r\n                this.currentState.onHandleEvent(event);\r\n            }\r\n        };\r\n        StateMachine.prototype.update = function (dt) {\r\n            if (this.currentState != null) {\r\n                if (!this.currentState.onUpdateState(dt)) {\r\n                    var temp = this.currentState;\r\n                    this.currentState = null;\r\n                    temp.onEnd();\r\n                    if (temp.nextState) {\r\n                        this.setState(temp.nextState);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        return StateMachine;\r\n    }());\r\n    exports.StateMachine = StateMachine;\r\n    (function (StateMachine) {\r\n        var State = /** @class */ (function () {\r\n            function State() {\r\n                /**\r\n                 * next state to start when this state is finished\r\n                 */\r\n                this.nextState = null;\r\n            }\r\n            /**\r\n             * called when state machine start this state.\r\n             */\r\n            State.prototype.onStart = function () {\r\n            };\r\n            /**\r\n             * called when state machine updates this state.\r\n             * return true if state is still active or false if state should finish\r\n             * @param dt delta time\r\n             */\r\n            State.prototype.onUpdateState = function (dt) {\r\n                return false;\r\n            };\r\n            /**\r\n             * called when state has finish\r\n             */\r\n            State.prototype.onEnd = function () {\r\n            };\r\n            /**\r\n             * called when state machine kill this state to start another state\r\n             */\r\n            State.prototype.onKill = function () {\r\n            };\r\n            /**\r\n             * handle event received by the state machine\r\n             * @param event event received by the state machine\r\n             */\r\n            State.prototype.onHandleEvent = function (event) {\r\n            };\r\n            return State;\r\n        }());\r\n        StateMachine.State = State;\r\n    })(StateMachine = exports.StateMachine || (exports.StateMachine = {}));\r\n    exports.StateMachine = StateMachine;\r\n});\r\ndefine(\"src/stateMachine/stateMachineCollisionEvent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.StateMachineCollisionEvent = void 0;\r\n    /**\r\n     * Evento para a máquina de estados quando uma colisão é acionada.\r\n     */\r\n    var StateMachineCollisionEvent = /** @class */ (function () {\r\n        /**\r\n         *\r\n         * @param stateMachine Referência da máquina de estados\r\n         * @param entity Referência da entidade com a qual colidimos\r\n         * @param triggerType Tipo do gatilho com o qual colidimos\r\n         */\r\n        function StateMachineCollisionEvent(stateMachine, entity, triggerType) {\r\n            this.stateMachine = stateMachine;\r\n            this.entity = entity;\r\n            this.triggerType = triggerType;\r\n        }\r\n        StateMachineCollisionEvent.PIKES = 0;\r\n        StateMachineCollisionEvent.BOXES = 1;\r\n        StateMachineCollisionEvent.FANS = 2;\r\n        StateMachineCollisionEvent.CAGE = 3;\r\n        return StateMachineCollisionEvent;\r\n    }());\r\n    exports.StateMachineCollisionEvent = StateMachineCollisionEvent;\r\n});\r\ndefine(\"src/stateMachine/stateMachineOnClickEvent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.StateMachineOnClickEvent = void 0;\r\n    /**\r\n     * Evento para a máquina de estados quando clicamos no mouse ou na bolha.\r\n     */\r\n    var StateMachineOnClickEvent = /** @class */ (function () {\r\n        /**\r\n         * Construtor da classe.\r\n         *\r\n         * @param stateMachine Referência à máquina de estados.\r\n         * @param bubbleState Referência ao estado para criar a bolha.\r\n         * @param burstState Referência ao estado para estourar a bolha.\r\n         */\r\n        function StateMachineOnClickEvent(stateMachine, bubbleState, burstState) {\r\n            this.stateMachine = stateMachine;\r\n            this.bubbleState = bubbleState;\r\n            this.burstState = burstState;\r\n        }\r\n        return StateMachineOnClickEvent;\r\n    }());\r\n    exports.StateMachineOnClickEvent = StateMachineOnClickEvent;\r\n});\r\ndefine(\"src/components/mouseComponent\", [\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseComponent = void 0;\r\n    var MouseComponent = /** @class */ (function () {\r\n        function MouseComponent(mouseEntity) {\r\n            this.bubble = null;\r\n            this.transform = mouseEntity.getComponent(Transform);\r\n            this.mouseEntity = mouseEntity;\r\n        }\r\n        MouseComponent = __decorate([\r\n            Component(\"mouseComponent\")\r\n        ], MouseComponent);\r\n        return MouseComponent;\r\n    }());\r\n    exports.MouseComponent = MouseComponent;\r\n});\r\ndefine(\"src/stateMachine/mouseStateAppear\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, stateMachine_1, index_25) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseStateAppear = void 0;\r\n    /**\r\n     * Estado de aparecimento do rato.\r\n     */\r\n    var MouseStateAppear = /** @class */ (function (_super) {\r\n        __extends(MouseStateAppear, _super);\r\n        function MouseStateAppear(mouseComponent) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseStateAppear.prototype.onStart = function () {\r\n            var _this = this;\r\n            // Define a posição inicial do rato\r\n            this.mouseComponent.transform.position = new Vector3(-0.872083, 1, -0.579439);\r\n            // Define a escala inicial do rato\r\n            this.mouseComponent.transform.scale = Vector3.Zero();\r\n            // Define a direção como zero\r\n            this.mouseComponent.direction = Vector3.Zero();\r\n            // Inicia a escala do rato e define sua direção quando terminar de escalonar\r\n            this.mouseComponent.mouseEntity.addComponent(new index_25.default.ScaleTransformComponent(Vector3.Zero(), Vector3.One(), 1, function () {\r\n                _this.mouseComponent.direction = Vector3.Right();\r\n                _this.mouseComponent.transform.lookAt(_this.mouseComponent.transform.position.add(_this.mouseComponent.direction));\r\n            }, index_25.default.InterpolationType.EASEQUAD));\r\n        };\r\n        return MouseStateAppear;\r\n    }(stateMachine_1.StateMachine.State));\r\n    exports.MouseStateAppear = MouseStateAppear;\r\n});\r\ndefine(\"src/stateMachine/mouseDeadState\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, stateMachine_2, index_26) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseDeadState = void 0;\r\n    /**\r\n     * Estado para quando o rato morre.\r\n     */\r\n    var MouseDeadState = /** @class */ (function (_super) {\r\n        __extends(MouseDeadState, _super);\r\n        function MouseDeadState(mouseComponent) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseDeadState.prototype.onStart = function () {\r\n            var _this = this;\r\n            // Estado está em execução\r\n            this.isStateRunning = true;\r\n            // Define o tempo para os componentes de transformação do sistema\r\n            var time = 1.5;\r\n            // Rotaciona o rato\r\n            this.mouseComponent.mouseEntity.addComponent(new index_26.default.RotateTransformComponent(this.mouseComponent.transform.rotation, this.mouseComponent.transform.rotation.multiply(Quaternion.Euler(0, 270, 0)), time));\r\n            // E dimensiona o rato para baixo\r\n            this.mouseComponent.mouseEntity.addComponent(new index_26.default.ScaleTransformComponent(this.mouseComponent.transform.scale, Vector3.Zero(), time, function () {\r\n                // Agora o estado deve terminar\r\n                _this.isStateRunning = false;\r\n            }, index_26.default.InterpolationType.EASEINQUAD));\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt Delta.\r\n         * Retorna TRUE para continuar o estado, FALSE para finalizar o estado.\r\n         */\r\n        MouseDeadState.prototype.onUpdateState = function () {\r\n            // O estado está em execução?\r\n            return this.isStateRunning;\r\n        };\r\n        return MouseDeadState;\r\n    }(stateMachine_2.StateMachine.State));\r\n    exports.MouseDeadState = MouseDeadState;\r\n});\r\ndefine(\"src/stateMachine/mouseEnterCageState\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, stateMachine_3, index_27) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseEnterCageState = void 0;\r\n    /**\r\n     * Estado para fazer o rato entrar na gaiola.\r\n     */\r\n    var MouseEnterCageState = /** @class */ (function (_super) {\r\n        __extends(MouseEnterCageState, _super);\r\n        /**\r\n         * Cria uma instância do estado.\r\n         * @param mouseComponent Componente do rato.\r\n         * @param onStateFinish Callback quando o estado termina.\r\n         */\r\n        function MouseEnterCageState(mouseComponent, onStateFinish) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            _this.onStateFinish = onStateFinish;\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseEnterCageState.prototype.onStart = function () {\r\n            var _this = this;\r\n            // O estado está em execução\r\n            this.isStateRunning = true;\r\n            // Vamos mover o rato para dentro da gaiola\r\n            this.mouseComponent.mouseEntity.addComponent(new index_27.default.MoveTransformComponent(this.mouseComponent.transform.position, new Vector3(1.85275, 1.06965, -0.04), 1.5, function () {\r\n                // O estado deve terminar agora\r\n                _this.isStateRunning = false;\r\n            }, index_27.default.InterpolationType.EASEQUAD));\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt Delta.\r\n         * Retorna TRUE para continuar o estado, FALSE para finalizar o estado.\r\n         */\r\n        MouseEnterCageState.prototype.onUpdateState = function () {\r\n            return this.isStateRunning;\r\n        };\r\n        MouseEnterCageState.prototype.onEnd = function () {\r\n            // Chamada de retorno\r\n            if (this.onStateFinish)\r\n                this.onStateFinish();\r\n        };\r\n        return MouseEnterCageState;\r\n    }(stateMachine_3.StateMachine.State));\r\n    exports.MouseEnterCageState = MouseEnterCageState;\r\n});\r\ndefine(\"src/stateMachine/mouseStateWalking\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"src/stateMachine/stateMachineCollisionEvent\", \"src/stateMachine/stateMachineOnClickEvent\"], function (require, exports, stateMachine_4, stateMachineCollisionEvent_1, stateMachineOnClickEvent_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseStateWalking = void 0;\r\n    /**\r\n     * Estado de caminhada do rato.\r\n     */\r\n    var MouseStateWalking = /** @class */ (function (_super) {\r\n        __extends(MouseStateWalking, _super);\r\n        /**\r\n         * Criar uma instância do estado\r\n         * @param mouseComponent Componente do rato\r\n         * @param deadState Estado para o rato morrer\r\n         * @param cageState Estado para entrar na gaiola\r\n         */\r\n        function MouseStateWalking(mouseComponent, deadState, cageState) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            _this.deadState = deadState;\r\n            _this.cageState = cageState;\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseStateWalking.prototype.onStart = function () {\r\n            // Rota o rato para olhar na direção\r\n            this.mouseComponent.transform.lookAt(this.mouseComponent.transform.position.add(this.mouseComponent.direction));\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt delta\r\n         * Retorna TRUE para manter o estado em execução, FALSE para finalizar o estado\r\n         */\r\n        MouseStateWalking.prototype.onUpdateState = function (dt) {\r\n            // Move o rato\r\n            this.mouseComponent.transform.position = this.mouseComponent.transform.position.add(this.mouseComponent.direction.scale(0.5 * dt));\r\n            // Verifica os limites do cenário para fazer o rato quicar e ir na outra direção\r\n            if (this.mouseComponent.transform.position.x < -1.12) {\r\n                this.mouseComponent.transform.position.x = -1.12;\r\n                this.changeDirection();\r\n            }\r\n            else if (this.mouseComponent.transform.position.x > 0.98) {\r\n                this.mouseComponent.transform.position.x = 0.98;\r\n                this.changeDirection();\r\n            }\r\n            if (this.mouseComponent.transform.position.z > 1.33) {\r\n                this.mouseComponent.transform.position.z = 1.33;\r\n                this.changeDirection();\r\n            }\r\n            else if (this.mouseComponent.transform.position.z < -1.37) {\r\n                this.mouseComponent.transform.position.z = -1.37;\r\n                this.changeDirection();\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * Lida com os eventos recebidos pela máquina de estados.\r\n         * @param event Evento a ser tratado\r\n         */\r\n        MouseStateWalking.prototype.onHandleEvent = function (event) {\r\n            // Se uma colisão for recebida\r\n            if (event instanceof stateMachineCollisionEvent_1.StateMachineCollisionEvent) {\r\n                // Se for PIKES, o rato deve morrer\r\n                if (event.triggerType == stateMachineCollisionEvent_1.StateMachineCollisionEvent.PIKES) {\r\n                    event.stateMachine.setState(this.deadState);\r\n                }\r\n                // Se for uma caixa, o rato deve mudar sua direção de movimento\r\n                else if (event.triggerType == stateMachineCollisionEvent_1.StateMachineCollisionEvent.BOXES) {\r\n                    this.changeDirection();\r\n                }\r\n                // Se for a GAIOLA, chamamos o estado para finalizar o quebra-cabeça\r\n                else if (event.triggerType == stateMachineCollisionEvent_1.StateMachineCollisionEvent.CAGE) {\r\n                    var mouseForward = Vector3.Forward().rotate(this.mouseComponent.transform.rotation);\r\n                    if (mouseForward.x >= 0.9) {\r\n                        event.stateMachine.setState(this.cageState);\r\n                    }\r\n                }\r\n            }\r\n            // Se o rato for clicado, a bolha deve aparecer\r\n            else if (event instanceof stateMachineOnClickEvent_1.StateMachineOnClickEvent) {\r\n                event.stateMachine.setState(event.bubbleState);\r\n            }\r\n        };\r\n        /**\r\n         * Muda a direção de movimento do rato e a rotação do rato.\r\n         */\r\n        MouseStateWalking.prototype.changeDirection = function () {\r\n            this.mouseComponent.direction = this.mouseComponent.direction.scale(-1);\r\n            this.mouseComponent.transform.lookAt(this.mouseComponent.transform.position.add(this.mouseComponent.direction));\r\n        };\r\n        return MouseStateWalking;\r\n    }(stateMachine_4.StateMachine.State));\r\n    exports.MouseStateWalking = MouseStateWalking;\r\n});\r\ndefine(\"src/stateMachine/mouseBurstBubbleState\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"node_modules/decentraland-ecs-utils/index\"], function (require, exports, stateMachine_5, index_28) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseBurstBubbleState = void 0;\r\n    /**\r\n     * Estado de estouro da bolha.\r\n     */\r\n    var MouseBurstBubbleState = /** @class */ (function (_super) {\r\n        __extends(MouseBurstBubbleState, _super);\r\n        /**\r\n         * Cria uma instância do estado.\r\n         * @param mouseComponent Componente do rato.\r\n         * @param burstParticleSystem Sistema de partículas para usar quando a bolha estourar.\r\n         */\r\n        function MouseBurstBubbleState(mouseComponent) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            _this.audioClipPop = new AudioClip(\"sounds/pop.mp3\");\r\n            var bubbleParticleMaterial = new Material();\r\n            bubbleParticleMaterial.albedoTexture = new Texture(\"images/room9/bubbleParticle.png\", { hasAlpha: true });\r\n            bubbleParticleMaterial.transparencyMode = 2;\r\n            bubbleParticleMaterial.emissiveColor = Color3.White();\r\n            _this.burstParticle = new Entity();\r\n            _this.burstParticle.addComponent(new PlaneShape());\r\n            _this.burstParticle.addComponent(new Billboard());\r\n            _this.burstParticle.addComponent(bubbleParticleMaterial);\r\n            _this.burstParticle.addComponent(new Transform({ scale: Vector3.Zero() }));\r\n            _this.burstParticle.setParent(mouseComponent.mouseEntity.getParent());\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseBurstBubbleState.prototype.onStart = function () {\r\n            var _this = this;\r\n            // Define o estado como em execução\r\n            this.isStateRunning = true;\r\n            // Escala a bolha para baixo\r\n            this.mouseComponent.bubble.addComponent(new index_28.default.ScaleTransformComponent(new Vector3(0.5, 0.5, 0.5), Vector3.One(), 0.5, function () {\r\n                // O estado deve terminar agora\r\n                _this.isStateRunning = false;\r\n                // Define a bolha como invisível\r\n                _this.mouseComponent.bubble.getComponent(SphereShape).visible = false;\r\n                // Define a posição da partícula\r\n                var particleTransform = _this.burstParticle.getComponent(Transform);\r\n                particleTransform.position = _this.mouseComponent.transform.position;\r\n                // Reproduz o efeito de partícula\r\n                _this.burstParticle.addComponent(new index_28.default.ScaleTransformComponent(Vector3.Zero(), new Vector3(0.4, 0.4, 0.4), 0.3, function () {\r\n                    particleTransform.scale = Vector3.Zero();\r\n                }));\r\n                // Reproduz o som\r\n                var audioSource = new AudioSource(_this.audioClipPop);\r\n                _this.mouseComponent.mouseEntity.addComponentOrReplace(audioSource);\r\n                audioSource.playOnce();\r\n            }));\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt Delta.\r\n         * Retorna TRUE para continuar o estado, FALSE para finalizar o estado.\r\n         */\r\n        MouseBurstBubbleState.prototype.onUpdateState = function () {\r\n            // O estado ainda está em execução?\r\n            return this.isStateRunning;\r\n        };\r\n        return MouseBurstBubbleState;\r\n    }(stateMachine_5.StateMachine.State));\r\n    exports.MouseBurstBubbleState = MouseBurstBubbleState;\r\n});\r\ndefine(\"src/stateMachine/mouseBubbleState\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"src/stateMachine/stateMachineOnClickEvent\", \"src/stateMachine/stateMachineCollisionEvent\"], function (require, exports, stateMachine_6, stateMachineOnClickEvent_2, stateMachineCollisionEvent_2) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseBubbleState = void 0;\r\n    /**\r\n     * Estado de bolha flutuando ao redor impulsionada por algum vento dos ventiladores.\r\n     */\r\n    var MouseBubbleState = /** @class */ (function (_super) {\r\n        __extends(MouseBubbleState, _super);\r\n        /**\r\n         * Cria uma instância do estado.\r\n         * @param mouseComponent Componente do rato.\r\n         * @param bubbleBurstState Estado de estouro da bolha.\r\n         */\r\n        function MouseBubbleState(mouseComponent, bubbleBurstState) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            _this.bubbleBurstState = bubbleBurstState;\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseBubbleState.prototype.onStart = function () {\r\n            this.time = 0.5;\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt Delta.\r\n         * Retorna TRUE para continuar o estado, FALSE para finalizar o estado.\r\n         */\r\n        MouseBubbleState.prototype.onUpdateState = function (dt) {\r\n            // Incrementa o tempo.\r\n            this.time += dt;\r\n            // Calcula a nova posição de acordo com a direção do rato, velocidade e tempo.\r\n            var newPosition = this.mouseComponent.transform.position.add(this.mouseComponent.direction.scale(0.2 * dt));\r\n            // Vamos usar a função SENO para mover o rato um pouco para cima e para baixo.\r\n            newPosition.y = 1.5 + Math.sin(this.time) * 0.1;\r\n            // Define a nova posição para o rato.\r\n            this.mouseComponent.transform.position = newPosition;\r\n            // Verifica os limites do ambiente.\r\n            if (this.mouseComponent.transform.position.x < -1.12) {\r\n                this.mouseComponent.transform.position.x = -1.12;\r\n            }\r\n            else if (this.mouseComponent.transform.position.x > 0.98) {\r\n                this.mouseComponent.transform.position.x = 0.98;\r\n            }\r\n            if (this.mouseComponent.transform.position.z > 1.33) {\r\n                this.mouseComponent.transform.position.z = 1.33;\r\n            }\r\n            else if (this.mouseComponent.transform.position.z < -1.37) {\r\n                this.mouseComponent.transform.position.z = -1.37;\r\n            }\r\n            return true;\r\n        };\r\n        /**\r\n         * Manipula os eventos recebidos pela máquina de estados.\r\n         * @param event Evento a ser tratado.\r\n         */\r\n        MouseBubbleState.prototype.onHandleEvent = function (event) {\r\n            // Se a bolha for clicada, a estouramos.\r\n            if (event instanceof stateMachineOnClickEvent_2.StateMachineOnClickEvent) {\r\n                event.stateMachine.setState(this.bubbleBurstState);\r\n            }\r\n            // Se recebermos um evento de colisão.\r\n            else if (event instanceof stateMachineCollisionEvent_2.StateMachineCollisionEvent) {\r\n                // Se for um VENTILADOR, então nos movemos na direção à frente dele.\r\n                if (event.triggerType == stateMachineCollisionEvent_2.StateMachineCollisionEvent.FANS) {\r\n                    var parentForward = Vector3.Forward().rotate(event.entity.getComponent(Transform).rotation);\r\n                    this.mouseComponent.direction = parentForward;\r\n                }\r\n                // Se for uma ARMADILHA, então a bolha deve estourar.\r\n                else if (event.triggerType == stateMachineCollisionEvent_2.StateMachineCollisionEvent.PIKES) {\r\n                    event.stateMachine.setState(this.bubbleBurstState);\r\n                }\r\n            }\r\n        };\r\n        return MouseBubbleState;\r\n    }(stateMachine_6.StateMachine.State));\r\n    exports.MouseBubbleState = MouseBubbleState;\r\n});\r\ndefine(\"src/stateMachine/mouseBubbleStartState\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"node_modules/decentraland-ecs-utils/index\", \"src/stateMachine/stateMachineOnClickEvent\", \"src/stateMachine/stateMachineCollisionEvent\"], function (require, exports, stateMachine_7, index_29, stateMachineOnClickEvent_3, stateMachineCollisionEvent_3) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseBubbleStartState = void 0;\r\n    /**\r\n     * Estado para a bolha aparecer e depois subir no ar.\r\n     */\r\n    var MouseBubbleStartState = /** @class */ (function (_super) {\r\n        __extends(MouseBubbleStartState, _super);\r\n        /**\r\n         * Cria uma instância do estado.\r\n         * @param mouseComponent componente do rato\r\n         * @param bubbleState estado para o rato dentro da bolha flutuando no lugar\r\n         */\r\n        function MouseBubbleStartState(mouseComponent, bubbleState) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            _this.bubbleState = bubbleState;\r\n            _this.audioClipInflate = new AudioClip(\"sounds/inflator.mp3\");\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseBubbleStartState.prototype.onStart = function () {\r\n            var _this = this;\r\n            // O rato ainda não está totalmente no ar\r\n            this.isUp = false;\r\n            // Vamos fazer a bolha aparecer\r\n            this.mouseComponent.bubble.getComponent(SphereShape).visible = true;\r\n            // Escalamos a bolha para sua escala padrão\r\n            this.mouseComponent.bubble.addComponent(new index_29.default.ScaleTransformComponent(Vector3.Zero(), new Vector3(0.3, 0.3, 0.3), 1.5, function () {\r\n                // Quando a bolha terminar de escalar, levantamos o rato no ar\r\n                var currentPosition = _this.mouseComponent.transform.position;\r\n                var targetPosition = new Vector3(currentPosition.x, 1.4, currentPosition.z);\r\n                _this.mouseComponent.mouseEntity.addComponent(new index_29.default.MoveTransformComponent(currentPosition, targetPosition, 1, function () {\r\n                    // Agora o rato está totalmente no ar\r\n                    _this.isUp = true;\r\n                }));\r\n            }));\r\n            // Tocamos o som\r\n            var audioSource = new AudioSource(this.audioClipInflate);\r\n            this.mouseComponent.mouseEntity.addComponentOrReplace(audioSource);\r\n            audioSource.playOnce();\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt delta\r\n         * Retorna TRUE para continuar o estado, FALSE para finalizar o estado\r\n         */\r\n        MouseBubbleStartState.prototype.onUpdateState = function (dt) {\r\n            return true;\r\n        };\r\n        /**\r\n         * Manipula os eventos recebidos pela máquina de estados.\r\n         * @param event evento a ser tratado\r\n         */\r\n        MouseBubbleStartState.prototype.onHandleEvent = function (event) {\r\n            // Se a bolha for clicada\r\n            if (event instanceof stateMachineOnClickEvent_3.StateMachineOnClickEvent) {\r\n                // E estivermos totalmente no ar\r\n                if (this.isUp) {\r\n                    // Estouramos a bolha\r\n                    event.stateMachine.setState(event.burstState);\r\n                }\r\n            }\r\n            // Se recebermos um evento de colisão\r\n            else if (event instanceof stateMachineCollisionEvent_3.StateMachineCollisionEvent) {\r\n                // E a colisão for com um gatilho de um ventilador\r\n                if (event.triggerType == stateMachineCollisionEvent_3.StateMachineCollisionEvent.FANS) {\r\n                    // Obtemos o vetor de frente do ventilador e definimos como a direção do rato\r\n                    var parentForward = Vector3.Forward().rotate(event.entity.getComponent(Transform).rotation);\r\n                    this.mouseComponent.direction = parentForward;\r\n                    // E mudamos o estado para o estado de bolha flutuante ao redor\r\n                    event.stateMachine.setState(this.bubbleState);\r\n                }\r\n            }\r\n        };\r\n        return MouseBubbleStartState;\r\n    }(stateMachine_7.StateMachine.State));\r\n    exports.MouseBubbleStartState = MouseBubbleStartState;\r\n});\r\ndefine(\"src/stateMachine/mouseFallingState\", [\"require\", \"exports\", \"src/modules/stateMachine\", \"node_modules/decentraland-ecs-utils/index\", \"src/stateMachine/stateMachineCollisionEvent\"], function (require, exports, stateMachine_8, index_30, stateMachineCollisionEvent_4) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.MouseFallingState = void 0;\r\n    /**\r\n     * Estado para o rato caindo após a bolha explodir.\r\n     */\r\n    var MouseFallingState = /** @class */ (function (_super) {\r\n        __extends(MouseFallingState, _super);\r\n        /**\r\n         * Cria uma instância do estado.\r\n         * @param mouseComponent Componente do rato.\r\n         * @param deadState Estado para iniciar se o rato morrer.\r\n         */\r\n        function MouseFallingState(mouseComponent, deadState) {\r\n            var _this = _super.call(this) || this;\r\n            _this.mouseComponent = mouseComponent;\r\n            _this.deadState = deadState;\r\n            return _this;\r\n        }\r\n        /**\r\n         * Chamado quando o estado começa.\r\n         */\r\n        MouseFallingState.prototype.onStart = function () {\r\n            var _this = this;\r\n            // Define o estado como em execução\r\n            this.isStateRunning = true;\r\n            // Move o rato um pouco para cima com uma saída suave (ease out)\r\n            this.mouseComponent.mouseEntity.addComponent(new index_30.default.MoveTransformComponent(this.mouseComponent.transform.position, this.mouseComponent.transform.position.add(new Vector3(0, 0.1, 0)), 0.2, function () {\r\n                // Calcula a posição até o chão\r\n                var targetPosition = new Vector3(_this.mouseComponent.transform.position.x, 1, _this.mouseComponent.transform.position.z);\r\n                // Move o rato até o chão\r\n                _this.mouseComponent.mouseEntity.addComponent(new index_30.default.MoveTransformComponent(_this.mouseComponent.transform.position, targetPosition, 0.5, function () {\r\n                    // O estado deve terminar agora\r\n                    _this.isStateRunning = false;\r\n                }, index_30.default.InterpolationType.EASEINQUAD));\r\n            }, index_30.default.InterpolationType.EASEOUTQUAD));\r\n        };\r\n        /**\r\n         * Chamado quando o estado é atualizado.\r\n         * @param dt Delta.\r\n         * Retorna TRUE para continuar o estado, FALSE para finalizar o estado.\r\n         */\r\n        MouseFallingState.prototype.onUpdateState = function () {\r\n            // O estado ainda está em execução?\r\n            return this.isStateRunning;\r\n        };\r\n        /**\r\n         * Manipula eventos recebidos pela máquina de estados.\r\n         * @param event Evento a ser tratado.\r\n         */\r\n        MouseFallingState.prototype.onHandleEvent = function (event) {\r\n            // Se desencadeamos uma colisão enquanto caímos\r\n            if (event instanceof stateMachineCollisionEvent_4.StateMachineCollisionEvent) {\r\n                // Se colidimos com uma \"PIKE\" ou com uma \"BOX\"\r\n                if (event.triggerType == stateMachineCollisionEvent_4.StateMachineCollisionEvent.PIKES ||\r\n                    event.triggerType == stateMachineCollisionEvent_4.StateMachineCollisionEvent.BOXES) {\r\n                    // Parar de mover para baixo\r\n                    if (this.mouseComponent.mouseEntity.hasComponent(index_30.default.MoveTransformComponent)) {\r\n                        this.mouseComponent.mouseEntity.removeComponent(index_30.default.MoveTransformComponent);\r\n                    }\r\n                    // O rato deve morrer\r\n                    event.stateMachine.setState(this.deadState);\r\n                }\r\n            }\r\n        };\r\n        return MouseFallingState;\r\n    }(stateMachine_8.StateMachine.State));\r\n    exports.MouseFallingState = MouseFallingState;\r\n});\r\ndefine(\"src/scenes/room9\", [\"require\", \"exports\", \"node_modules/decentraland-ecs-utils/index\", \"src/resources\", \"src/modules/stateMachine\", \"src/gameObjects/index\", \"src/stateMachine/stateMachineCollisionEvent\", \"src/stateMachine/stateMachineOnClickEvent\", \"src/stateMachine/mouseStateAppear\", \"src/stateMachine/mouseDeadState\", \"src/stateMachine/mouseEnterCageState\", \"src/stateMachine/mouseStateWalking\", \"src/stateMachine/mouseBurstBubbleState\", \"src/stateMachine/mouseBubbleState\", \"src/stateMachine/mouseBubbleStartState\", \"src/stateMachine/mouseFallingState\", \"src/components/mouseComponent\"], function (require, exports, index_31, resources_18, stateMachine_9, index_32, stateMachineCollisionEvent_5, stateMachineOnClickEvent_4, mouseStateAppear_1, mouseDeadState_1, mouseEnterCageState_1, mouseStateWalking_1, mouseBurstBubbleState_1, mouseBubbleState_1, mouseBubbleStartState_1, mouseFallingState_1, mouseComponent_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.CreateRoom9 = void 0;\r\n    // Definir camadas de gatilho\r\n    var MouseLayer = 8; // 1000 em binário\r\n    var PikesLayer = 16; // 10000\r\n    var BoxLayer = 32; // 100000\r\n    var FanLayer = 64; // 1000000\r\n    var CageLayer = 128; // 10000000\r\n    // ex: 10100000 (160) significa gaiola ou caixa\r\n    function CreateRoom9() {\r\n        // Criar entidade da porta\r\n        var door = new index_32.Door(resources_18.default.models.door9, { position: new Vector3(23.2215, 0, 25.0522) }, resources_18.default.sounds.doorSqueek);\r\n        // Ouvir evento de clique para alternar o estado da porta\r\n        door.addComponent(new OnPointerDown(function () {\r\n            door.openDoor();\r\n        }));\r\n        // Criar gaveta para dica\r\n        var drawer = new Entity();\r\n        var drawerClip = new AnimationState(\"Drawer_Action\", { looping: false });\r\n        var drawerAnimator = new Animator();\r\n        drawerAnimator.addClip(drawerClip);\r\n        drawer.addComponent(new GLTFShape(\"models/room9/Drawer.glb\"));\r\n        drawer.addComponent(new Transform({ position: new Vector3(20.5487, 0.563795, 28.6556) }));\r\n        drawer.addComponent(drawerAnimator);\r\n        engine.addEntity(drawer);\r\n        // Criar entidade da sala\r\n        var roomEntity = new Entity();\r\n        // Adicionar forma GLTF\r\n        roomEntity.addComponent(new GLTFShape(\"models/room9/Puzzle09_Game.glb\"));\r\n        // Adicionar e definir transformação\r\n        roomEntity.addComponent(new Transform({ position: new Vector3(19.0928, 0, 28.6582) }));\r\n        // Criar animador\r\n        var roomAnimator = new Animator();\r\n        // Criar estado de animação para a sala\r\n        var roomAnimation = new AnimationState(\"Spikes_Action\", { looping: true });\r\n        // Adicionar clipe ao animador\r\n        roomAnimator.addClip(roomAnimation);\r\n        // Adicionar animador à entidade\r\n        roomEntity.addComponent(roomAnimator);\r\n        // Reproduzir animação\r\n        roomAnimation.play();\r\n        // Adicionar sala ao motor\r\n        engine.addEntity(roomEntity);\r\n        // Criar rato\r\n        var mouseEntity = new Entity(\"mouse\");\r\n        // Definir rato como filho da sala\r\n        mouseEntity.setParent(roomEntity);\r\n        // Adicionar forma GLTF\r\n        mouseEntity.addComponent(new GLTFShape(\"models/room9/Puzzle09_MouseWill.glb\"));\r\n        // Criar e adicionar transformação\r\n        var mouseTransform = new Transform();\r\n        mouseEntity.addComponent(mouseTransform);\r\n        // Criar e adicionar componente de rato\r\n        var mouseComponent = new mouseComponent_1.MouseComponent(mouseEntity);\r\n        mouseEntity.addComponent(mouseComponent);\r\n        // Criar máquina de estados\r\n        var mouseStateMachine = new stateMachine_9.StateMachine();\r\n        engine.addSystem(mouseStateMachine);\r\n        // Adicionar gatilho para o rato\r\n        mouseEntity.addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.2, 0.1, 0.2), new Vector3(0, 0, 0)), MouseLayer, PikesLayer | BoxLayer | FanLayer | CageLayer, function (entityEnter) {\r\n            var triggerType = stateMachineCollisionEvent_5.StateMachineCollisionEvent.BOXES;\r\n            var triggerLayer = entityEnter.getComponent(index_31.default.TriggerComponent).layer;\r\n            if (triggerLayer == PikesLayer) {\r\n                triggerType = stateMachineCollisionEvent_5.StateMachineCollisionEvent.PIKES;\r\n            }\r\n            else if (triggerLayer == FanLayer) {\r\n                triggerType = stateMachineCollisionEvent_5.StateMachineCollisionEvent.FANS;\r\n            }\r\n            else if (triggerLayer == CageLayer) {\r\n                triggerType = stateMachineCollisionEvent_5.StateMachineCollisionEvent.CAGE;\r\n            }\r\n            mouseStateMachine.handleEvent(new stateMachineCollisionEvent_5.StateMachineCollisionEvent(mouseStateMachine, entityEnter, triggerType));\r\n        }));\r\n        // Criar estados do rato\r\n        // Estado para o rato aparecer quando o jogo começa\r\n        var mouseStateAppear = new mouseStateAppear_1.MouseStateAppear(mouseComponent);\r\n        // Estado para quando o rato morre\r\n        var mouseStateDie = new mouseDeadState_1.MouseDeadState(mouseComponent);\r\n        // Estado para o rato entrar na gaiola\r\n        var mouseStateEnterCage = new mouseEnterCageState_1.MouseEnterCageState(mouseComponent, function () {\r\n            drawerClip.play();\r\n        });\r\n        // Estado para o rato andar\r\n        var mouseStateWalking = new mouseStateWalking_1.MouseStateWalking(mouseComponent, mouseStateDie, mouseStateEnterCage);\r\n        // Estado para estourar a bolha\r\n        var mouseStateBurstBubble = new mouseBurstBubbleState_1.MouseBurstBubbleState(mouseComponent);\r\n        // Estado para o rato flutuar dentro da bolha\r\n        var mouseStateBubble = new mouseBubbleState_1.MouseBubbleState(mouseComponent, mouseStateBurstBubble);\r\n        // Estado para a bolha aparecer e subir\r\n        var mouseStateBubbleAppear = new mouseBubbleStartState_1.MouseBubbleStartState(mouseComponent, mouseStateBubble);\r\n        // Estado para o rato cair no chão\r\n        var mouseStateFalling = new mouseFallingState_1.MouseFallingState(mouseComponent, mouseStateDie);\r\n        // Ouvir clique no rato\r\n        mouseEntity.addComponent(new OnPointerDown(function (event) {\r\n            mouseStateMachine.handleEvent(new stateMachineOnClickEvent_4.StateMachineOnClickEvent(mouseStateMachine, mouseStateBubbleAppear, mouseStateBurstBubble));\r\n        }));\r\n        // Criar entidade da bolha\r\n        var bubbleEntity = new Entity();\r\n        // Adicionar transformação\r\n        bubbleEntity.addComponent(new Transform({ position: new Vector3(0, 0.1, 0.05) }));\r\n        // Criar forma e adicionar como componente\r\n        var bubbleShape = new SphereShape();\r\n        bubbleEntity.addComponent(bubbleShape);\r\n        // Definir como invisível\r\n        bubbleShape.visible = false;\r\n        // Criar material da bolha\r\n        var bubbleMaterial = new Material();\r\n        bubbleMaterial.albedoTexture = new Texture(\"images/room9/bubbleTexture.png\", {\r\n            hasAlpha: false,\r\n        });\r\n        bubbleMaterial.transparencyMode = 2;\r\n        // Adicionar material da bolha\r\n        bubbleEntity.addComponent(bubbleMaterial);\r\n        // Definir bolha como filho do rato\r\n        bubbleEntity.setParent(mouseEntity);\r\n        // Definir bolha para o componente de rato\r\n        mouseComponent.bubble = bubbleEntity;\r\n        // Ouvir clique na bolha\r\n        bubbleEntity.addComponent(new OnPointerDown(function (event) {\r\n            mouseStateMachine.handleEvent(new stateMachineOnClickEvent_4.StateMachineOnClickEvent(mouseStateMachine, mouseStateBubbleAppear, mouseStateBurstBubble));\r\n        }));\r\n        // Quais estados devem iniciar automaticamente quando um estado termina\r\n        mouseStateAppear.nextState = mouseStateWalking;\r\n        mouseStateBurstBubble.nextState = mouseStateFalling;\r\n        mouseStateFalling.nextState = mouseStateWalking;\r\n        mouseStateDie.nextState = mouseStateAppear;\r\n        // Definir estado inicial\r\n        mouseStateMachine.setState(mouseStateAppear);\r\n        // Carregar clipe de áudio do ventilador\r\n        var audioClipFan = new AudioClip(\"sounds/fan.mp3\");\r\n        // Criar forma do ventilador\r\n        var fanShape = new GLTFShape(\"models/room9/Fan.glb\");\r\n        // Criar matriz de entidades de ventiladores\r\n        var fans = [];\r\n        // Criar transformação dos ventiladores\r\n        var fansTransform = [\r\n            new Transform({\r\n                position: new Vector3(-3.18875, 1.01502, -0.57951),\r\n                rotation: Quaternion.Euler(0, 90, 0),\r\n                scale: new Vector3(0.6, 0.6, 0.6),\r\n            }),\r\n            new Transform({\r\n                position: new Vector3(-3.18875, 1.01502, 0.02),\r\n                rotation: Quaternion.Euler(0, 90, 0),\r\n                scale: new Vector3(0.6, 0.6, 0.6),\r\n            }),\r\n            new Transform({\r\n                position: new Vector3(0.169518, 1.01502, -2.94794),\r\n                scale: new Vector3(0.6, 0.6, 0.6),\r\n            }),\r\n            new Transform({\r\n                position: new Vector3(0.75203, 1.01502, -2.94794),\r\n                scale: new Vector3(0.6, 0.6, 0.6),\r\n            }),\r\n            new Transform({\r\n                position: new Vector3(-0.873027, 1.01502, 3.0735),\r\n                rotation: Quaternion.Euler(0, 180, 0),\r\n                scale: new Vector3(0.6, 0.6, 0.6),\r\n            }),\r\n            new Transform({\r\n                position: new Vector3(1.9556, 1.01502, 1.08835),\r\n                rotation: Quaternion.Euler(0, -90, 0),\r\n                scale: new Vector3(0.6, 0.6, 0.6),\r\n            }),\r\n        ];\r\n        fansTransform.forEach(function (transform) {\r\n            // Instanciar animação\r\n            var fanAnimation = new AnimationState(\"Fan_Action\", { looping: true });\r\n            // Criar animador\r\n            var fanAnimator = new Animator();\r\n            // Adicionar clipe ao animador\r\n            fanAnimator.addClip(fanAnimation);\r\n            // Criar entidade\r\n            var fanEntity = new Entity();\r\n            // Adicionar forma\r\n            fanEntity.addComponent(fanShape);\r\n            // Adicionar animador\r\n            fanEntity.addComponent(fanAnimator);\r\n            // Adicionar transformação\r\n            fanEntity.addComponent(transform);\r\n            // Adicionar fonte de áudio\r\n            fanEntity.addComponent(new AudioSource(audioClipFan));\r\n            // Definir sala como pai\r\n            fanEntity.setParent(roomEntity);\r\n            // Calcular tamanho e posição do gatilho\r\n            var triggerSize = new Vector3(0.5, 0.5, 2.25).rotate(transform.rotation);\r\n            triggerSize.x = Math.abs(triggerSize.x);\r\n            triggerSize.y = Math.abs(triggerSize.y);\r\n            triggerSize.z = Math.abs(triggerSize.z);\r\n            var triggerPosition = new Vector3(0.2, 0.65, 1.35).rotate(transform.rotation);\r\n            // Criar componente de gatilho\r\n            var triggerComponent = new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(triggerSize, triggerPosition), FanLayer);\r\n            triggerComponent.enabled = false;\r\n            fanEntity.addComponent(triggerComponent);\r\n            // Adicionar componente de alternância\r\n            fanEntity.addComponent(new index_31.default.ToggleComponent(index_31.default.ToggleState.Off, function (newValue) {\r\n                if (newValue == index_31.default.ToggleState.On) {\r\n                    fanAnimation.play();\r\n                    fanEntity.getComponent(AudioSource).playing = true;\r\n                    fanEntity.getComponent(AudioSource).loop = true;\r\n                    fanEntity.getComponent(AudioSource).volume = 0.3;\r\n                    triggerComponent.enabled = true;\r\n                }\r\n                else {\r\n                    fanEntity.getComponent(AudioSource).playing = false;\r\n                    fanAnimation.stop();\r\n                    triggerComponent.enabled = false;\r\n                }\r\n            }));\r\n            // Ouvir clique\r\n            fanEntity.addComponent(new OnPointerDown(function () {\r\n                fanEntity.getComponent(index_31.default.ToggleComponent).toggle();\r\n            }));\r\n            // Adicionar entidade ao array\r\n            fans.push(fanEntity);\r\n        });\r\n        // Definir alguns ventiladores como estado ON\r\n        fans[0].getComponent(index_31.default.ToggleComponent).set(index_31.default.ToggleState.On);\r\n        fans[3].getComponent(index_31.default.ToggleComponent).set(index_31.default.ToggleState.On);\r\n        fans[4].getComponent(index_31.default.ToggleComponent).set(index_31.default.ToggleState.On);\r\n        // Gatilhos da sala\r\n        var roomTriggerEntities = [\r\n            new Entity(),\r\n            new Entity(),\r\n            new Entity(),\r\n            new Entity(),\r\n            new Entity(),\r\n            new Entity(),\r\n            new Entity(),\r\n            new Entity(),\r\n        ];\r\n        // Criar gatilhos das pontas\r\n        roomTriggerEntities[0].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.06, 0.52), new Vector3(0.212483, 1.15162, -0.04)), PikesLayer));\r\n        roomTriggerEntities[1].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.4, 0.52), new Vector3(-0.885757, 1.17605, -1.14666)), PikesLayer));\r\n        roomTriggerEntities[2].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.06, 0.52), new Vector3(-0.347696, 1.15162, -0.575279)), PikesLayer));\r\n        roomTriggerEntities[3].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.4, 0.52), new Vector3(0.729466, 1.17605, 1.08766)), PikesLayer));\r\n        roomTriggerEntities[4].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.06, 0.52), new Vector3(-0.347696, 1.15162, 1.08902)), PikesLayer));\r\n        // Criar gatilhos das caixas\r\n        roomTriggerEntities[5].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.16, 0.52), new Vector3(0.212483, 1.04742, -0.04)), BoxLayer));\r\n        roomTriggerEntities[6].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.16, 0.52), new Vector3(-0.347696, 1.04742, -0.575279)), BoxLayer));\r\n        roomTriggerEntities[7].addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.16, 0.52), new Vector3(-0.347696, 1.04742, 1.08902)), BoxLayer));\r\n        // Criar gatilho da gaiola\r\n        var cageTrigger = new Entity();\r\n        cageTrigger.addComponent(new index_31.default.TriggerComponent(new index_31.default.TriggerBoxShape(new Vector3(0.52, 0.16, 0.52), new Vector3(1.0331, 1.04742, -0.04)), CageLayer));\r\n        cageTrigger.setParent(roomEntity);\r\n        // Definir gatilhos como filhos da entidade da sala\r\n        roomTriggerEntities.forEach(function (triggerEntity) {\r\n            triggerEntity.setParent(roomEntity);\r\n        });\r\n    }\r\n    exports.CreateRoom9 = CreateRoom9;\r\n});\r\ndefine(\"src/game\", [\"require\", \"exports\", \"src/gameObjects/index\", \"src/scenes/room1\", \"src/scenes/room2\", \"src/scenes/room3\", \"src/scenes/room4\", \"src/scenes/room5\", \"src/scenes/room6\", \"src/scenes/room7\", \"src/scenes/room8\", \"src/scenes/room9\"], function (require, exports, index_33, room1_1, room2_1, room3_1, room4_1, room5_1, room6_1, room7_1, room8_1, room9_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    new index_33.BaseScene();\r\n    var gameCanvas = new UICanvas();\r\n    (0, room1_1.CreateRoom1)();\r\n    (0, room2_1.CreateRoom2)();\r\n    (0, room3_1.CreateRoom3)();\r\n    (0, room4_1.CreateRoom4)();\r\n    (0, room5_1.CreateRoom5)(gameCanvas);\r\n    (0, room6_1.CreateRoom6)(gameCanvas);\r\n    (0, room7_1.CreateRoom7)();\r\n    (0, room8_1.CreateRoom8)();\r\n    (0, room9_1.CreateRoom9)();\r\n});\r\ndefine(\"src/gameObjects/keypad\", [\"require\", \"exports\", \"src/resources\"], function (require, exports, resources_19) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.Keypad = void 0;\r\n    // Constantes para posicionamento\r\n    var panelPosition = new Vector2(12, -24);\r\n    var buttonSize = new Vector2(55, 55);\r\n    var buttonSpace = new Vector2(5, 5);\r\n    var Keypad = /** @class */ (function () {\r\n        function Keypad(parent) {\r\n            var _this = this;\r\n            this.container = new UIContainerRect(parent);\r\n            this.container.positionX = -50;\r\n            this.container.positionY = 50;\r\n            this.container.width = \"100%\";\r\n            this.container.height = \"100%\";\r\n            // Exibir uma imagem de fundo para o teclado numérico\r\n            var panelBackground = new UIImage(this.container, resources_19.default.textures.panelBackground);\r\n            panelBackground.sourceWidth = 918;\r\n            panelBackground.sourceHeight = 1300;\r\n            panelBackground.width = 310;\r\n            panelBackground.height = 420;\r\n            panelBackground.positionX = 70;\r\n            panelBackground.positionY = -55;\r\n            // Adicionar um botão de fechar próximo ao canto superior direito\r\n            var closeImage = new UIImage(this.container, resources_19.default.textures.closeButton);\r\n            closeImage.sourceWidth = 92;\r\n            closeImage.sourceHeight = 92;\r\n            closeImage.width = 32;\r\n            closeImage.height = 32;\r\n            closeImage.positionX = 194;\r\n            closeImage.positionY = 108;\r\n            // Quando o botão de fechar é clicado, ocultar a UI\r\n            closeImage.onClick = new OnClick(function () {\r\n                _this.container.visible = false;\r\n            });\r\n            // 3 caixas para mostrar o código inserido ou a mensagem atual\r\n            this.panelInputs = [];\r\n            for (var i = 0; i < 3; i++) {\r\n                var inputImage = new UIImage(this.container, resources_19.default.textures.inputBox);\r\n                var inputSlot = new UIText(this.container);\r\n                inputImage.sourceWidth = 173;\r\n                inputImage.sourceHeight = 173;\r\n                inputImage.width = inputSlot.width = buttonSize.x;\r\n                inputImage.height = inputSlot.height = buttonSize.y;\r\n                inputImage.positionX = inputSlot.positionX =\r\n                    i * (buttonSpace.x + buttonSize.x) + 5;\r\n                inputImage.positionY = inputSlot.positionY = 45;\r\n                inputSlot.fontAutoSize = true;\r\n                inputSlot.hTextAlign = \"center\";\r\n                this.panelInputs.push(inputSlot);\r\n            }\r\n            // Botões de entrada do usuário\r\n            for (var col = 0; col < 3; col++) {\r\n                var _loop_4 = function (row) {\r\n                    // O valor que este botão representa\r\n                    var value;\r\n                    if (col == 1 && row == 3) {\r\n                        // O botão 0 é um caso especial\r\n                        value = 0;\r\n                    }\r\n                    else {\r\n                        value = row * 3 + col + 1;\r\n                    }\r\n                    // Criar o botão e seu evento\r\n                    var buttonImage = null;\r\n                    if (col == 0 && row == 3) {\r\n                        // O botão de limpar no canto inferior esquerdo\r\n                        buttonImage = new UIImage(this_2.container, resources_19.default.textures.clearButton);\r\n                        // Chamar onReset quando clicado\r\n                        buttonImage.onClick = new OnClick(function () {\r\n                            _this.onReset();\r\n                        });\r\n                    }\r\n                    else if (col == 2 && row == 3) {\r\n                        // O botão de envio no canto inferior direito\r\n                        buttonImage = new UIImage(this_2.container, resources_19.default.textures.enterButton);\r\n                        // Chamar onSubmit quando clicado\r\n                        buttonImage.onClick = new OnClick(function () {\r\n                            _this.onSubmit();\r\n                        });\r\n                    }\r\n                    else {\r\n                        // Um botão de valor numérico\r\n                        buttonImage = new UIImage(this_2.container, resources_19.default.textures.numberButton);\r\n                        var numberText = new UIText(buttonImage);\r\n                        numberText.isPointerBlocker = false;\r\n                        numberText.positionX = -23;\r\n                        numberText.fontAutoSize = true;\r\n                        numberText.hTextAlign = \"center\";\r\n                        numberText.value = value.toString();\r\n                        // Chamar onInput quando clicado\r\n                        buttonImage.onClick = new OnClick(function () {\r\n                            _this.onInput(value);\r\n                        });\r\n                    }\r\n                    // Configurar a imagem do botão\r\n                    buttonImage.sourceWidth = 171;\r\n                    buttonImage.sourceHeight = 171;\r\n                    buttonImage.width = buttonSize.x;\r\n                    buttonImage.height = buttonSize.y;\r\n                    buttonImage.positionX =\r\n                        panelPosition.x + col * (buttonSpace.x + buttonSize.x);\r\n                    buttonImage.positionY =\r\n                        panelPosition.y - row * (buttonSpace.y + buttonSize.y);\r\n                };\r\n                var this_2 = this;\r\n                for (var row = 0; row < 4; row++) {\r\n                    _loop_4(row);\r\n                }\r\n            }\r\n        }\r\n        // Exibir uma mensagem acima do teclado numérico, até 3 caracteres\r\n        Keypad.prototype.display = function (message, color) {\r\n            if (color === void 0) { color = Color4.White(); }\r\n            for (var i = 0; i < this.panelInputs.length; i++) {\r\n                var character = message.length > i ? message[i] : \"\";\r\n                this.panelInputs[i].value = character;\r\n                this.panelInputs[i].color = color;\r\n            }\r\n        };\r\n        return Keypad;\r\n    }());\r\n    exports.Keypad = Keypad;\r\n});\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL3RyYW5zZm9ybS9jb21wb25lbnQvaXRyYW5zZm9ybWNvbXBvbmVudC50cyIsIi4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL3RyYW5zZm9ybS9tYXRoL2ludGVycG9sYXRpb24udHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy90cmFuc2Zvcm0vY29tcG9uZW50L3JvdGF0ZS50cyIsIi4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL3RyYW5zZm9ybS9jb21wb25lbnQvc2NhbGUudHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy90cmFuc2Zvcm0vY29tcG9uZW50L2ZvbGxvd3BhdGgudHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy90cmFuc2Zvcm0vY29tcG9uZW50L2tlZXByb3RhdGluZy50cyIsIi4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL3RyYW5zZm9ybS9zeXN0ZW0vdHJhbnNmcm9tU3lzdGVtLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvdHJhbnNmb3JtL2NvbXBvbmVudC9tb3ZlLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvdG9nZ2xlL3RvZ2dsZUNvbXBvbmVudC50cyIsIi4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL3RpbWVyL2NvbXBvbmVudC9pdGltZXJjb21wb25lbnQudHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy90aW1lci9jb21wb25lbnQvaW50ZXJ2YWwudHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy90aW1lci9jb21wb25lbnQvZXhwaXJlLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvdGltZXIvc3lzdGVtL3RpbWVyU3lzdGVtLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvdGltZXIvY29tcG9uZW50L2RlbGF5LnRzIiwiLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaGVscGVycy9oZWxwZXJmdW5jdGlvbnMudHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9oZWxwZXJzL3Rlc3RDdWJlLnRzIiwiLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvdHJpZ2dlcnMvdHJpZ2dlclN5c3RlbS50cyIsIi4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2FjdGlvbnNTZXF1ZW5jZVN5c3RlbS9hY3Rpb25zU2VxdWVuY2VTeXN0ZW0udHMiLCIuLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleC50cyIsIi4uL3NyYy9jb21wb25lbnRzL21vdXNlRm9sbG93UGF0aENvbXBvbmVudC50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy9hcmNhZGVTY3JlZW4udHMiLCIuLi9zcmMvcmVzb3VyY2VzLnRzIiwiLi4vc3JjL2dhbWVPYmplY3RzL2Jhc2VTY2VuZS50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy9idXR0b24udHMiLCIuLi9zcmMvZ2FtZU9iamVjdHMvZG9vci50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy9tb2RlbC50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy9tb3VzZS50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy9tb3ZhYmxlRW50aXR5LnRzIiwiLi4vc3JjL2dhbWVPYmplY3RzL251bVBhZExvY2sudHMiLCIuLi9zcmMvZ2FtZU9iamVjdHMvcm90YXRhYmxlRW50aXR5LnRzIiwiLi4vc3JjL2dhbWVPYmplY3RzL3Nwb3RsaWdodC50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy90aWNrZXQudHMiLCIuLi9zcmMvZ2FtZU9iamVjdHMvdGltZXIudHMiLCIuLi9zcmMvY29tcG9uZW50cy90b2dnbGVNb2RlbENvbXBvbmVudC50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy90b2dnbGVFbnRpdHkudHMiLCIuLi9zcmMvZ2FtZU9iamVjdHMvaW5kZXgudHMiLCIuLi9zcmMvc2NlbmVzL3Jvb20xLnRzIiwiLi4vc3JjL3NjZW5lcy9yb29tMi50cyIsIi4uL3NyYy9zY2VuZXMvcm9vbTMudHMiLCIuLi9zcmMvc2NlbmVzL3Jvb200LnRzIiwiLi4vc3JjL3VpL2ltYWdlSGludC50cyIsIi4uL3NyYy91aS9rZXlwYWQudHMiLCIuLi9zcmMvbW9kdWxlcy9zaW1wbGVEaWFsb2cudHMiLCIuLi9zcmMvdWkvbXVuYURpYWxvZy50cyIsIi4uL3NyYy91aS9pbmRleC50cyIsIi4uL3NyYy9zY2VuZXMvcm9vbTUudHMiLCIuLi9zcmMvc2NlbmVzL3Jvb202LnRzIiwiLi4vc3JjL3NjZW5lcy9yb29tNy50cyIsIi4uL3NyYy9jb21wb25lbnRzL21vdXNlRm9sbG93UGF0aFN5c3RlbS50cyIsIi4uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwiLi4vc3JjL3NjZW5lcy9yb29tOC50cyIsIi4uL3NyYy9tb2R1bGVzL3N0YXRlTWFjaGluZS50cyIsIi4uL3NyYy9zdGF0ZU1hY2hpbmUvc3RhdGVNYWNoaW5lQ29sbGlzaW9uRXZlbnQudHMiLCIuLi9zcmMvc3RhdGVNYWNoaW5lL3N0YXRlTWFjaGluZU9uQ2xpY2tFdmVudC50cyIsIi4uL3NyYy9jb21wb25lbnRzL21vdXNlQ29tcG9uZW50LnRzIiwiLi4vc3JjL3N0YXRlTWFjaGluZS9tb3VzZVN0YXRlQXBwZWFyLnRzIiwiLi4vc3JjL3N0YXRlTWFjaGluZS9tb3VzZURlYWRTdGF0ZS50cyIsIi4uL3NyYy9zdGF0ZU1hY2hpbmUvbW91c2VFbnRlckNhZ2VTdGF0ZS50cyIsIi4uL3NyYy9zdGF0ZU1hY2hpbmUvbW91c2VTdGF0ZVdhbGtpbmcudHMiLCIuLi9zcmMvc3RhdGVNYWNoaW5lL21vdXNlQnVyc3RCdWJibGVTdGF0ZS50cyIsIi4uL3NyYy9zdGF0ZU1hY2hpbmUvbW91c2VCdWJibGVTdGF0ZS50cyIsIi4uL3NyYy9zdGF0ZU1hY2hpbmUvbW91c2VCdWJibGVTdGFydFN0YXRlLnRzIiwiLi4vc3JjL3N0YXRlTWFjaGluZS9tb3VzZUZhbGxpbmdTdGF0ZS50cyIsIi4uL3NyYy9zY2VuZXMvcm9vbTkudHMiLCIuLi9zcmMvZ2FtZS50cyIsIi4uL3NyYy9nYW1lT2JqZWN0cy9rZXlwYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQ0FBLElBQVksaUJBS1g7SUFMRCxXQUFZLGlCQUFpQjtRQUMzQiw2REFBTSxDQUFBO1FBQ04scUVBQVUsQ0FBQTtRQUNWLHVFQUFXLENBQUE7UUFDWCxpRUFBUSxDQUFBO0lBQ1YsQ0FBQyxFQUxXLGlCQUFpQixHQUFqQix5QkFBaUIsS0FBakIseUJBQWlCLFFBSzVCO0lBRUQsU0FBZ0IsV0FBVyxDQUFDLElBQXVCLEVBQUUsQ0FBUztRQUM1RCxRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssaUJBQWlCLENBQUMsTUFBTTtnQkFDM0IsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUM3QixLQUFLLGlCQUFpQixDQUFDLFVBQVU7Z0JBQy9CLE9BQU8scUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDakMsS0FBSyxpQkFBaUIsQ0FBQyxXQUFXO2dCQUNoQyxPQUFPLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ2xDLEtBQUssaUJBQWlCLENBQUMsUUFBUTtnQkFDN0IsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUMvQjtnQkFDRSxPQUFPLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFBO1NB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LENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN2RSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDdkUsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzdCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3ZFLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUN2RSxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENB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LFlBQVk7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUE7UUFDeEUsSUFBSSxVQUFVLENBQUMsS0FBSztZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQTtRQUNuRCxJQUFJLFVBQVUsQ0FBQyxRQUFRO1lBQUUsSUFBSSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFBO1FBQzVELElBQUksVUFBVSxDQUFDLFlBQVk7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUE7UUFDeEUsSUFBSSxVQUFVLENBQUMsVUFBVTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQTtRQUNsRSxJQUFJLFVBQVUsQ0FBQyxXQUFXO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFBO1FBQ3JFLElBQUksVUFBVSxDQUFDLFNBQVM7WUFBRSxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUE7UUFDL0QsSUFBSSxVQUFVLENBQUMsVUFBVTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQTtRQUNsRSxJQUFJLFVBQVUsQ0FBQyxXQUFXO1lBQUUsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFBO1FBQ3JFLElBQUksVUFBVSxDQUFDLFlBQVk7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUE7UUFDeEUsSUFBSSxVQUFVLENBQUMsVUFBVTtZQUFFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQTtRQUNsRSxJQUFJLFVBQVUsQ0FBQyxhQUFhO1lBQUUsSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUMsYUFBYSxDQUFBO1FBQzNFLElBQUksVUFBVSxDQUFDLGFBQWE7WUFBRSxJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENB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QUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNoRCxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2FBQ25DO1FBQ0gsQ0FBQztRQUNILGFBQUM7SUFBRCxDQUFDLEFBMUpELElBMEpDO0lBMUpZLHdCQUFNIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGludGVyZmFjZSBJVHJhbnNmb3JtQ29tcG9uZW50IHtcbiAgb25GaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWRcbiAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkXG4gIGhhc0ZpbmlzaGVkKCk6IGJvb2xlYW5cbiAgYXNzaWduVmFsdWVUb1RyYW5zZm9ybSh0cmFuc2Zvcm06IFRyYW5zZm9ybSk6IHZvaWRcbn1cbiIsImV4cG9ydCBlbnVtIEludGVycG9sYXRpb25UeXBlIHtcbiAgTElORUFSLFxuICBFQVNFSU5RVUFELFxuICBFQVNFT1VUUVVBRCxcbiAgRUFTRVFVQURcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEludGVycG9sYXRlKHR5cGU6IEludGVycG9sYXRpb25UeXBlLCB0OiBudW1iZXIpOiBudW1iZXIge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIEludGVycG9sYXRpb25UeXBlLkxJTkVBUjpcbiAgICAgIHJldHVybiBJbnRlcnBvbGF0ZUxpbmVhcih0KVxuICAgIGNhc2UgSW50ZXJwb2xhdGlvblR5cGUuRUFTRUlOUVVBRDpcbiAgICAgIHJldHVybiBJbnRlcnBvbGF0ZUVhc2VJblF1YWQodClcbiAgICBjYXNlIEludGVycG9sYXRpb25UeXBlLkVBU0VPVVRRVUFEOlxuICAgICAgcmV0dXJuIEludGVycG9sYXRlRWFzZU91dFF1YWQodClcbiAgICBjYXNlIEludGVycG9sYXRpb25UeXBlLkVBU0VRVUFEOlxuICAgICAgcmV0dXJuIEludGVycG9sYXRlRWFzZVF1YWQodClcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEludGVycG9sYXRlTGluZWFyKHQpXG4gIH1cbn1cbmZ1bmN0aW9uIEludGVycG9sYXRlTGluZWFyKHQ6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiB0XG59XG5mdW5jdGlvbiBJbnRlcnBvbGF0ZUVhc2VJblF1YWQodDogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHQgKiB0XG59XG5mdW5jdGlvbiBJbnRlcnBvbGF0ZUVhc2VPdXRRdWFkKHQ6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiB0ICogKDIgLSB0KVxufVxuZnVuY3Rpb24gSW50ZXJwb2xhdGVFYXNlUXVhZCh0OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gKHQgKiB0KSAvICgyLjAgKiAodCAqIHQgLSB0KSArIDEuMClcbn1cbiIsImltcG9ydCB7IElUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2l0cmFuc2Zvcm1jb21wb25lbnQnXHJcbmltcG9ydCB7IFRyYW5zZm9ybVN5c3RlbSB9IGZyb20gJy4uL3N5c3RlbS90cmFuc2Zyb21TeXN0ZW0nXHJcbmltcG9ydCB7IEludGVycG9sYXRpb25UeXBlLCBJbnRlcnBvbGF0ZSB9IGZyb20gJy4uL21hdGgvaW50ZXJwb2xhdGlvbidcclxuXHJcbi8qKlxyXG4gKiBDb21wb25lbnQgdG8gcm90YXRlIGVudGl0eSBmcm9tIG9uZSByb3RhdGlvbiAoc3RhcnQpIHRvIGFub3RoZXIgKGVuZCkgaW4gYW4gYW1vdW50IG9mIHRpbWVcclxuICovXHJcbkBDb21wb25lbnQoJ3JvdGF0ZVRyYW5zZm9ybUNvbXBvbmVudCcpXHJcbmV4cG9ydCBjbGFzcyBSb3RhdGVUcmFuc2Zvcm1Db21wb25lbnQgaW1wbGVtZW50cyBJVHJhbnNmb3JtQ29tcG9uZW50IHtcclxuICBwcml2YXRlIHN0YXJ0OiBSZWFkT25seVF1YXRlcm5pb25cclxuICBwcml2YXRlIGVuZDogUmVhZE9ubHlRdWF0ZXJuaW9uXHJcbiAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyXHJcbiAgcHJpdmF0ZSBub3JtYWxpemVkVGltZTogbnVtYmVyXHJcbiAgcHJpdmF0ZSBpbnRlcnBvbGF0aW9uVHlwZTogSW50ZXJwb2xhdGlvblR5cGVcclxuICBwcml2YXRlIGxlcnBUaW1lOiBudW1iZXJcclxuXHJcbiAgb25GaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWRcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGEgUm90YXRlVHJhbnNmb3JtQ29tcG9uZW50IGluc3RhbmNlIHRvIGFkZCBhcyBhIGNvbXBvbmVudCB0byBhIEVudGl0eVxyXG4gICAqIEBwYXJhbSBzdGFydCBzdGFydGluZyByb3RhdGlvblxyXG4gICAqIEBwYXJhbSBlbmQgZW5kaW5nIHJvdGF0aW9uXHJcbiAgICogQHBhcmFtIGR1cmF0aW9uIGR1cmF0aW9uIChpbiBzZWNvbmRzKSBvZiBzdGFydCB0byBlbmQgcm90YXRpb25cclxuICAgKiBAcGFyYW0gb25GaW5pc2hDYWxsYmFjayBjYWxsZWQgd2hlbiByb3RhdGlvbiBlbmRzXHJcbiAgICogQHBhcmFtIGludGVycG9sYXRpb25UeXBlIHR5cGUgb2YgaW50ZXJwb2xhdGlvbiB0byBiZSB1c2VkIChkZWZhdWx0OiBMSU5FQVIpXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzdGFydDogUmVhZE9ubHlRdWF0ZXJuaW9uLFxyXG4gICAgZW5kOiBSZWFkT25seVF1YXRlcm5pb24sXHJcbiAgICBkdXJhdGlvbjogbnVtYmVyLFxyXG4gICAgb25GaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWQsXHJcbiAgICBpbnRlcnBvbGF0aW9uVHlwZTogSW50ZXJwb2xhdGlvblR5cGUgPSBJbnRlcnBvbGF0aW9uVHlwZS5MSU5FQVJcclxuICApIHtcclxuICAgIHRoaXMuc3RhcnQgPSBzdGFydFxyXG4gICAgdGhpcy5lbmQgPSBlbmRcclxuICAgIHRoaXMubm9ybWFsaXplZFRpbWUgPSAwXHJcbiAgICB0aGlzLmxlcnBUaW1lID0gMFxyXG4gICAgdGhpcy5vbkZpbmlzaENhbGxiYWNrID0gb25GaW5pc2hDYWxsYmFja1xyXG4gICAgdGhpcy5pbnRlcnBvbGF0aW9uVHlwZSA9IGludGVycG9sYXRpb25UeXBlXHJcblxyXG4gICAgaWYgKGR1cmF0aW9uICE9IDApIHtcclxuICAgICAgdGhpcy5zcGVlZCA9IDEgLyBkdXJhdGlvblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zcGVlZCA9IDBcclxuICAgICAgdGhpcy5ub3JtYWxpemVkVGltZSA9IDFcclxuICAgICAgdGhpcy5sZXJwVGltZSA9IDFcclxuICAgIH1cclxuXHJcbiAgICBUcmFuc2Zvcm1TeXN0ZW0uY3JlYXRlQW5kQWRkVG9FbmdpbmUoKVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0OiBudW1iZXIpIHtcclxuICAgIHRoaXMubm9ybWFsaXplZFRpbWUgPSBTY2FsYXIuQ2xhbXAoXHJcbiAgICAgIHRoaXMubm9ybWFsaXplZFRpbWUgKyBkdCAqIHRoaXMuc3BlZWQsXHJcbiAgICAgIDAsXHJcbiAgICAgIDFcclxuICAgIClcclxuICAgIHRoaXMubGVycFRpbWUgPSBJbnRlcnBvbGF0ZSh0aGlzLmludGVycG9sYXRpb25UeXBlLCB0aGlzLm5vcm1hbGl6ZWRUaW1lKVxyXG4gIH1cclxuXHJcbiAgaGFzRmluaXNoZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVkVGltZSA+PSAxXHJcbiAgfVxyXG5cclxuICBhc3NpZ25WYWx1ZVRvVHJhbnNmb3JtKHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XHJcbiAgICB0cmFuc2Zvcm0ucm90YXRpb24gPSBRdWF0ZXJuaW9uLlNsZXJwKHRoaXMuc3RhcnQsIHRoaXMuZW5kLCB0aGlzLmxlcnBUaW1lKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9pdHJhbnNmb3JtY29tcG9uZW50J1xyXG5pbXBvcnQgeyBUcmFuc2Zvcm1TeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW0vdHJhbnNmcm9tU3lzdGVtJ1xyXG5pbXBvcnQgeyBJbnRlcnBvbGF0aW9uVHlwZSwgSW50ZXJwb2xhdGUgfSBmcm9tICcuLi9tYXRoL2ludGVycG9sYXRpb24nXHJcblxyXG4vKipcclxuICogQ29tcG9uZW50IHRvIHNjYWxlIGVudGl0eSBmcm9tIG9uZSB2YWx1ZSAoc3RhcnQpIHRvIGFub3RoZXIgKGVuZCkgaW4gYW4gYW1vdW50IG9mIHRpbWVcclxuICovXHJcbkBDb21wb25lbnQoJ3NjYWxlVHJhbnNmb3JtQ29tcG9uZW50JylcclxuZXhwb3J0IGNsYXNzIFNjYWxlVHJhbnNmb3JtQ29tcG9uZW50IGltcGxlbWVudHMgSVRyYW5zZm9ybUNvbXBvbmVudCB7XHJcbiAgcHJpdmF0ZSBzdGFydDogUmVhZE9ubHlWZWN0b3IzXHJcbiAgcHJpdmF0ZSBlbmQ6IFJlYWRPbmx5VmVjdG9yM1xyXG4gIHByaXZhdGUgc3BlZWQ6IG51bWJlclxyXG4gIHByaXZhdGUgbm9ybWFsaXplZFRpbWU6IG51bWJlclxyXG4gIHByaXZhdGUgaW50ZXJwb2xhdGlvblR5cGU6IEludGVycG9sYXRpb25UeXBlXHJcbiAgcHJpdmF0ZSBsZXJwVGltZTogbnVtYmVyXHJcblxyXG4gIG9uRmluaXNoQ2FsbGJhY2s/OiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIFNjYWxlVHJhbnNmb3JtQ29tcG9uZW50IGluc3RhbmNlIHRvIGFkZCBhcyBhIGNvbXBvbmVudCB0byBhIEVudGl0eVxyXG4gICAqIEBwYXJhbSBzdGFydCBzdGFydGluZyBzY2FsZVxyXG4gICAqIEBwYXJhbSBlbmQgZW5kaW5nIHNjYWxlXHJcbiAgICogQHBhcmFtIGR1cmF0aW9uIGR1cmF0aW9uIChpbiBzZWNvbmRzKSBvZiBzdGFydCB0byBlbmQgc2NhbGluZ1xyXG4gICAqIEBwYXJhbSBvbkZpbmlzaENhbGxiYWNrIGNhbGxlZCB3aGVuIHNjYWxpbmcgZW5kc1xyXG4gICAqIEBwYXJhbSBpbnRlcnBvbGF0aW9uVHlwZSB0eXBlIG9mIGludGVycG9sYXRpb24gdG8gYmUgdXNlZCAoZGVmYXVsdDogTElORUFSKVxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc3RhcnQ6IFJlYWRPbmx5VmVjdG9yMyxcclxuICAgIGVuZDogUmVhZE9ubHlWZWN0b3IzLFxyXG4gICAgZHVyYXRpb246IG51bWJlcixcclxuICAgIG9uRmluaXNoQ2FsbGJhY2s/OiAoKSA9PiB2b2lkLFxyXG4gICAgaW50ZXJwb2xhdGlvblR5cGU6IEludGVycG9sYXRpb25UeXBlID0gSW50ZXJwb2xhdGlvblR5cGUuTElORUFSXHJcbiAgKSB7XHJcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnRcclxuICAgIHRoaXMuZW5kID0gZW5kXHJcbiAgICB0aGlzLm5vcm1hbGl6ZWRUaW1lID0gMFxyXG4gICAgdGhpcy5sZXJwVGltZSA9IDBcclxuICAgIHRoaXMub25GaW5pc2hDYWxsYmFjayA9IG9uRmluaXNoQ2FsbGJhY2tcclxuICAgIHRoaXMuaW50ZXJwb2xhdGlvblR5cGUgPSBpbnRlcnBvbGF0aW9uVHlwZVxyXG5cclxuICAgIGlmIChkdXJhdGlvbiAhPSAwKSB7XHJcbiAgICAgIHRoaXMuc3BlZWQgPSAxIC8gZHVyYXRpb25cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3BlZWQgPSAwXHJcbiAgICAgIHRoaXMubm9ybWFsaXplZFRpbWUgPSAxXHJcbiAgICAgIHRoaXMubGVycFRpbWUgPSAxXHJcbiAgICB9XHJcblxyXG4gICAgVHJhbnNmb3JtU3lzdGVtLmNyZWF0ZUFuZEFkZFRvRW5naW5lKClcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdDogbnVtYmVyKSB7XHJcbiAgICB0aGlzLm5vcm1hbGl6ZWRUaW1lID0gU2NhbGFyLkNsYW1wKFxyXG4gICAgICB0aGlzLm5vcm1hbGl6ZWRUaW1lICsgZHQgKiB0aGlzLnNwZWVkLFxyXG4gICAgICAwLFxyXG4gICAgICAxXHJcbiAgICApXHJcbiAgICB0aGlzLmxlcnBUaW1lID0gSW50ZXJwb2xhdGUodGhpcy5pbnRlcnBvbGF0aW9uVHlwZSwgdGhpcy5ub3JtYWxpemVkVGltZSlcclxuICB9XHJcblxyXG4gIGhhc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMubm9ybWFsaXplZFRpbWUgPj0gMVxyXG4gIH1cclxuXHJcbiAgYXNzaWduVmFsdWVUb1RyYW5zZm9ybSh0cmFuc2Zvcm06IFRyYW5zZm9ybSkge1xyXG4gICAgdHJhbnNmb3JtLnNjYWxlID0gVmVjdG9yMy5MZXJwKHRoaXMuc3RhcnQsIHRoaXMuZW5kLCB0aGlzLmxlcnBUaW1lKVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnLi9pdHJhbnNmb3JtY29tcG9uZW50J1xyXG5pbXBvcnQgeyBUcmFuc2Zvcm1TeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW0vdHJhbnNmcm9tU3lzdGVtJ1xyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudCB0byBtb3ZlIGEgZW50aXR5IGRvd24gYSBmaXhlZCBwYXRoIGluIGFuIGFtb3VudCBvZiB0aW1lXHJcbiAqL1xyXG5AQ29tcG9uZW50KCdmb2xsb3dQYXRoQ29tcG9uZW50JylcclxuZXhwb3J0IGNsYXNzIEZvbGxvd1BhdGhDb21wb25lbnQgaW1wbGVtZW50cyBJVHJhbnNmb3JtQ29tcG9uZW50IHtcclxuICBwcml2YXRlIHBvaW50czogVmVjdG9yM1tdXHJcbiAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyW10gPSBbXVxyXG4gIHByaXZhdGUgbm9ybWFsaXplZFRpbWU6IG51bWJlclxyXG4gIHByaXZhdGUgY3VycmVudEluZGV4OiBudW1iZXJcclxuXHJcbiAgb25GaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWRcclxuICBvblBvaW50UmVhY2hlZENhbGxiYWNrPzogKGN1cnJlbnRQb2ludDogVmVjdG9yMywgbmV4dFBvaW50OiBWZWN0b3IzKSA9PiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIEZvbGxvd1BhdGhDb21wb25lbnQgaW5zdGFuY2UgdG8gYWRkIGFzIGEgY29tcG9uZW50IHRvIGEgRW50aXR5XHJcbiAgICogQHBhcmFtIHBvaW50cyBhcnJheSBvZiBwb2ludHMgZm9yIHRoZSBwYXRoXHJcbiAgICogQHBhcmFtIGR1cmF0aW9uIGR1cmF0aW9uIG9mIHRoZSBtb3ZlbWVudCB0aHJvdWdoIHRoZSBwYXRoXHJcbiAgICogQHBhcmFtIG9uRmluaXNoQ2FsbGJhY2sgY2FsbGVkIHdoZW4gbW92ZW1lbnQgZW5kc1xyXG4gICAqIEBwYXJhbSBvblBvaW50UmVhY2hlZENhbGxiYWNrIGNhbGxlZCBldmVyeXRpbWUgYW4gZW50aXR5IHJlYWNoZXMgYSBwb2ludCBvZiB0aGUgcGF0aFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcG9pbnRzOiBWZWN0b3IzW10sXHJcbiAgICBkdXJhdGlvbjogbnVtYmVyLFxyXG4gICAgb25GaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWQsXHJcbiAgICBvblBvaW50UmVhY2hlZENhbGxiYWNrPzogKGN1cnJlbnRQb2ludDogVmVjdG9yMywgbmV4dFBvaW50OiBWZWN0b3IzKSA9PiB2b2lkXHJcbiAgKSB7XHJcbiAgICB0aGlzLm5vcm1hbGl6ZWRUaW1lID0gMFxyXG4gICAgdGhpcy5jdXJyZW50SW5kZXggPSAwXHJcbiAgICB0aGlzLnBvaW50cyA9IHBvaW50c1xyXG4gICAgdGhpcy5vbkZpbmlzaENhbGxiYWNrID0gb25GaW5pc2hDYWxsYmFja1xyXG4gICAgdGhpcy5vblBvaW50UmVhY2hlZENhbGxiYWNrID0gb25Qb2ludFJlYWNoZWRDYWxsYmFja1xyXG5cclxuICAgIGlmIChwb2ludHMubGVuZ3RoIDwgMikge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0F0IGxlYXN0IDIgcG9pbnRzIGFyZSBuZWVkZWQgZm9yIEZvbGxvd1BhdGhDb21wb25lbnQuJylcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZHVyYXRpb24gPiAwKSB7XHJcbiAgICAgIGxldCBzcVRvdGFsRGlzdCA9IDBcclxuICAgICAgbGV0IHNxUG9pbnRzRGlzdCA9IFtdXHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgIGxldCBzcURpc3QgPSBWZWN0b3IzLkRpc3RhbmNlU3F1YXJlZChwb2ludHNbaV0sIHBvaW50c1tpICsgMV0pXHJcbiAgICAgICAgc3FUb3RhbERpc3QgKz0gc3FEaXN0XHJcbiAgICAgICAgc3FQb2ludHNEaXN0LnB1c2goc3FEaXN0KVxyXG4gICAgICB9XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3FQb2ludHNEaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5zcGVlZC5wdXNoKDEgLyAoKHNxUG9pbnRzRGlzdFtpXSAvIHNxVG90YWxEaXN0KSAqIGR1cmF0aW9uKSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5ub3JtYWxpemVkVGltZSA9IDFcclxuICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBwb2ludHMubGVuZ3RoIC0gMlxyXG4gICAgfVxyXG5cclxuICAgIFRyYW5zZm9ybVN5c3RlbS5jcmVhdGVBbmRBZGRUb0VuZ2luZSgpXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5ub3JtYWxpemVkVGltZSA9IFNjYWxhci5DbGFtcChcclxuICAgICAgdGhpcy5ub3JtYWxpemVkVGltZSArIGR0ICogdGhpcy5zcGVlZFt0aGlzLmN1cnJlbnRJbmRleF0sXHJcbiAgICAgIDAsXHJcbiAgICAgIDFcclxuICAgIClcclxuICAgIGlmIChcclxuICAgICAgdGhpcy5ub3JtYWxpemVkVGltZSA+PSAxICYmXHJcbiAgICAgIHRoaXMuY3VycmVudEluZGV4IDwgdGhpcy5wb2ludHMubGVuZ3RoIC0gMlxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuY3VycmVudEluZGV4KytcclxuICAgICAgdGhpcy5ub3JtYWxpemVkVGltZSA9IDBcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMub25Qb2ludFJlYWNoZWRDYWxsYmFjayAmJlxyXG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4IDwgdGhpcy5wb2ludHMubGVuZ3RoIC0gMVxyXG4gICAgICApXHJcbiAgICAgICAgdGhpcy5vblBvaW50UmVhY2hlZENhbGxiYWNrKFxyXG4gICAgICAgICAgdGhpcy5wb2ludHNbdGhpcy5jdXJyZW50SW5kZXhdLFxyXG4gICAgICAgICAgdGhpcy5wb2ludHNbdGhpcy5jdXJyZW50SW5kZXggKyAxXVxyXG4gICAgICAgIClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGhhc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdGhpcy5jdXJyZW50SW5kZXggPj0gdGhpcy5wb2ludHMubGVuZ3RoIC0gMiAmJiB0aGlzLm5vcm1hbGl6ZWRUaW1lID49IDFcclxuICAgIClcclxuICB9XHJcblxyXG4gIGFzc2lnblZhbHVlVG9UcmFuc2Zvcm0odHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuICAgIHRyYW5zZm9ybS5wb3NpdGlvbiA9IFZlY3RvcjMuTGVycChcclxuICAgICAgdGhpcy5wb2ludHNbdGhpcy5jdXJyZW50SW5kZXhdLFxyXG4gICAgICB0aGlzLnBvaW50c1t0aGlzLmN1cnJlbnRJbmRleCArIDFdLFxyXG4gICAgICB0aGlzLm5vcm1hbGl6ZWRUaW1lXHJcbiAgICApXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuL2l0cmFuc2Zvcm1jb21wb25lbnQnXHJcbmltcG9ydCB7IFRyYW5zZm9ybVN5c3RlbSB9IGZyb20gJy4uL3N5c3RlbS90cmFuc2Zyb21TeXN0ZW0nXHJcblxyXG4vKipcclxuICogQ29tcG9uZW50IHRvIHJvdGF0ZSBlbnRpdHkgaW5kZWZpbml0ZWx5IHVudGlsIHN0b3AgaXMgY2FsbGVkXHJcbiAqL1xyXG5AQ29tcG9uZW50KCdrZWVwUm90YXRpbmdDb21wb25lbnQnKVxyXG5leHBvcnQgY2xhc3MgS2VlcFJvdGF0aW5nQ29tcG9uZW50IGltcGxlbWVudHMgSVRyYW5zZm9ybUNvbXBvbmVudCB7XHJcbiAgb25GaW5pc2hDYWxsYmFjaz86ICgpID0+IHZvaWRcclxuXHJcbiAgcHJpdmF0ZSByb3RhdGlvblZlbG9jaXR5OiBRdWF0ZXJuaW9uXHJcbiAgcHJpdmF0ZSByb3RhdGlvbjogUXVhdGVybmlvblxyXG4gIHByaXZhdGUgZmluaXNoZWQ6IGJvb2xlYW5cclxuXHJcbiAgLyoqXHJcbiAgICogUm90YXRlcyBhbiBlbnRpdHkgY29udGludW91c2x5LiBUaGUgZW50aXR5IHdpbGwga2VlcCByb3RhdGluZyBmb3JldmVyIHVudGlsIGl0J3MgZXhwbGljaXRseSBzdG9wcGVkIG9yIHRoZSBjb21wb25lbnQgaXMgcmVtb3ZlZC5cclxuICAgKiBAcGFyYW0gcm90YXRpb25WZWxvY2l0eSBhIHF1YXRlcm5pb24gZGVzY3JpYmluZyB0aGUgZGVzaXJlZCByb3RhdGlvbiB0byBwZXJmb3JtIGVhY2ggc2Vjb25kIHNlY29uZFxyXG4gICAqIEBwYXJhbSBvbkZpbmlzaENhbGxiYWNrIGNhbGxlZCB3aGVuIHJvdGF0aW9uIGVuZHNcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihyb3RhdGlvblZlbG9jaXR5OiBRdWF0ZXJuaW9uLCBvbkZpbmlzaENhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5yb3RhdGlvblZlbG9jaXR5ID0gcm90YXRpb25WZWxvY2l0eVxyXG4gICAgdGhpcy5vbkZpbmlzaENhbGxiYWNrID0gb25GaW5pc2hDYWxsYmFja1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IFF1YXRlcm5pb24uSWRlbnRpdHlcclxuICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZVxyXG5cclxuICAgIFRyYW5zZm9ybVN5c3RlbS5jcmVhdGVBbmRBZGRUb0VuZ2luZSgpXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgdGhpcy5yb3RhdGlvbiA9IFF1YXRlcm5pb24uU2xlcnAoXHJcbiAgICAgIFF1YXRlcm5pb24uSWRlbnRpdHksXHJcbiAgICAgIHRoaXMucm90YXRpb25WZWxvY2l0eSxcclxuICAgICAgZHRcclxuICAgIClcclxuICB9XHJcblxyXG4gIGhhc0ZpbmlzaGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZmluaXNoZWRcclxuICB9XHJcblxyXG4gIGFzc2lnblZhbHVlVG9UcmFuc2Zvcm0odHJhbnNmb3JtOiBUcmFuc2Zvcm0pOiB2b2lkIHtcclxuICAgIHRyYW5zZm9ybS5yb3RhdGlvbiA9IHRyYW5zZm9ybS5yb3RhdGlvbi5tdWx0aXBseSh0aGlzLnJvdGF0aW9uKVxyXG4gIH1cclxuXHJcbiAgc3RvcCgpIHtcclxuICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQvaXRyYW5zZm9ybWNvbXBvbmVudCdcclxuaW1wb3J0IHsgTW92ZVRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC9tb3ZlJ1xyXG5pbXBvcnQgeyBSb3RhdGVUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQvcm90YXRlJ1xyXG5pbXBvcnQgeyBTY2FsZVRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC9zY2FsZSdcclxuaW1wb3J0IHsgRm9sbG93UGF0aENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC9mb2xsb3dwYXRoJ1xyXG5pbXBvcnQgeyBLZWVwUm90YXRpbmdDb21wb25lbnQgfSBmcm9tICcuLi9jb21wb25lbnQva2VlcHJvdGF0aW5nJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFRyYW5zZm9ybVN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xyXG4gIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogVHJhbnNmb3JtU3lzdGVtIHwgbnVsbCA9IG51bGxcclxuXHJcbiAgcHJpdmF0ZSBfY29tcG9uZW50czogQ29tcG9uZW50Q29uc3RydWN0b3I8SVRyYW5zZm9ybUNvbXBvbmVudD5bXSA9IFtdXHJcbiAgcHJpdmF0ZSBfY29tcG9uZW50R3JvdXBzID0gW11cclxuXHJcbiAgc3RhdGljIGNyZWF0ZUFuZEFkZFRvRW5naW5lKCk6IFRyYW5zZm9ybVN5c3RlbSB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2UgPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBUcmFuc2Zvcm1TeXN0ZW0oKVxyXG4gICAgICBlbmdpbmUuYWRkU3lzdGVtKHRoaXMuX2luc3RhbmNlKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuX2luc3RhbmNlXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVnaXN0ZXJDdXN0b21Db21wb25lbnQ8VCBleHRlbmRzIElUcmFuc2Zvcm1Db21wb25lbnQ+KFxyXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPlxyXG4gICkge1xyXG4gICAgdGhpcy5jcmVhdGVBbmRBZGRUb0VuZ2luZSgpLl9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcclxuICAgIFRyYW5zZm9ybVN5c3RlbS5faW5zdGFuY2UgPSB0aGlzXHJcbiAgICB0aGlzLl9jb21wb25lbnRzLnB1c2goTW92ZVRyYW5zZm9ybUNvbXBvbmVudClcclxuICAgIHRoaXMuX2NvbXBvbmVudEdyb3Vwcy5wdXNoKGVuZ2luZS5nZXRDb21wb25lbnRHcm91cChNb3ZlVHJhbnNmb3JtQ29tcG9uZW50LCBUcmFuc2Zvcm0pKVxyXG5cclxuICAgIHRoaXMuX2NvbXBvbmVudHMucHVzaChSb3RhdGVUcmFuc2Zvcm1Db21wb25lbnQpXHJcbiAgICB0aGlzLl9jb21wb25lbnRHcm91cHMucHVzaChlbmdpbmUuZ2V0Q29tcG9uZW50R3JvdXAoUm90YXRlVHJhbnNmb3JtQ29tcG9uZW50LCBUcmFuc2Zvcm0pKVxyXG5cclxuICAgIHRoaXMuX2NvbXBvbmVudHMucHVzaChTY2FsZVRyYW5zZm9ybUNvbXBvbmVudClcclxuICAgIHRoaXMuX2NvbXBvbmVudEdyb3Vwcy5wdXNoKGVuZ2luZS5nZXRDb21wb25lbnRHcm91cChTY2FsZVRyYW5zZm9ybUNvbXBvbmVudCwgVHJhbnNmb3JtKSlcclxuXHJcbiAgICB0aGlzLl9jb21wb25lbnRzLnB1c2goRm9sbG93UGF0aENvbXBvbmVudClcclxuICAgIHRoaXMuX2NvbXBvbmVudEdyb3Vwcy5wdXNoKGVuZ2luZS5nZXRDb21wb25lbnRHcm91cChGb2xsb3dQYXRoQ29tcG9uZW50LCBUcmFuc2Zvcm0pKVxyXG5cclxuICAgIHRoaXMuX2NvbXBvbmVudHMucHVzaChLZWVwUm90YXRpbmdDb21wb25lbnQpXHJcbiAgICB0aGlzLl9jb21wb25lbnRHcm91cHMucHVzaChlbmdpbmUuZ2V0Q29tcG9uZW50R3JvdXAoS2VlcFJvdGF0aW5nQ29tcG9uZW50LCBUcmFuc2Zvcm0pKVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0OiBudW1iZXIpIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fY29tcG9uZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudChkdCwgdGhpcy5fY29tcG9uZW50c1tpXSwgdGhpcy5fY29tcG9uZW50R3JvdXBzW2ldKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVDb21wb25lbnQ8VCBleHRlbmRzIElUcmFuc2Zvcm1Db21wb25lbnQ+KFxyXG4gICAgZHQ6IG51bWJlcixcclxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD4sXHJcbiAgICBncm91cDogQ29tcG9uZW50R3JvdXBcclxuICApIHtcclxuICAgIGdyb3VwLmVudGl0aWVzLmZvckVhY2goZW50aXR5ID0+IHtcclxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gZW50aXR5LmdldENvbXBvbmVudChUcmFuc2Zvcm0pXHJcbiAgICAgIGNvbnN0IGNvbXAgPSBlbnRpdHkuZ2V0Q29tcG9uZW50KGNvbXBvbmVudClcclxuXHJcbiAgICAgIGNvbXAudXBkYXRlKGR0KVxyXG4gICAgICBjb21wLmFzc2lnblZhbHVlVG9UcmFuc2Zvcm0odHJhbnNmb3JtKVxyXG4gICAgICBpZiAoY29tcC5oYXNGaW5pc2hlZCgpKSB7XHJcbiAgICAgICAgZW50aXR5LnJlbW92ZUNvbXBvbmVudChjb21wKVxyXG4gICAgICAgIGlmIChjb21wLm9uRmluaXNoQ2FsbGJhY2sgIT0gbnVsbCkgY29tcC5vbkZpbmlzaENhbGxiYWNrKClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSVRyYW5zZm9ybUNvbXBvbmVudCB9IGZyb20gJy4vaXRyYW5zZm9ybWNvbXBvbmVudCdcclxuaW1wb3J0IHsgVHJhbnNmb3JtU3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtL3RyYW5zZnJvbVN5c3RlbSdcclxuaW1wb3J0IHsgSW50ZXJwb2xhdGlvblR5cGUsIEludGVycG9sYXRlIH0gZnJvbSAnLi4vbWF0aC9pbnRlcnBvbGF0aW9uJ1xyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudCB0byB0cmFuc2xhdGUgZW50aXR5IGZyb20gb25lIHBvc2l0aW9uIChzdGFydCkgdG8gYW5vdGhlciAoZW5kKSBpbiBhbiBhbW91bnQgb2YgdGltZVxyXG4gKi9cclxuQENvbXBvbmVudCgnbW92ZVRyYW5zZm9ybUNvbXBvbmVudCcpXHJcbmV4cG9ydCBjbGFzcyBNb3ZlVHJhbnNmb3JtQ29tcG9uZW50IGltcGxlbWVudHMgSVRyYW5zZm9ybUNvbXBvbmVudCB7XHJcbiAgcHJpdmF0ZSBzdGFydDogUmVhZE9ubHlWZWN0b3IzXHJcbiAgcHJpdmF0ZSBlbmQ6IFJlYWRPbmx5VmVjdG9yM1xyXG4gIHByaXZhdGUgc3BlZWQ6IG51bWJlclxyXG4gIHByaXZhdGUgbm9ybWFsaXplZFRpbWU6IG51bWJlclxyXG4gIHByaXZhdGUgaW50ZXJwb2xhdGlvblR5cGU6IEludGVycG9sYXRpb25UeXBlXHJcbiAgcHJpdmF0ZSBsZXJwVGltZTogbnVtYmVyXHJcblxyXG4gIG9uRmluaXNoQ2FsbGJhY2s/OiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIE1vdmVUcmFuc2Zvcm1Db21wb25lbnQgaW5zdGFuY2UgdG8gYWRkIGFzIGEgY29tcG9uZW50IHRvIGEgRW50aXR5XHJcbiAgICogQHBhcmFtIHN0YXJ0IHN0YXJ0aW5nIHBvc2l0aW9uXHJcbiAgICogQHBhcmFtIGVuZCBlbmRpbmcgcG9zaXRpb25cclxuICAgKiBAcGFyYW0gZHVyYXRpb24gZHVyYXRpb24gKGluIHNlY29uZHMpIG9mIHN0YXJ0IHRvIGVuZCB0cmFuc2xhdGlvblxyXG4gICAqIEBwYXJhbSBvbkZpbmlzaENhbGxiYWNrIGNhbGxlZCB3aGVuIHRyYW5zbGF0aW9uIGVuZHNcclxuICAgKiBAcGFyYW0gaW50ZXJwb2xhdGlvblR5cGUgdHlwZSBvZiBpbnRlcnBvbGF0aW9uIHRvIGJlIHVzZWQgKGRlZmF1bHQ6IExJTkVBUilcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHN0YXJ0OiBSZWFkT25seVZlY3RvcjMsXHJcbiAgICBlbmQ6IFJlYWRPbmx5VmVjdG9yMyxcclxuICAgIGR1cmF0aW9uOiBudW1iZXIsXHJcbiAgICBvbkZpbmlzaENhbGxiYWNrPzogKCkgPT4gdm9pZCxcclxuICAgIGludGVycG9sYXRpb25UeXBlOiBJbnRlcnBvbGF0aW9uVHlwZSA9IEludGVycG9sYXRpb25UeXBlLkxJTkVBUlxyXG4gICkge1xyXG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0XHJcbiAgICB0aGlzLmVuZCA9IGVuZFxyXG4gICAgdGhpcy5ub3JtYWxpemVkVGltZSA9IDBcclxuICAgIHRoaXMubGVycFRpbWUgPSAwXHJcbiAgICB0aGlzLm9uRmluaXNoQ2FsbGJhY2sgPSBvbkZpbmlzaENhbGxiYWNrXHJcbiAgICB0aGlzLmludGVycG9sYXRpb25UeXBlID0gaW50ZXJwb2xhdGlvblR5cGVcclxuXHJcbiAgICBpZiAoZHVyYXRpb24gIT0gMCkge1xyXG4gICAgICB0aGlzLnNwZWVkID0gMSAvIGR1cmF0aW9uXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNwZWVkID0gMFxyXG4gICAgICB0aGlzLm5vcm1hbGl6ZWRUaW1lID0gMVxyXG4gICAgICB0aGlzLmxlcnBUaW1lID0gMVxyXG4gICAgfVxyXG5cclxuICAgIFRyYW5zZm9ybVN5c3RlbS5jcmVhdGVBbmRBZGRUb0VuZ2luZSgpXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5ub3JtYWxpemVkVGltZSA9IFNjYWxhci5DbGFtcChcclxuICAgICAgdGhpcy5ub3JtYWxpemVkVGltZSArIGR0ICogdGhpcy5zcGVlZCxcclxuICAgICAgMCxcclxuICAgICAgMVxyXG4gICAgKVxyXG4gICAgdGhpcy5sZXJwVGltZSA9IEludGVycG9sYXRlKHRoaXMuaW50ZXJwb2xhdGlvblR5cGUsIHRoaXMubm9ybWFsaXplZFRpbWUpXHJcbiAgfVxyXG5cclxuICBoYXNGaW5pc2hlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZWRUaW1lID49IDFcclxuICB9XHJcblxyXG4gIGFzc2lnblZhbHVlVG9UcmFuc2Zvcm0odHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuICAgIHRyYW5zZm9ybS5wb3NpdGlvbiA9IFZlY3RvcjMuTGVycCh0aGlzLnN0YXJ0LCB0aGlzLmVuZCwgdGhpcy5sZXJwVGltZSlcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGVudW0gVG9nZ2xlU3RhdGUge1xyXG4gIE9mZiA9IDAsXHJcbiAgT25cclxufVxyXG5cclxuLyoqXHJcbiAqIFRvZ2dsZSBjb21wb25lbnQgZm9yIGVudGl0aWVzIHdpdGggdHdvIHN0YXRlcyAoT04gb3IgT0ZGKVxyXG4gKi9cclxuQENvbXBvbmVudCgndG9nZ2xlJylcclxuZXhwb3J0IGNsYXNzIFRvZ2dsZUNvbXBvbmVudCB7XHJcbiAgcHVibGljIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlXHJcblxyXG4gIHByaXZhdGUgb25WYWx1ZUNoYW5nZWRDYWxsYmFjaz86ICh2YWx1ZTogVG9nZ2xlU3RhdGUpID0+IHZvaWRcclxuICBwcml2YXRlIHN0YXRlOiBUb2dnbGVTdGF0ZSA9IFRvZ2dsZVN0YXRlLk9mZlxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgYSBUb2dnbGVDb21wb25lbnRcclxuICAgKiBAcGFyYW0gc3RhcnRpbmdTdGF0ZSBzdGFydGluZyBzdGF0ZSBvZiB0aGUgdG9nZ2xlIChPTiBvciBPRkYpXHJcbiAgICogQHBhcmFtIG9uVmFsdWVDaGFuZ2VkQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdG9nZ2xlIHN0YXRlIGNoYW5nZWRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHN0YXJ0aW5nU3RhdGU6IFRvZ2dsZVN0YXRlID0gVG9nZ2xlU3RhdGUuT24sXHJcbiAgICBvblZhbHVlQ2hhbmdlZENhbGxiYWNrPzogKHZhbHVlOiBUb2dnbGVTdGF0ZSkgPT4gdm9pZFxyXG4gICkge1xyXG4gICAgdGhpcy5zZXQoc3RhcnRpbmdTdGF0ZSlcclxuICAgIGlmIChvblZhbHVlQ2hhbmdlZENhbGxiYWNrKSB0aGlzLnNldENhbGxiYWNrKG9uVmFsdWVDaGFuZ2VkQ2FsbGJhY2spXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdHJpZ2dlciB0byBhIHN0YXRlXHJcbiAgICogQHBhcmFtIHN0YXRlIG5ldyBzdGF0ZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXQoc3RhdGU6IFRvZ2dsZVN0YXRlKTogdm9pZCB7XHJcbiAgICB0aGlzLnN0YXRlID0gc3RhdGVcclxuICAgIGlmICh0aGlzLm9uVmFsdWVDaGFuZ2VkQ2FsbGJhY2spIHRoaXMub25WYWx1ZUNoYW5nZWRDYWxsYmFjayhzdGF0ZSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRvZ2dsZSBzdGF0ZSBvZiBUb2dnbGVDb21wb25lbnRcclxuICAgKi9cclxuICBwdWJsaWMgdG9nZ2xlKCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuZW5hYmxlZCkge1xyXG4gICAgICB0aGlzLnNldCgxIC0gdGhpcy5zdGF0ZSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBpZiBjdXJyZW50IHRvZ2dsZSBzdGF0ZSBpcyBPTlxyXG4gICAqL1xyXG4gIHB1YmxpYyBpc09uKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPT0gVG9nZ2xlU3RhdGUuT25cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBjYWxsYmFjayBmb3Igd2hlbiBUb2dnbGVDb21wb25lbnQgc3RhdGUgY2hhbmdlZFxyXG4gICAqIEBwYXJhbSBvblZhbHVlQ2hhbmdlZENhbGxiYWNrIGNhbGxiYWNrXHJcbiAgICovXHJcbiAgcHVibGljIHNldENhbGxiYWNrKFxyXG4gICAgb25WYWx1ZUNoYW5nZWRDYWxsYmFjazogKHZhbHVlOiBUb2dnbGVTdGF0ZSkgPT4gdm9pZFxyXG4gICk6IHZvaWQge1xyXG4gICAgdGhpcy5vblZhbHVlQ2hhbmdlZENhbGxiYWNrID0gb25WYWx1ZUNoYW5nZWRDYWxsYmFja1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIFRvZ2dsZUNvbXBvbmVudCxcclxuICBUb2dnbGVTdGF0ZVxyXG59XHJcbiIsImV4cG9ydCBpbnRlcmZhY2UgSVRpbWVyQ29tcG9uZW50IHtcclxuICBlbGFwc2VkVGltZTogbnVtYmVyXHJcbiAgdGFyZ2V0VGltZTogbnVtYmVyXHJcbiAgb25UYXJnZXRUaW1lUmVhY2hlZDogKG93bmVyRW50aXR5OiBJRW50aXR5KSA9PiB2b2lkXHJcbn1cclxuIiwiaW1wb3J0IHsgSVRpbWVyQ29tcG9uZW50IH0gZnJvbSAnLi9pdGltZXJjb21wb25lbnQnXHJcbmltcG9ydCB7IFRpbWVyU3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtL3RpbWVyU3lzdGVtJ1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGUgZXZlcnkgWCBtaWxsaXNlY29uZHNcclxuICovXHJcbkBDb21wb25lbnQoJ3RpbWVySW50ZXJ2YWwnKVxyXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWwgaW1wbGVtZW50cyBJVGltZXJDb21wb25lbnQge1xyXG4gIGVsYXBzZWRUaW1lOiBudW1iZXJcclxuICB0YXJnZXRUaW1lOiBudW1iZXJcclxuICBvblRhcmdldFRpbWVSZWFjaGVkOiAob3duZXJFbnRpdHk6IElFbnRpdHkpID0+IHZvaWRcclxuXHJcbiAgcHJpdmF0ZSBvblRpbWVSZWFjaGVkQ2FsbGJhY2s/OiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtaWxsaXNlY3MgYW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICogQHBhcmFtIG9uVGltZVJlYWNoZWRDYWxsYmFjayBjYWxsYmFjayBmb3Igd2hlbiB0aW1lIGlzIHJlYWNoZWRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihtaWxsaXNlY3M6IG51bWJlciwgb25UaW1lUmVhY2hlZENhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xyXG4gICAgVGltZXJTeXN0ZW0uY3JlYXRlQW5kQWRkVG9FbmdpbmUoKVxyXG5cclxuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXHJcbiAgICB0aGlzLnRhcmdldFRpbWUgPSBtaWxsaXNlY3MgLyAxMDAwXHJcbiAgICB0aGlzLm9uVGltZVJlYWNoZWRDYWxsYmFjayA9IG9uVGltZVJlYWNoZWRDYWxsYmFja1xyXG4gICAgdGhpcy5vblRhcmdldFRpbWVSZWFjaGVkID0gKCkgPT4ge1xyXG4gICAgICB0aGlzLmVsYXBzZWRUaW1lID0gMFxyXG4gICAgICBpZiAodGhpcy5vblRpbWVSZWFjaGVkQ2FsbGJhY2spIHRoaXMub25UaW1lUmVhY2hlZENhbGxiYWNrKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldENhbGxiYWNrKG9uVGltZVJlYWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5vblRpbWVSZWFjaGVkQ2FsbGJhY2sgPSBvblRpbWVSZWFjaGVkQ2FsbGJhY2tcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSVRpbWVyQ29tcG9uZW50IH0gZnJvbSAnLi9pdGltZXJjb21wb25lbnQnXHJcbmltcG9ydCB7IFRpbWVyU3lzdGVtIH0gZnJvbSAnLi4vc3lzdGVtL3RpbWVyU3lzdGVtJ1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSBlbnRpdHkgYWZ0ZXIgWCBtaWxsaXNlY29uZHNcclxuICovXHJcbkBDb21wb25lbnQoJ3RpbWVyRXhwaXJlSW4nKVxyXG5leHBvcnQgY2xhc3MgRXhwaXJlSW4gaW1wbGVtZW50cyBJVGltZXJDb21wb25lbnQge1xyXG4gIGVsYXBzZWRUaW1lOiBudW1iZXJcclxuICB0YXJnZXRUaW1lOiBudW1iZXJcclxuICBvblRhcmdldFRpbWVSZWFjaGVkOiAob3duZXJFbnRpdHk6IElFbnRpdHkpID0+IHZvaWRcclxuXHJcbiAgcHJpdmF0ZSBvblRpbWVSZWFjaGVkQ2FsbGJhY2s/OiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtaWxsaXNlY3MgYW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICogQHBhcmFtIG9uVGltZVJlYWNoZWRDYWxsYmFjayBjYWxsYmFjayBmb3Igd2hlbiB0aW1lIGlzIHJlYWNoZWRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihtaWxsaXNlY3M6IG51bWJlciwgb25UaW1lUmVhY2hlZENhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xyXG4gICAgVGltZXJTeXN0ZW0uY3JlYXRlQW5kQWRkVG9FbmdpbmUoKVxyXG5cclxuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXHJcbiAgICB0aGlzLnRhcmdldFRpbWUgPSBtaWxsaXNlY3MgLyAxMDAwXHJcbiAgICB0aGlzLm9uVGltZVJlYWNoZWRDYWxsYmFjayA9IG9uVGltZVJlYWNoZWRDYWxsYmFja1xyXG4gICAgdGhpcy5vblRhcmdldFRpbWVSZWFjaGVkID0gZW50aXR5ID0+IHtcclxuICAgICAgaWYgKHRoaXMub25UaW1lUmVhY2hlZENhbGxiYWNrKSB0aGlzLm9uVGltZVJlYWNoZWRDYWxsYmFjaygpXHJcbiAgICAgIGVudGl0eS5yZW1vdmVDb21wb25lbnQodGhpcylcclxuICAgICAgZW5naW5lLnJlbW92ZUVudGl0eShlbnRpdHkpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRDYWxsYmFjayhvblRpbWVSZWFjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgIHRoaXMub25UaW1lUmVhY2hlZENhbGxiYWNrID0gb25UaW1lUmVhY2hlZENhbGxiYWNrXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElUaW1lckNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC9pdGltZXJjb21wb25lbnQnXHJcbmltcG9ydCB7IEludGVydmFsIH0gZnJvbSAnLi4vY29tcG9uZW50L2ludGVydmFsJ1xyXG5pbXBvcnQgeyBEZWxheSB9IGZyb20gJy4uL2NvbXBvbmVudC9kZWxheSdcclxuaW1wb3J0IHsgRXhwaXJlSW4gfSBmcm9tICcuLi9jb21wb25lbnQvZXhwaXJlJ1xyXG5cclxuZXhwb3J0IGNsYXNzIFRpbWVyU3lzdGVtIGltcGxlbWVudHMgSVN5c3RlbSB7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgX2luc3RhbmNlOiBUaW1lclN5c3RlbSB8IG51bGwgPSBudWxsXHJcblxyXG4gIHByaXZhdGUgX2NvbXBvbmVudHM6IENvbXBvbmVudENvbnN0cnVjdG9yPElUaW1lckNvbXBvbmVudD5bXSA9IFtdXHJcblxyXG4gIHN0YXRpYyBjcmVhdGVBbmRBZGRUb0VuZ2luZSgpOiBUaW1lclN5c3RlbSB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2UgPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBUaW1lclN5c3RlbSgpXHJcbiAgICAgIGVuZ2luZS5hZGRTeXN0ZW0odGhpcy5faW5zdGFuY2UpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5faW5zdGFuY2VcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZWdpc3RlckN1c3RvbUNvbXBvbmVudDxUIGV4dGVuZHMgSVRpbWVyQ29tcG9uZW50PihcclxuICAgIGNvbXBvbmVudDogQ29tcG9uZW50Q29uc3RydWN0b3I8VD5cclxuICApIHtcclxuICAgIHRoaXMuY3JlYXRlQW5kQWRkVG9FbmdpbmUoKS5fY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICBUaW1lclN5c3RlbS5faW5zdGFuY2UgPSB0aGlzXHJcbiAgICB0aGlzLl9jb21wb25lbnRzLnB1c2goSW50ZXJ2YWwpXHJcbiAgICB0aGlzLl9jb21wb25lbnRzLnB1c2goRGVsYXkpXHJcbiAgICB0aGlzLl9jb21wb25lbnRzLnB1c2goRXhwaXJlSW4pXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5fY29tcG9uZW50cy5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KGR0LCBjb21wb25lbnQpXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVDb21wb25lbnQ8VCBleHRlbmRzIElUaW1lckNvbXBvbmVudD4oXHJcbiAgICBkdDogbnVtYmVyLFxyXG4gICAgY29tcG9uZW50OiBDb21wb25lbnRDb25zdHJ1Y3RvcjxUPlxyXG4gICkge1xyXG4gICAgbGV0IHJlY29yZCA9IGVuZ2luZS5nZXRFbnRpdGllc1dpdGhDb21wb25lbnQoY29tcG9uZW50KVxyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIHJlY29yZCkge1xyXG4gICAgICBpZiAocmVjb3JkLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICBsZXQgZW50aXR5ID0gcmVjb3JkW2tleV1cclxuICAgICAgICBsZXQgdGltZXJDb21wb25lbnQgPSBlbnRpdHkuZ2V0Q29tcG9uZW50KGNvbXBvbmVudClcclxuXHJcbiAgICAgICAgdGltZXJDb21wb25lbnQuZWxhcHNlZFRpbWUgKz0gZHRcclxuICAgICAgICBpZiAodGltZXJDb21wb25lbnQuZWxhcHNlZFRpbWUgPj0gdGltZXJDb21wb25lbnQudGFyZ2V0VGltZSkge1xyXG4gICAgICAgICAgdGltZXJDb21wb25lbnQub25UYXJnZXRUaW1lUmVhY2hlZChlbnRpdHkpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IElUaW1lckNvbXBvbmVudCB9IGZyb20gJy4vaXRpbWVyY29tcG9uZW50J1xyXG5pbXBvcnQgeyBUaW1lclN5c3RlbSB9IGZyb20gJy4uL3N5c3RlbS90aW1lclN5c3RlbSdcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlIG9uY2UgYWZ0ZXIgWCBtaWxsaXNlY29uZHNcclxuICovXHJcbkBDb21wb25lbnQoJ3RpbWVyRGVsYXknKVxyXG5leHBvcnQgY2xhc3MgRGVsYXkgaW1wbGVtZW50cyBJVGltZXJDb21wb25lbnQge1xyXG4gIGVsYXBzZWRUaW1lOiBudW1iZXJcclxuICB0YXJnZXRUaW1lOiBudW1iZXJcclxuICBvblRhcmdldFRpbWVSZWFjaGVkOiAob3duZXJFbnRpdHk6IElFbnRpdHkpID0+IHZvaWRcclxuXHJcbiAgcHJpdmF0ZSBvblRpbWVSZWFjaGVkQ2FsbGJhY2s/OiAoKSA9PiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBtaWxsaXNlY3MgYW1vdW50IG9mIHRpbWUgaW4gbWlsbGlzZWNvbmRzXHJcbiAgICogQHBhcmFtIG9uVGltZVJlYWNoZWRDYWxsYmFjayBjYWxsYmFjayBmb3Igd2hlbiB0aW1lIGlzIHJlYWNoZWRcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihtaWxsaXNlY3M6IG51bWJlciwgb25UaW1lUmVhY2hlZENhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xyXG4gICAgVGltZXJTeXN0ZW0uY3JlYXRlQW5kQWRkVG9FbmdpbmUoKVxyXG5cclxuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwXHJcbiAgICB0aGlzLnRhcmdldFRpbWUgPSBtaWxsaXNlY3MgLyAxMDAwXHJcbiAgICB0aGlzLm9uVGltZVJlYWNoZWRDYWxsYmFjayA9IG9uVGltZVJlYWNoZWRDYWxsYmFja1xyXG4gICAgdGhpcy5vblRhcmdldFRpbWVSZWFjaGVkID0gZW50aXR5ID0+IHtcclxuICAgICAgaWYgKHRoaXMub25UaW1lUmVhY2hlZENhbGxiYWNrKSB0aGlzLm9uVGltZVJlYWNoZWRDYWxsYmFjaygpXHJcbiAgICAgIGVudGl0eS5yZW1vdmVDb21wb25lbnQodGhpcylcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldENhbGxiYWNrKG9uVGltZVJlYWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5vblRpbWVSZWFjaGVkQ2FsbGJhY2sgPSBvblRpbWVSZWFjaGVkQ2FsbGJhY2tcclxuICB9XHJcbn1cclxuIiwiLyoqXG4gKiBNYXBzIGEgdmFsdWUgZnJvbSBvbmUgcmFuZ2Ugb2YgdmFsdWVzIHRvIGl0cyBlcXVpdmFsZW50LCBzY2FsZWQgaW4gcHJvcG9ydGlvbiB0byBhbm90aGVyIHJhbmdlIG9mIHZhbHVlcywgdXNpbmcgbWF4aW11bSBhbmQgbWluaW11bS5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgaW5wdXQgbnVtYmVyXG4gKiBAcGFyYW0ge251bWJlcn0gbWluMSBNaW5pbXVtIHZhbHVlIGluIHRoZSByYW5nZSBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gbWF4MSBNYXhpbXVtIHZhbHVlIGluIHRoZSByYW5nZSBvZiB0aGUgaW5wdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gbWluMiBNaW5pbXVtIHZhbHVlIGluIHRoZSByYW5nZSBvZiB0aGUgb3V0cHV0LlxuICogQHBhcmFtIHtudW1iZXJ9IG1heDIgTWF4aW11bSB2YWx1ZSBpbiB0aGUgcmFuZ2Ugb2YgdGhlIG91dHB1dC5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIHJlc3VsdGluZyBtYXBwZWQgdmFsdWUgYmV0d2VlbiB0aGUgbmV3IG1pbiBhbmQgbWF4XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwKFxuICB2YWx1ZTogbnVtYmVyLFxuICBtaW4xOiBudW1iZXIsXG4gIG1heDE6IG51bWJlcixcbiAgbWluMjogbnVtYmVyLFxuICBtYXgyOiBudW1iZXJcbikge1xuICBsZXQgcmFuZ2UxID0gbWF4MSAtIG1pbjFcbiAgbGV0IHJhbmdlMiA9IG1heDIgLSBtaW4yXG5cbiAgcmV0dXJuICgodmFsdWUgLSBtaW4xKSAvIHJhbmdlMSkgKiByYW5nZTIgKyBtaW4yXG59XG5cbi8vIGNvbnN0cmFpblxuLyoqXG4gKiBDbGFtcHMgYSB2YWx1ZSBzbyB0aGF0IGl0IGRvZXNuJ3QgZXhjZWVkIGEgbWluaW11bSBvciBhIG1heGltdW0gdmFsdWUuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIGlucHV0IG51bWJlclxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBNaW5pbXVtIG91dHB1dCB2YWx1ZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXggTWF4aW11bSBvdXRwdXQgdmFsdWUuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSByZXN1bHRpbmcgbWFwcGVkIHZhbHVlIGJldHdlZW4gdGhlIG1pbiBhbmQgbWF4XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XG4gIGxldCByZXN1bHQgPSB2YWx1ZVxuXG4gIGlmICh2YWx1ZSA+IG1heCkge1xuICAgIHJlc3VsdCA9IG1heFxuICB9IGVsc2UgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgcmVzdWx0ID0gbWluXG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHBvc2l0aW9uIG9mIGFuIGVudGl0eSB0aGF0IGlzIGEgY2hpbGQgb2Ygb3RoZXIgZW50aXRpZXMsIHJlbGF0aXZlIHRvIHRoZSBzY2VuZSBpbnN0ZWFkIG9mIHJlbGF0aXZlIHRvIHRoZSBwYXJlbnQuIFJldHVybnMgYSBWZWN0b3IzLlxuICpcbiAqIEBwYXJhbSB7RW50aXR5fSBlbnRpdHkgRW50aXR5IHRvIGNhbGN1bGF0ZSBwb3NpdGlvblxuICogQHJldHVybiB7VmVjdG9yM30gVGhlIEVudGl0eSdzIGdsb2JhbCBwb3NpdGlvbiBpbiByZWZlcmVuY2UgdG8gdGhlIHNjZW5lJ3Mgb3JpZ2luXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW50aXR5V29ybGRQb3NpdGlvbihlbnRpdHk6IElFbnRpdHkpOiBWZWN0b3IzIHtcbiAgbGV0IGVudGl0eVBvc2l0aW9uOiBWZWN0b3IzID0gZW50aXR5Lmhhc0NvbXBvbmVudChUcmFuc2Zvcm0pXG4gICAgPyBlbnRpdHkuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucG9zaXRpb24uY2xvbmUoKVxuICAgIDogVmVjdG9yMy5aZXJvKClcbiAgbGV0IHBhcmVudEVudGl0eSA9IGVudGl0eS5nZXRQYXJlbnQoKVxuXG4gIGlmIChwYXJlbnRFbnRpdHkgIT0gbnVsbCkge1xuICAgIGlmIChwYXJlbnRFbnRpdHkudXVpZCA9PSAnRmlyc3RQZXJzb25DYW1lcmFFbnRpdHlSZWZlcmVuY2UnKSB7XG4gICAgICAvL2xvZygnQVRUQUNIRUQgVE8gQ0FNRVJBJylcbiAgICAgIGxldCBwYXJlbnRSb3RhdGlvbiA9IENhbWVyYS5pbnN0YW5jZS5yb3RhdGlvbi5jbG9uZSgpXG4gICAgICByZXR1cm4gQ2FtZXJhLmluc3RhbmNlLnBvc2l0aW9uXG4gICAgICAgIC5jbG9uZSgpXG4gICAgICAgIC5hZGQoZW50aXR5UG9zaXRpb24ucm90YXRlKHBhcmVudFJvdGF0aW9uKSlcbiAgICB9IGVsc2UgaWYgKHBhcmVudEVudGl0eS51dWlkID09ICdBdmF0YXJFbnRpdHlSZWZlcmVuY2UnKSB7XG4gICAgICAvL2xvZygnQVRUQUNIRUQgVE8gQVZBVEFSJylcbiAgICAgIGxldCBjYW1Sb3RhdGlvbiA9IENhbWVyYS5pbnN0YW5jZS5yb3RhdGlvblxuICAgICAgbGV0IHBhcmVudFJvdGF0aW9uID0gUXVhdGVybmlvbi5FdWxlcigwLCBjYW1Sb3RhdGlvbi5ldWxlckFuZ2xlcy55LCAwKVxuICAgICAgLy9sb2coQ2FtZXJhLmluc3RhbmNlLnJvdGF0aW9uLmV1bGVyQW5nbGVzLnkpXG4gICAgICByZXR1cm4gQ2FtZXJhLmluc3RhbmNlLnBvc2l0aW9uXG4gICAgICAgIC5jbG9uZSgpXG4gICAgICAgIC5hZGQoZW50aXR5UG9zaXRpb24ucm90YXRlKHBhcmVudFJvdGF0aW9uKSlcbiAgICAgICAgLmFkZChuZXcgVmVjdG9yMygwLCAtMC44NzUsIDApKVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcGFyZW50Um90YXRpb24gPSBwYXJlbnRFbnRpdHkuaGFzQ29tcG9uZW50KFRyYW5zZm9ybSlcbiAgICAgICAgPyBwYXJlbnRFbnRpdHkuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucm90YXRpb25cbiAgICAgICAgOiBRdWF0ZXJuaW9uLklkZW50aXR5XG4gICAgICByZXR1cm4gZ2V0RW50aXR5V29ybGRQb3NpdGlvbihwYXJlbnRFbnRpdHkpLmFkZChcbiAgICAgICAgZW50aXR5UG9zaXRpb24ucm90YXRlKHBhcmVudFJvdGF0aW9uKVxuICAgICAgKVxuICAgIH1cbiAgfVxuICByZXR1cm4gZW50aXR5UG9zaXRpb25cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwb3NpdGlvbiBvZiBhbiBlbnRpdHkgdGhhdCBpcyBhIGNoaWxkIG9mIG90aGVyIGVudGl0aWVzLCByZWxhdGl2ZSB0byB0aGUgc2NlbmUgaW5zdGVhZCBvZiByZWxhdGl2ZSB0byB0aGUgcGFyZW50LiBSZXR1cm5zIGEgVmVjdG9yMy5cbiAqXG4gKiBAcGFyYW0ge0VudGl0eX0gZW50aXR5IEVudGl0eSB0byBjYWxjdWxhdGUgcG9zaXRpb25cbiAqIEByZXR1cm4ge1F1YXRlcm5pb259IFRoZSBFbnRpdHkncyBnbG9iYWwgcm90YXRpb24gaW4gcmVmZXJlbmNlIHRvIHRoZSBzY2VuZSdzIG9yaWdpblxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEVudGl0eVdvcmxkUm90YXRpb24oZW50aXR5OiBJRW50aXR5KTogUXVhdGVybmlvbiB7XG4gIGxldCBlbnRpdHlSb3RhdGlvbjogUXVhdGVybmlvbiA9IGVudGl0eS5oYXNDb21wb25lbnQoVHJhbnNmb3JtKVxuICAgID8gZW50aXR5LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnJvdGF0aW9uLmNsb25lKClcbiAgICA6IFF1YXRlcm5pb24uWmVybygpXG4gIGxldCBwYXJlbnRFbnRpdHkgPSBlbnRpdHkuZ2V0UGFyZW50KClcbiAgaWYgKHBhcmVudEVudGl0eSAhPSBudWxsKSB7XG4gICAgaWYgKHBhcmVudEVudGl0eS51dWlkID09ICdGaXJzdFBlcnNvbkNhbWVyYUVudGl0eVJlZmVyZW5jZScpIHtcbiAgICAgIC8vbG9nKCdBVFRBQ0hFRCBUTyBDQU1FUkEnKVxuICAgICAgbGV0IHBhcmVudFJvdGF0aW9uID0gQ2FtZXJhLmluc3RhbmNlLnJvdGF0aW9uLmNsb25lKClcbiAgICAgIHJldHVybiBlbnRpdHlSb3RhdGlvbi5tdWx0aXBseShwYXJlbnRSb3RhdGlvbilcbiAgICB9IGVsc2UgaWYgKHBhcmVudEVudGl0eS51dWlkID09ICdBdmF0YXJFbnRpdHlSZWZlcmVuY2UnKSB7XG4gICAgICAvL2xvZygnQVRUQUNIRUQgVE8gQVZBVEFSJylcbiAgICAgIGxldCBwYXJlbnRSb3RhdGlvbiA9IFF1YXRlcm5pb24uRXVsZXIoXG4gICAgICAgIDAsXG4gICAgICAgIENhbWVyYS5pbnN0YW5jZS5yb3RhdGlvbi5ldWxlckFuZ2xlcy55LFxuICAgICAgICAwXG4gICAgICApXG4gICAgICByZXR1cm4gZW50aXR5Um90YXRpb24ubXVsdGlwbHkocGFyZW50Um90YXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vICAgbGV0IHBhcmVudFJvdGF0aW9uID0gcGFyZW50RW50aXR5Lmhhc0NvbXBvbmVudChUcmFuc2Zvcm0pXG4gICAgICAvLyAgICAgPyBwYXJlbnRFbnRpdHkuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucm90YXRpb25cbiAgICAgIC8vICAgICA6IFF1YXRlcm5pb24uSWRlbnRpdHlcbiAgICAgIHJldHVybiBlbnRpdHlSb3RhdGlvbi5tdWx0aXBseShnZXRFbnRpdHlXb3JsZFJvdGF0aW9uKHBhcmVudEVudGl0eSkpXG4gICAgfVxuICB9XG4gIHJldHVybiBlbnRpdHlSb3RhdGlvblxufVxuIiwiaW1wb3J0IHsgaXNQcmV2aWV3TW9kZSB9IGZyb20gJ0BkZWNlbnRyYWxhbmQvRW52aXJvbm1lbnRBUEknXG5cbi8qKlxuICogUXVpY2sgZnVuY3Rpb24gdG8gYWRkIGEgY3ViZSB0aGF0IGNhbiBydW4gZnVuY3Rpb25zIHdoZW4gY2xpY2tlZC4gQnkgZGVmYXVsdCBvbmx5IGRpc3BsYXllZCB3aGVuIGluIHByZXZpZXcgbW9kZSBmb3IgdGVzdHMuXG4gKlxuICogQHBhcmFtIHtUcmFuZm9ybUNvbnN0cnVjdG9yQXJnc30gcG9zIFRyYW5zZm9ybSBhcmd1bWVudHMgZm9yIHRoZSBjdWJlLCBpbmNsdWRpbmcgcG9zaXRpb24sIHNjYWxlIGFuZCByb3RhdGlvblxuICogQHBhcmFtIHsoKSA9PiB2b2lkfSB0cmlnZ2VyZWRGdW5jdGlvbiBGdW5jdGlvbiB0byBleGVjdXRlIGV2ZXJ5IHRpbWUgdGhlIGN1YmUgaXMgY2xpY2tlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbCBUZXh0IHRvIGRpc3BsYXkgb3ZlciBjdWJlIGFuZCBvbiBob3Zlci5cbiAqIEBwYXJhbSB7Q29sb3IzfSBjb2xvciBDdWJlIGNvbG9yLlxuICogQHBhcmFtIHtib29sZWFufSBzcGhlcmUgSWYgdHJ1ZSwgdXNlIGEgc3BoZXJlIHNoYXBlIGluc3RlYWQgb2YgY3ViZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbm9Db2xsaWRlciBJZiB0cnVlLCBjdWJlIGhhcyBubyBjb2xsaWRlci5cbiAqIEByZXR1cm4ge0VudGl0eX0gQSBuZXcgZW50aXR5IHdpdGggdGhlIGNvbmZpZ3VyZWQgc2V0dGluZ3MgYW5kIGEgbGFiZWwgYXMgYSBjaGlsZFxuICpcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFkZFRlc3RDdWJlKFxuICBwb3M6IFRyYW5mb3JtQ29uc3RydWN0b3JBcmdzLFxuICB0cmlnZ2VyZWRGdW5jdGlvbjogKCkgPT4gdm9pZCxcbiAgbGFiZWw/OiBzdHJpbmcsXG4gIGNvbG9yPzogQ29sb3IzLFxuICBzcGhlcmU/OiBib29sZWFuLFxuICBub0NvbGxpZGVyPzogYm9vbGVhbixcbiAga2VlcEluUHJvZHVjdGlvbj86IGJvb2xlYW5cbikge1xuICAvLyBpZiBub3QgaW4gcHJldmlldyByZXR1cm5cbiAgaWYgKCFrZWVwSW5Qcm9kdWN0aW9uICYmIChhd2FpdCAhaXNQcmV2aWV3TW9kZSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgbGV0IGN1YmUgPSBuZXcgRW50aXR5KClcbiAgY3ViZS5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybShwb3MpKVxuICBpZiAoc3BoZXJlKSB7XG4gICAgY3ViZS5hZGRDb21wb25lbnQobmV3IFNwaGVyZVNoYXBlKCkpXG4gICAgY3ViZS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5zY2FsZS5zZXRBbGwoMC41KVxuICB9IGVsc2Uge1xuICAgIGN1YmUuYWRkQ29tcG9uZW50KG5ldyBCb3hTaGFwZSgpKVxuICB9XG5cbiAgZW5naW5lLmFkZEVudGl0eShjdWJlKVxuXG4gIGN1YmUuYWRkQ29tcG9uZW50KFxuICAgIG5ldyBPblBvaW50ZXJEb3duKHRyaWdnZXJlZEZ1bmN0aW9uLCB7XG4gICAgICBob3ZlclRleHQ6IGxhYmVsID8gbGFiZWwgOiAnY2xpY2snLFxuICAgICAgYnV0dG9uOiBBY3Rpb25CdXR0b24uUE9JTlRFUlxuICAgIH0pXG4gIClcblxuICBpZiAoY29sb3IpIHtcbiAgICBsZXQgY3ViZU1hdGVyaWFsID0gbmV3IE1hdGVyaWFsKClcbiAgICBjdWJlTWF0ZXJpYWwuYWxiZWRvQ29sb3IgPSBjb2xvclxuICAgIGN1YmUuYWRkQ29tcG9uZW50KGN1YmVNYXRlcmlhbClcbiAgfVxuXG4gIGlmIChub0NvbGxpZGVyKSB7XG4gICAgY3ViZS5nZXRDb21wb25lbnQoQm94U2hhcGUpLndpdGhDb2xsaXNpb25zID0gZmFsc2VcbiAgfVxuXG4gIGlmIChsYWJlbCkge1xuICAgIGFkZExhYmVsKGxhYmVsLCBjdWJlLCB0cnVlKVxuICB9XG5cbiAgcmV0dXJuIGN1YmVcbn1cblxuLyoqXG4gKiBNYXBzIGEgdmFsdWUgZnJvbSBvbmUgcmFuZ2Ugb2YgdmFsdWVzIHRvIGl0cyBlcXVpdmFsZW50LCBzY2FsZWQgaW4gcHJvcG9ydGlvbiB0byBhbm90aGVyIHJhbmdlIG9mIHZhbHVlcywgdXNpbmcgbWF4aW11bSBhbmQgbWluaW11bS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0IHRvIHVzZSBvbiBsYWJlbFxuICogQHBhcmFtIHtFbnRpdHl9IHBhcmVudCBFbnRpdHkgdG8gcGxhY2UgbGFiZWwgb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpbGxib2FyZCBJZiB0cnVlLCBsYWJlbCB0dXJucyB0byBhbHdheXMgZmFjZSBwbGF5ZXIuXG4gKiBAcGFyYW0ge0NvbG9yM30gY29sb3IgVGV4dCBjb2xvci4gQmxhY2sgYnkgZGVmYXVsdC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBzaXplIFRleHQgZm9udCBzaXplLCAzIGJ5IGRlZmF1bHQuXG4gKiBAcGFyYW0ge1RyYW5mb3JtQ29uc3RydWN0b3JBcmdzfSB0ZXh0T2Zmc2V0IE9mZnNldCBmcm9tIHBhcmVudCBlbnRpdHkncyBwb3NpdGlvbi4gQnkgZGVmYXVsdCAxLjUgbWV0ZXJzIGFib3ZlIHRoZSBwYXJlbnQuXG4gKiBAcmV0dXJuIHtFbnRpdHl9IEEgbmV3IGVudGl0eSB3aXRoIHRoZSBjb25maWd1cmVkIHNldHRpbmdzIHRoYXQgaXMgYSBjaGlsZCBvZiB0aGUgcHJvdmlkZWQgcGFyZW50XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkTGFiZWwoXG4gIHRleHQ6IHN0cmluZyxcbiAgcGFyZW50OiBJRW50aXR5LFxuICBiaWxsYm9hcmQ/OiBib29sZWFuLFxuICBjb2xvcj86IENvbG9yMyxcbiAgc2l6ZT86IG51bWJlcixcbiAgdGV4dE9mZnNldD86IFRyYW5mb3JtQ29uc3RydWN0b3JBcmdzXG4pIHtcbiAgbGV0IGxhYmVsID0gbmV3IEVudGl0eSgpXG4gIGxhYmVsLmFkZENvbXBvbmVudChcbiAgICBuZXcgVHJhbnNmb3JtKFxuICAgICAgdGV4dE9mZnNldCA/IHRleHRPZmZzZXQgOiB7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLCAxLjUsIDApIH1cbiAgICApXG4gIClcbiAgbGFiZWwuc2V0UGFyZW50KHBhcmVudClcbiAgbGV0IHRleHRTaGFwZSA9IG5ldyBUZXh0U2hhcGUodGV4dClcbiAgdGV4dFNoYXBlLmZvbnRTaXplID0gc2l6ZSA/IHNpemUgOiAzXG4gIHRleHRTaGFwZS5jb2xvciA9IGNvbG9yID8gY29sb3IgOiBDb2xvcjMuQmxhY2soKVxuICBsYWJlbC5hZGRDb21wb25lbnQodGV4dFNoYXBlKVxuICBpZiAoYmlsbGJvYXJkKSB7XG4gICAgbGFiZWwuYWRkQ29tcG9uZW50KG5ldyBCaWxsYm9hcmQoKSlcbiAgfVxuICBlbmdpbmUuYWRkRW50aXR5KGxhYmVsKVxuXG4gIHJldHVybiBsYWJlbFxufVxuIiwiaW1wb3J0IHsgaXNQcmV2aWV3TW9kZSB9IGZyb20gJ0BkZWNlbnRyYWxhbmQvRW52aXJvbm1lbnRBUEknXHJcblxyXG5leHBvcnQgY2xhc3MgVHJpZ2dlclN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xyXG4gIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogVHJpZ2dlclN5c3RlbSB8IG51bGwgPSBudWxsXHJcbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBUcmlnZ2VyU3lzdGVtIHtcclxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUFuZEFkZFRvRW5naW5lKClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX3RyaWdnZXJzOiBSZWNvcmQ8c3RyaW5nLCBUcmlnZ2VyV3JhcHBlcj4gPSB7fVxyXG4gIHByaXZhdGUgX2NhbWVyYVRyaWdnZXJXcmFwcGVyOiBDYW1lcmFUcmlnZ2VyXHJcbiAgcHJpdmF0ZSBfY29tcG9uZW50R3JvdXA6IENvbXBvbmVudEdyb3VwXHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7XHJcbiAgICBUcmlnZ2VyU3lzdGVtLl9pbnN0YW5jZSA9IHRoaXNcclxuICAgIHRoaXMuX2NhbWVyYVRyaWdnZXJXcmFwcGVyID0gbmV3IENhbWVyYVRyaWdnZXIoXHJcbiAgICAgIG5ldyBUcmlnZ2VyQm94U2hhcGUobmV3IFZlY3RvcjMoMC41LCAxLjgsIDAuNSksIG5ldyBWZWN0b3IzKDAsIDAuOTEsIDApKVxyXG4gICAgKVxyXG5cclxuICAgIHRoaXMuX2NvbXBvbmVudEdyb3VwID0gZW5naW5lLmdldENvbXBvbmVudEdyb3VwKFRyaWdnZXJDb21wb25lbnQpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlQW5kQWRkVG9FbmdpbmUoKTogVHJpZ2dlclN5c3RlbSB7XHJcbiAgICBpZiAodGhpcy5faW5zdGFuY2UgPT0gbnVsbCkge1xyXG4gICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBUcmlnZ2VyU3lzdGVtKClcclxuICAgICAgZW5naW5lLmFkZFN5c3RlbSh0aGlzLl9pbnN0YW5jZSlcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9pbnN0YW5jZVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogc2V0IGEgY3VzdG9tIHRyaWdnZXIncyBzaGFwZSBmb3IgdGhlIGNhbWVyYVxyXG4gICAqIEBwYXJhbSBzaGFwZSBjdXN0b20gdHJpZ2dlcidzIHNoYXBlXHJcbiAgICovXHJcbiAgc2V0Q2FtZXJhVHJpZ2dlclNoYXBlKHNoYXBlOiBUcmlnZ2VyQm94U2hhcGUgfCBUcmlnZ2VyU3BoZXJlU2hhcGUpIHtcclxuICAgIHRoaXMuX2NhbWVyYVRyaWdnZXJXcmFwcGVyLnNldFNoYXBlKHNoYXBlKVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgbGV0IGVudGl0aWVzV2l0aFRyaWdnZXJzID0gdGhpcy5fY29tcG9uZW50R3JvdXAuZW50aXRpZXNcclxuXHJcbiAgICAvL2l0ZXJhdGUgdGhyb3VnaCBhbGwgZW50aXRpZXMgd2l0aCB0cmlnZ2VycyBhbmQgd3JhcCBlbnRpdGllcyB0aGF0IHdlcmVuJ3Qgd3JhcHBlZCB5ZXRcclxuICAgIGVudGl0aWVzV2l0aFRyaWdnZXJzLmZvckVhY2goZW50aXR5ID0+IHtcclxuICAgICAgaWYgKHRoaXMuc2hvdWxkV3JhcFRyaWdnZXJFbnRpdHkoZW50aXR5KSkge1xyXG4gICAgICAgIHRoaXMud3JhcFRyaWdnZXJFbnRpdHkoZW50aXR5KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8vaXRlcmF0ZSB0aHJvdWdoIHdyYXBwZWQgZW50aXRpZXNcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3RyaWdnZXJzKSB7XHJcbiAgICAgIGlmICh0aGlzLl90cmlnZ2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgbGV0IHdyYXBwZXIgPSB0aGlzLl90cmlnZ2Vyc1trZXldXHJcblxyXG4gICAgICAgIC8vdXBkYXRlIGRlYnVnIGVudGl0eVxyXG4gICAgICAgIGlmICh3cmFwcGVyLmlzRGVidWdnaW5nKCkpIHtcclxuICAgICAgICAgIHdyYXBwZXIudXBkYXRlRGVidWdFbnRpdHkoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF3cmFwcGVyLmlzSW5FbmdpbmUoKSkge1xyXG4gICAgICAgICAgLy9yZW1vdmUgZGVidWdnaW5nXHJcbiAgICAgICAgICBpZiAod3JhcHBlci5pc0RlYnVnZ2luZygpKSB7XHJcbiAgICAgICAgICAgIHdyYXBwZXIucmVtb3ZlRGVidWdFbnRpdHkoKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy9yZW1vdmUgb2xkIGNvbGxpc2lvbnNcclxuICAgICAgICAgIFRyaWdnZXJTeXN0ZW0ucmVtb3ZlVHJpZ2dlckZyb21TeXN0ZW0od3JhcHBlcilcclxuICAgICAgICAgIC8vcmVtb3ZlIGZyb20gcmVjb3JkXHJcbiAgICAgICAgICBkZWxldGUgdGhpcy5fdHJpZ2dlcnNba2V5XVxyXG4gICAgICAgIH0gZWxzZSBpZiAod3JhcHBlci50cmlnZ2VyICE9IG51bGwgJiYgd3JhcHBlci50cmlnZ2VyLmVuYWJsZWQpIHtcclxuICAgICAgICAgIC8vaWYgd2FzIHNldCBhcyBlbmFibGVkIGluIGxhc3QgZnJhbWVcclxuICAgICAgICAgIGlmICghd3JhcHBlci53YXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGlmICh3cmFwcGVyLmlzRGVidWdnaW5nKCkpIHtcclxuICAgICAgICAgICAgICB3cmFwcGVyLmFkZERlYnVnRW50aXR5KClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgLy9zZXQgYXMgZW5hYmxlZFxyXG4gICAgICAgICAgd3JhcHBlci53YXNFbmFibGVkID0gdHJ1ZVxyXG5cclxuICAgICAgICAgIC8vY2hlY2sgY29sbGlzaW9uIGNhbWVyYVxyXG4gICAgICAgICAgaWYgKHdyYXBwZXIudHJpZ2dlci5vbkNhbWVyYUVudGVyIHx8IHdyYXBwZXIudHJpZ2dlci5vbkNhbWVyYUV4aXQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0NvbGxpc2lvbkFnYWluc3RDYW1lcmEod3JhcHBlcilcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvL2NoZWNrIGNvbGxpc2lvbiB3aXRoIG90aGVyc1xyXG4gICAgICAgICAgaWYgKHdyYXBwZXIudHJpZ2dlci5vblRyaWdnZXJFbnRlciB8fCB3cmFwcGVyLnRyaWdnZXIub25UcmlnZ2VyRXhpdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrQ29sbGlzaW9uQWdhaW5zdE90aGVyVHJpZ2dlcnMod3JhcHBlcilcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHdyYXBwZXIud2FzRW5hYmxlZCkge1xyXG4gICAgICAgICAgd3JhcHBlci53YXNFbmFibGVkID0gZmFsc2VcclxuICAgICAgICAgIC8vcmVtb3ZlIGRlYnVnZ2luZ1xyXG4gICAgICAgICAgaWYgKHdyYXBwZXIuaXNEZWJ1Z2dpbmcoKSkge1xyXG4gICAgICAgICAgICB3cmFwcGVyLnJlbW92ZURlYnVnRW50aXR5KClcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIFRyaWdnZXJTeXN0ZW0ucmVtb3ZlVHJpZ2dlckZyb21TeXN0ZW0od3JhcHBlcilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2hvdWxkV3JhcFRyaWdnZXJFbnRpdHkoZW50aXR5OiBJRW50aXR5KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLl90cmlnZ2Vyc1tlbnRpdHkudXVpZF0gPT0gdW5kZWZpbmVkIHx8XHJcbiAgICAgIHRoaXMuX3RyaWdnZXJzW2VudGl0eS51dWlkXSA9PSBudWxsXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHdyYXBUcmlnZ2VyRW50aXR5KGVudGl0eTogSUVudGl0eSkge1xyXG4gICAgdGhpcy5fdHJpZ2dlcnNbZW50aXR5LnV1aWRdID0gbmV3IFRyaWdnZXJXcmFwcGVyKGVudGl0eSBhcyBFbnRpdHkpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyByZW1vdmVUcmlnZ2VyRnJvbVN5c3RlbSh3cmFwcGVyOiBUcmlnZ2VyV3JhcHBlcikge1xyXG4gICAgbGV0IGFjdGl2ZUNvbGxpc2lvbnMgPSB3cmFwcGVyLmdldEFjdGl2ZUNvbGxpc2lvbnMoKVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3RpdmVDb2xsaXNpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCBhY3RpdmVDb2xsaXNpb25IYXNUcmlnZ2VyID0gIShcclxuICAgICAgICBhY3RpdmVDb2xsaXNpb25zW2ldID09PVxyXG4gICAgICAgICAgVHJpZ2dlclN5c3RlbS5faW5zdGFuY2U/Ll9jYW1lcmFUcmlnZ2VyV3JhcHBlciB8fFxyXG4gICAgICAgIGFjdGl2ZUNvbGxpc2lvbnNbaV0udHJpZ2dlciA9PSBudWxsXHJcbiAgICAgIClcclxuXHJcbiAgICAgIGlmIChcclxuICAgICAgICBhY3RpdmVDb2xsaXNpb25IYXNUcmlnZ2VyICYmXHJcbiAgICAgICAgYWN0aXZlQ29sbGlzaW9uc1tpXS50cmlnZ2VyLm9uVHJpZ2dlckV4aXQgJiZcclxuICAgICAgICB3cmFwcGVyLmVudGl0eVxyXG4gICAgICApXHJcbiAgICAgICAgKGFjdGl2ZUNvbGxpc2lvbnNbaV0udHJpZ2dlci5vblRyaWdnZXJFeGl0IGFzIChcclxuICAgICAgICAgIGVudGl0eTogSUVudGl0eVxyXG4gICAgICAgICkgPT4gdm9pZCkod3JhcHBlci5lbnRpdHkpXHJcbiAgICAgIGFjdGl2ZUNvbGxpc2lvbnNbaV0uZGlzZW5nYWdlQWN0aXZlQ29sbGlzaW9uKHdyYXBwZXIpXHJcbiAgICAgIHdyYXBwZXIuZGlzZW5nYWdlQWN0aXZlQ29sbGlzaW9uKGFjdGl2ZUNvbGxpc2lvbnNbaV0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBkaXNlbmdhZ2VDb2xsaXNpb24odDE6IFRyaWdnZXJXcmFwcGVyLCB0MjogVHJpZ2dlcldyYXBwZXIpIHtcclxuICAgIHQxLmRpc2VuZ2FnZUFjdGl2ZUNvbGxpc2lvbih0MilcclxuICAgIHQyLmRpc2VuZ2FnZUFjdGl2ZUNvbGxpc2lvbih0MSlcclxuXHJcbiAgICBpZiAodDEudHJpZ2dlci5vblRyaWdnZXJFeGl0ICYmIHQyLmVudGl0eSlcclxuICAgICAgdDEudHJpZ2dlci5vblRyaWdnZXJFeGl0KHQyLmVudGl0eSlcclxuICAgIGlmICh0Mi50cmlnZ2VyLm9uVHJpZ2dlckV4aXQgJiYgdDEuZW50aXR5KVxyXG4gICAgICB0Mi50cmlnZ2VyLm9uVHJpZ2dlckV4aXQodDEuZW50aXR5KVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGF0aWMgZW5nYWdlQ29sbGlzaW9uKHQxOiBUcmlnZ2VyV3JhcHBlciwgdDI6IFRyaWdnZXJXcmFwcGVyKSB7XHJcbiAgICB0MS5lbmdhZ2VDb2xsaXNpb24odDIpXHJcbiAgICB0Mi5lbmdhZ2VDb2xsaXNpb24odDEpXHJcblxyXG4gICAgaWYgKHQxLnRyaWdnZXIub25UcmlnZ2VyRW50ZXIgJiYgdDIuZW50aXR5KVxyXG4gICAgICB0MS50cmlnZ2VyLm9uVHJpZ2dlckVudGVyKHQyLmVudGl0eSlcclxuICAgIGlmICh0Mi50cmlnZ2VyLm9uVHJpZ2dlckVudGVyICYmIHQxLmVudGl0eSlcclxuICAgICAgdDIudHJpZ2dlci5vblRyaWdnZXJFbnRlcih0MS5lbnRpdHkpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrQ29sbGlzaW9uQWdhaW5zdENhbWVyYSh3cmFwcGVyOiBUcmlnZ2VyV3JhcHBlcikge1xyXG4gICAgbGV0IHdlcmVDb2xsaWRpbmcgPSB3cmFwcGVyLmhhc0FjdGl2ZUNvbGxpc2lvbih0aGlzLl9jYW1lcmFUcmlnZ2VyV3JhcHBlcilcclxuICAgIGxldCBhcmVDb2xsaWRpbmcgPSBUcmlnZ2VyU3lzdGVtLmFyZUNvbGxpZGluZyhcclxuICAgICAgd3JhcHBlcixcclxuICAgICAgdGhpcy5fY2FtZXJhVHJpZ2dlcldyYXBwZXJcclxuICAgIClcclxuXHJcbiAgICBpZiAod2VyZUNvbGxpZGluZyAmJiAhYXJlQ29sbGlkaW5nKSB7XHJcbiAgICAgIHdyYXBwZXIuZGlzZW5nYWdlQWN0aXZlQ29sbGlzaW9uKHRoaXMuX2NhbWVyYVRyaWdnZXJXcmFwcGVyKVxyXG4gICAgICBpZiAod3JhcHBlci50cmlnZ2VyLm9uQ2FtZXJhRXhpdCkgd3JhcHBlci50cmlnZ2VyLm9uQ2FtZXJhRXhpdCgpXHJcbiAgICB9IGVsc2UgaWYgKCF3ZXJlQ29sbGlkaW5nICYmIGFyZUNvbGxpZGluZykge1xyXG4gICAgICB3cmFwcGVyLmVuZ2FnZUNvbGxpc2lvbih0aGlzLl9jYW1lcmFUcmlnZ2VyV3JhcHBlcilcclxuICAgICAgaWYgKHdyYXBwZXIudHJpZ2dlci5vbkNhbWVyYUVudGVyKSB3cmFwcGVyLnRyaWdnZXIub25DYW1lcmFFbnRlcigpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrQ29sbGlzaW9uQWdhaW5zdE90aGVyVHJpZ2dlcnMod3JhcHBlcjogVHJpZ2dlcldyYXBwZXIpIHtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuX3RyaWdnZXJzKSB7XHJcbiAgICAgIGlmICh0aGlzLl90cmlnZ2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgaWYgKGtleSAhPSB3cmFwcGVyLnV1aWQgJiYgdGhpcy5fdHJpZ2dlcnNba2V5XS50cmlnZ2VyLmVuYWJsZWQpIHtcclxuICAgICAgICAgIGlmIChUcmlnZ2VyU3lzdGVtLmNhblRyaWdnZXJzQ29sbGlkZSh3cmFwcGVyLCB0aGlzLl90cmlnZ2Vyc1trZXldKSkge1xyXG4gICAgICAgICAgICBsZXQgd2VyZUNvbGxpZGluZyA9IHdyYXBwZXIuaGFzQWN0aXZlQ29sbGlzaW9uKHRoaXMuX3RyaWdnZXJzW2tleV0pXHJcbiAgICAgICAgICAgIGxldCBhcmVDb2xsaWRpbmcgPSBUcmlnZ2VyU3lzdGVtLmFyZUNvbGxpZGluZyhcclxuICAgICAgICAgICAgICB3cmFwcGVyLFxyXG4gICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXJzW2tleV1cclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAgICAgaWYgKHdlcmVDb2xsaWRpbmcgJiYgIWFyZUNvbGxpZGluZylcclxuICAgICAgICAgICAgICBUcmlnZ2VyU3lzdGVtLmRpc2VuZ2FnZUNvbGxpc2lvbih3cmFwcGVyLCB0aGlzLl90cmlnZ2Vyc1trZXldKVxyXG4gICAgICAgICAgICBlbHNlIGlmICghd2VyZUNvbGxpZGluZyAmJiBhcmVDb2xsaWRpbmcpXHJcbiAgICAgICAgICAgICAgVHJpZ2dlclN5c3RlbS5lbmdhZ2VDb2xsaXNpb24od3JhcHBlciwgdGhpcy5fdHJpZ2dlcnNba2V5XSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGNhblRyaWdnZXJzQ29sbGlkZShcclxuICAgIHQxOiBUcmlnZ2VyV3JhcHBlcixcclxuICAgIHQyOiBUcmlnZ2VyV3JhcHBlclxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHQxLnRyaWdnZXIudHJpZ2dlcmVkQnlMYXllciA9PSAwKSByZXR1cm4gdHJ1ZVxyXG4gICAgcmV0dXJuICh0Mi50cmlnZ2VyLmxheWVyICYgdDEudHJpZ2dlci50cmlnZ2VyZWRCeUxheWVyKSAhPSAwXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBhcmVDb2xsaWRpbmcodDE6IFRyaWdnZXJXcmFwcGVyLCB0MjogVHJpZ2dlcldyYXBwZXIpOiBib29sZWFuIHtcclxuICAgIGlmIChcclxuICAgICAgdDEuZ2V0U2hhcGUoKSBpbnN0YW5jZW9mIFRyaWdnZXJCb3hTaGFwZSAmJlxyXG4gICAgICB0Mi5nZXRTaGFwZSgpIGluc3RhbmNlb2YgVHJpZ2dlckJveFNoYXBlXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIFRyaWdnZXJTeXN0ZW0uYXJlQ29sbGlkaW5nQUFCQihcclxuICAgICAgICB0MS5nZXRHbG9iYWxQb3NpdGlvbigpLFxyXG4gICAgICAgIHQxLmdldFNoYXBlKCkgYXMgVHJpZ2dlckJveFNoYXBlLFxyXG4gICAgICAgIHQyLmdldEdsb2JhbFBvc2l0aW9uKCksXHJcbiAgICAgICAgdDIuZ2V0U2hhcGUoKSBhcyBUcmlnZ2VyQm94U2hhcGVcclxuICAgICAgKVxyXG4gICAgfSBlbHNlIGlmIChcclxuICAgICAgdDEuZ2V0U2hhcGUoKSBpbnN0YW5jZW9mIFRyaWdnZXJTcGhlcmVTaGFwZSAmJlxyXG4gICAgICB0Mi5nZXRTaGFwZSgpIGluc3RhbmNlb2YgVHJpZ2dlclNwaGVyZVNoYXBlXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIFRyaWdnZXJTeXN0ZW0uYXJlQ29sbGlkaW5nU3BoZXJlKFxyXG4gICAgICAgIHQxLmdldEdsb2JhbFBvc2l0aW9uKCksXHJcbiAgICAgICAgdDEuZ2V0U2hhcGUoKSBhcyBUcmlnZ2VyU3BoZXJlU2hhcGUsXHJcbiAgICAgICAgdDIuZ2V0R2xvYmFsUG9zaXRpb24oKSxcclxuICAgICAgICB0Mi5nZXRTaGFwZSgpIGFzIFRyaWdnZXJTcGhlcmVTaGFwZVxyXG4gICAgICApXHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICB0MS5nZXRTaGFwZSgpIGluc3RhbmNlb2YgVHJpZ2dlckJveFNoYXBlICYmXHJcbiAgICAgIHQyLmdldFNoYXBlKCkgaW5zdGFuY2VvZiBUcmlnZ2VyU3BoZXJlU2hhcGVcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gVHJpZ2dlclN5c3RlbS5hcmVDb2xsaWRpbmdBQUJCU3BoZXJlKFxyXG4gICAgICAgIHQxLmdldEdsb2JhbFBvc2l0aW9uKCksXHJcbiAgICAgICAgdDEuZ2V0U2hhcGUoKSBhcyBUcmlnZ2VyQm94U2hhcGUsXHJcbiAgICAgICAgdDIuZ2V0R2xvYmFsUG9zaXRpb24oKSxcclxuICAgICAgICB0Mi5nZXRTaGFwZSgpIGFzIFRyaWdnZXJTcGhlcmVTaGFwZVxyXG4gICAgICApXHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICB0MS5nZXRTaGFwZSgpIGluc3RhbmNlb2YgVHJpZ2dlclNwaGVyZVNoYXBlICYmXHJcbiAgICAgIHQyLmdldFNoYXBlKCkgaW5zdGFuY2VvZiBUcmlnZ2VyQm94U2hhcGVcclxuICAgICkge1xyXG4gICAgICByZXR1cm4gVHJpZ2dlclN5c3RlbS5hcmVDb2xsaWRpbmdBQUJCU3BoZXJlKFxyXG4gICAgICAgIHQyLmdldEdsb2JhbFBvc2l0aW9uKCksXHJcbiAgICAgICAgdDIuZ2V0U2hhcGUoKSBhcyBUcmlnZ2VyQm94U2hhcGUsXHJcbiAgICAgICAgdDEuZ2V0R2xvYmFsUG9zaXRpb24oKSxcclxuICAgICAgICB0MS5nZXRTaGFwZSgpIGFzIFRyaWdnZXJTcGhlcmVTaGFwZVxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGFyZUNvbGxpZGluZ0FBQkIoXHJcbiAgICB0MUdsb2JhbFBvc2l0aW9uOiBWZWN0b3IzLFxyXG4gICAgdDFTaGFwZTogVHJpZ2dlckJveFNoYXBlLFxyXG4gICAgdDJHbG9iYWxQb3NpdGlvbjogVmVjdG9yMyxcclxuICAgIHQyU2hhcGU6IFRyaWdnZXJCb3hTaGFwZVxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IHQxID0gVHJpZ2dlclN5c3RlbS5nZXRCb3hTaGFwZVZhbHVlcyh0MUdsb2JhbFBvc2l0aW9uLCB0MVNoYXBlKVxyXG4gICAgbGV0IHQyID0gVHJpZ2dlclN5c3RlbS5nZXRCb3hTaGFwZVZhbHVlcyh0Mkdsb2JhbFBvc2l0aW9uLCB0MlNoYXBlKVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgdDEubWluLnggPD0gdDIubWF4LnggJiZcclxuICAgICAgdDEubWF4LnggPj0gdDIubWluLnggJiZcclxuICAgICAgdDEubWluLnkgPD0gdDIubWF4LnkgJiZcclxuICAgICAgdDEubWF4LnkgPj0gdDIubWluLnkgJiZcclxuICAgICAgdDEubWluLnogPD0gdDIubWF4LnogJiZcclxuICAgICAgdDEubWF4LnogPj0gdDIubWluLnpcclxuICAgIClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGFyZUNvbGxpZGluZ1NwaGVyZShcclxuICAgIHQxR2xvYmFsUG9zaXRpb246IFZlY3RvcjMsXHJcbiAgICB0MVNoYXBlOiBUcmlnZ2VyU3BoZXJlU2hhcGUsXHJcbiAgICB0Mkdsb2JhbFBvc2l0aW9uOiBWZWN0b3IzLFxyXG4gICAgdDJTaGFwZTogVHJpZ2dlclNwaGVyZVNoYXBlXHJcbiAgKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgc3FEaXN0ID0gVmVjdG9yMy5EaXN0YW5jZVNxdWFyZWQoXHJcbiAgICAgIHQxR2xvYmFsUG9zaXRpb24uYWRkKHQxU2hhcGUucG9zaXRpb24pLFxyXG4gICAgICB0Mkdsb2JhbFBvc2l0aW9uLmFkZCh0MlNoYXBlLnBvc2l0aW9uKVxyXG4gICAgKVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgc3FEaXN0IDwgdDFTaGFwZS5yYWRpdXMgKiB0MVNoYXBlLnJhZGl1cyArIHQyU2hhcGUucmFkaXVzICogdDJTaGFwZS5yYWRpdXNcclxuICAgIClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGFyZUNvbGxpZGluZ0FBQkJTcGhlcmUoXHJcbiAgICB0MUdsb2JhbFBvc2l0aW9uOiBWZWN0b3IzLFxyXG4gICAgdDFTaGFwZTogVHJpZ2dlckJveFNoYXBlLFxyXG4gICAgdDJHbG9iYWxQb3NpdGlvbjogVmVjdG9yMyxcclxuICAgIHQyU2hhcGU6IFRyaWdnZXJTcGhlcmVTaGFwZVxyXG4gICk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGJveCA9IFRyaWdnZXJTeXN0ZW0uZ2V0Qm94U2hhcGVWYWx1ZXModDFHbG9iYWxQb3NpdGlvbiwgdDFTaGFwZSlcclxuICAgIGxldCBzcGhlcmUgPSB7XHJcbiAgICAgIGNlbnRlcjogdDJHbG9iYWxQb3NpdGlvbi5hZGQodDJTaGFwZS5wb3NpdGlvbiksXHJcbiAgICAgIHJhZGl1czogdDJTaGFwZS5yYWRpdXNcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZG1pbiA9IDBcclxuICAgIGlmIChzcGhlcmUuY2VudGVyLnggPCBib3gubWluLngpXHJcbiAgICAgIGRtaW4gKz0gKGJveC5taW4ueCAtIHNwaGVyZS5jZW50ZXIueCkgKiAoYm94Lm1pbi54IC0gc3BoZXJlLmNlbnRlci54KVxyXG4gICAgaWYgKHNwaGVyZS5jZW50ZXIueCA+IGJveC5tYXgueClcclxuICAgICAgZG1pbiArPSAoc3BoZXJlLmNlbnRlci54IC0gYm94Lm1heC54KSAqIChzcGhlcmUuY2VudGVyLnggLSBib3gubWF4LngpXHJcbiAgICBpZiAoc3BoZXJlLmNlbnRlci55IDwgYm94Lm1pbi55KVxyXG4gICAgICBkbWluICs9IChib3gubWluLnkgLSBzcGhlcmUuY2VudGVyLnkpICogKGJveC5taW4ueSAtIHNwaGVyZS5jZW50ZXIueSlcclxuICAgIGlmIChzcGhlcmUuY2VudGVyLnkgPiBib3gubWF4LnkpXHJcbiAgICAgIGRtaW4gKz0gKHNwaGVyZS5jZW50ZXIueSAtIGJveC5tYXgueSkgKiAoc3BoZXJlLmNlbnRlci55IC0gYm94Lm1heC55KVxyXG4gICAgaWYgKHNwaGVyZS5jZW50ZXIueiA8IGJveC5taW4ueilcclxuICAgICAgZG1pbiArPSAoYm94Lm1pbi56IC0gc3BoZXJlLmNlbnRlci56KSAqIChib3gubWluLnogLSBzcGhlcmUuY2VudGVyLnopXHJcbiAgICBpZiAoc3BoZXJlLmNlbnRlci56ID4gYm94Lm1heC56KVxyXG4gICAgICBkbWluICs9IChzcGhlcmUuY2VudGVyLnogLSBib3gubWF4LnopICogKHNwaGVyZS5jZW50ZXIueiAtIGJveC5tYXgueilcclxuXHJcbiAgICByZXR1cm4gZG1pbiA8IHNwaGVyZS5yYWRpdXMgKiBzcGhlcmUucmFkaXVzXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXRpYyBnZXRCb3hTaGFwZVZhbHVlcyhcclxuICAgIGVudGl0eUdsb2JhbFBvc2l0aW9uOiBWZWN0b3IzLFxyXG4gICAgc2hhcGU6IFRyaWdnZXJCb3hTaGFwZVxyXG4gICk6IHsgY2VudGVyOiBWZWN0b3IzOyBtaW46IFZlY3RvcjM7IG1heDogVmVjdG9yMyB9IHtcclxuICAgIGxldCBjZW50ZXIgPSBlbnRpdHlHbG9iYWxQb3NpdGlvbi5hZGQoc2hhcGUucG9zaXRpb24pXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjZW50ZXI6IGNlbnRlcixcclxuICAgICAgbWluOiBjZW50ZXIuc3VidHJhY3Qoc2hhcGUuc2l6ZS5zY2FsZSgwLjUpKSxcclxuICAgICAgbWF4OiBjZW50ZXIuYWRkKHNoYXBlLnNpemUuc2NhbGUoMC41KSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIFRyaWdnZXJXcmFwcGVyIHtcclxuICB3YXNFbmFibGVkOiBib29sZWFuID0gdHJ1ZVxyXG5cclxuICBnZXQgZW50aXR5KCk6IEVudGl0eSB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5fZW50aXR5XHJcbiAgfVxyXG4gIGdldCB0cmlnZ2VyKCk6IFRyaWdnZXJDb21wb25lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RyaWdnZXJcclxuICB9XHJcbiAgZ2V0IHV1aWQoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl91dWlkXHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgX2VudGl0eT86IEVudGl0eVxyXG4gIHByb3RlY3RlZCBfdHJpZ2dlciE6IFRyaWdnZXJDb21wb25lbnRcclxuICBwcm90ZWN0ZWQgX3V1aWQ6IHN0cmluZyA9ICcnXHJcbiAgcHJvdGVjdGVkIF9jb2xsaWRpbmdXaXRoOiBSZWNvcmQ8c3RyaW5nLCBUcmlnZ2VyV3JhcHBlcj4gPSB7fVxyXG5cclxuICBwcml2YXRlIF9pc0RlYnVnOiBib29sZWFuID0gZmFsc2VcclxuICBwcml2YXRlIF9kZWJ1Z0VudGl0eTogRW50aXR5IHwgbnVsbCA9IG51bGxcclxuICBwcml2YXRlIHN0YXRpYyBfZGVidWdNYXRlcmlhbDogTWF0ZXJpYWwgfCBudWxsID0gbnVsbFxyXG5cclxuICBjb25zdHJ1Y3RvcihlbnRpdHk/OiBFbnRpdHkpIHtcclxuICAgIHRoaXMuX2VudGl0eSA9IGVudGl0eVxyXG4gICAgaWYgKGVudGl0eSkge1xyXG4gICAgICB0aGlzLl90cmlnZ2VyID0gZW50aXR5LmdldENvbXBvbmVudChUcmlnZ2VyQ29tcG9uZW50KVxyXG4gICAgICB0aGlzLl91dWlkID0gZW50aXR5LnV1aWRcclxuICAgICAgdGhpcy5faXNEZWJ1ZyA9IHRoaXMuX3RyaWdnZXIuZGVidWdFbmFibGVkXHJcbiAgICAgIGlmICh0aGlzLl9pc0RlYnVnKSB7XHJcbiAgICAgICAgdGhpcy5hZGREZWJ1Z0VudGl0eSgpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEdsb2JhbFBvc2l0aW9uKCk6IFZlY3RvcjMge1xyXG4gICAgaWYgKHRoaXMuX2VudGl0eSkgcmV0dXJuIFRyaWdnZXJXcmFwcGVyLmdldEVudGl0eVdvcmxkUG9zaXRpb24odGhpcy5fZW50aXR5KVxyXG4gICAgcmV0dXJuIFZlY3RvcjMuWmVybygpXHJcbiAgfVxyXG5cclxuICBnZXRTaGFwZSgpOiBUcmlnZ2VyQm94U2hhcGUgfCBUcmlnZ2VyU3BoZXJlU2hhcGUge1xyXG4gICAgcmV0dXJuIHRoaXMuX3RyaWdnZXIuc2hhcGVcclxuICB9XHJcblxyXG4gIGlzSW5FbmdpbmUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fZW50aXR5ICE9IG51bGwgJiYgdGhpcy5fZW50aXR5LmlzQWRkZWRUb0VuZ2luZSgpXHJcbiAgfVxyXG5cclxuICBnZXRBY3RpdmVDb2xsaXNpb25zKCk6IFRyaWdnZXJXcmFwcGVyW10ge1xyXG4gICAgbGV0IHJldDogVHJpZ2dlcldyYXBwZXJbXSA9IFtdXHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5fY29sbGlkaW5nV2l0aCkge1xyXG4gICAgICBpZiAodGhpcy5fY29sbGlkaW5nV2l0aC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgcmV0LnB1c2godGhpcy5fY29sbGlkaW5nV2l0aFtrZXldKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0XHJcbiAgfVxyXG5cclxuICBoYXNBY3RpdmVDb2xsaXNpb24ob3RoZXI6IFRyaWdnZXJXcmFwcGVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICB0aGlzLl9jb2xsaWRpbmdXaXRoW290aGVyLnV1aWRdICE9IHVuZGVmaW5lZCAmJlxyXG4gICAgICB0aGlzLl9jb2xsaWRpbmdXaXRoW290aGVyLnV1aWRdICE9IG51bGxcclxuICAgIClcclxuICB9XHJcblxyXG4gIGRpc2VuZ2FnZUFjdGl2ZUNvbGxpc2lvbihvdGhlcjogVHJpZ2dlcldyYXBwZXIpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9jb2xsaWRpbmdXaXRoW290aGVyLnV1aWRdXHJcbiAgfVxyXG5cclxuICBlbmdhZ2VDb2xsaXNpb24ob3RoZXI6IFRyaWdnZXJXcmFwcGVyKSB7XHJcbiAgICB0aGlzLl9jb2xsaWRpbmdXaXRoW290aGVyLnV1aWRdID0gb3RoZXJcclxuICB9XHJcblxyXG4gIGlzRGVidWdnaW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2lzRGVidWdcclxuICB9XHJcblxyXG4gIGFzeW5jIGFkZERlYnVnRW50aXR5KCkge1xyXG4gICAgaWYgKGF3YWl0ICFpc1ByZXZpZXdNb2RlKCkpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFUcmlnZ2VyV3JhcHBlci5fZGVidWdNYXRlcmlhbCkge1xyXG4gICAgICBUcmlnZ2VyV3JhcHBlci5fZGVidWdNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbCgpXHJcbiAgICAgIFRyaWdnZXJXcmFwcGVyLl9kZWJ1Z01hdGVyaWFsLmFscGhhVGVzdCA9IDAuNVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9kZWJ1Z0VudGl0eSA9PSBudWxsKSB7XHJcbiAgICAgIHRoaXMuX2RlYnVnRW50aXR5ID0gbmV3IEVudGl0eSgpXHJcblxyXG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBuZXcgVHJhbnNmb3JtKClcclxuICAgICAgdGhpcy5fZGVidWdFbnRpdHkuYWRkQ29tcG9uZW50KHRyYW5zZm9ybSlcclxuICAgICAgdGhpcy5fZGVidWdFbnRpdHkuYWRkQ29tcG9uZW50KFRyaWdnZXJXcmFwcGVyLl9kZWJ1Z01hdGVyaWFsKVxyXG5cclxuICAgICAgaWYgKHRoaXMuZ2V0U2hhcGUoKSBpbnN0YW5jZW9mIFRyaWdnZXJCb3hTaGFwZSkge1xyXG4gICAgICAgIGNvbnN0IHNoYXBlID0gbmV3IEJveFNoYXBlKClcclxuICAgICAgICBzaGFwZS53aXRoQ29sbGlzaW9ucyA9IGZhbHNlXHJcbiAgICAgICAgdGhpcy5fZGVidWdFbnRpdHkuYWRkQ29tcG9uZW50KHNoYXBlKVxyXG4gICAgICAgIHRyYW5zZm9ybS5zY2FsZSA9ICh0aGlzLmdldFNoYXBlKCkgYXMgVHJpZ2dlckJveFNoYXBlKS5zaXplXHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMuZ2V0U2hhcGUoKSBpbnN0YW5jZW9mIFRyaWdnZXJTcGhlcmVTaGFwZSkge1xyXG4gICAgICAgIGNvbnN0IHNoYXBlID0gbmV3IFNwaGVyZVNoYXBlKClcclxuICAgICAgICBzaGFwZS53aXRoQ29sbGlzaW9ucyA9IGZhbHNlXHJcbiAgICAgICAgdGhpcy5fZGVidWdFbnRpdHkuYWRkQ29tcG9uZW50KHNoYXBlKVxyXG4gICAgICAgIGxldCByYWQgPSAodGhpcy5nZXRTaGFwZSgpIGFzIFRyaWdnZXJTcGhlcmVTaGFwZSkucmFkaXVzXHJcbiAgICAgICAgdHJhbnNmb3JtLnNjYWxlID0gbmV3IFZlY3RvcjMocmFkLCByYWQsIHJhZClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZW5naW5lLmFkZEVudGl0eSh0aGlzLl9kZWJ1Z0VudGl0eSlcclxuICB9XHJcblxyXG4gIHJlbW92ZURlYnVnRW50aXR5KCkge1xyXG4gICAgaWYgKHRoaXMuX2RlYnVnRW50aXR5ICE9IG51bGwpIGVuZ2luZS5yZW1vdmVFbnRpdHkodGhpcy5fZGVidWdFbnRpdHkpXHJcbiAgfVxyXG5cclxuICB1cGRhdGVEZWJ1Z0VudGl0eSgpIHtcclxuICAgIGlmICh0aGlzLl9kZWJ1Z0VudGl0eSkge1xyXG4gICAgICB0aGlzLl9kZWJ1Z0VudGl0eS5nZXRDb21wb25lbnQoXHJcbiAgICAgICAgVHJhbnNmb3JtXHJcbiAgICAgICkucG9zaXRpb24gPSB0aGlzLmdldEdsb2JhbFBvc2l0aW9uKCkuYWRkKHRoaXMuZ2V0U2hhcGUoKS5wb3NpdGlvbilcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIGdldEVudGl0eVdvcmxkUG9zaXRpb24oZW50aXR5OiBJRW50aXR5KTogVmVjdG9yMyB7XHJcbiAgICBsZXQgZW50aXR5UG9zaXRpb24gPSBlbnRpdHkuaGFzQ29tcG9uZW50KFRyYW5zZm9ybSlcclxuICAgICAgPyBlbnRpdHkuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSkucG9zaXRpb24uY2xvbmUoKVxyXG4gICAgICA6IFZlY3RvcjMuWmVybygpXHJcbiAgICBsZXQgcGFyZW50RW50aXR5ID0gZW50aXR5LmdldFBhcmVudCgpXHJcblxyXG4gICAgaWYgKHBhcmVudEVudGl0eSAhPSBudWxsKSB7XHJcbiAgICAgIGxldCBwYXJlbnRSb3RhdGlvbiA9IHBhcmVudEVudGl0eS5oYXNDb21wb25lbnQoVHJhbnNmb3JtKVxyXG4gICAgICAgID8gcGFyZW50RW50aXR5LmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnJvdGF0aW9uXHJcbiAgICAgICAgOiBRdWF0ZXJuaW9uLklkZW50aXR5XHJcbiAgICAgIHJldHVybiB0aGlzLmdldEVudGl0eVdvcmxkUG9zaXRpb24ocGFyZW50RW50aXR5KS5hZGQoXHJcbiAgICAgICAgZW50aXR5UG9zaXRpb24ucm90YXRlKHBhcmVudFJvdGF0aW9uKVxyXG4gICAgICApXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW50aXR5UG9zaXRpb25cclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIENhbWVyYVRyaWdnZXIgZXh0ZW5kcyBUcmlnZ2VyV3JhcHBlciB7XHJcbiAgcHJpdmF0ZSBfc2hhcGU6IFRyaWdnZXJCb3hTaGFwZSB8IFRyaWdnZXJTcGhlcmVTaGFwZVxyXG5cclxuICBjb25zdHJ1Y3RvcihzaGFwZTogVHJpZ2dlckJveFNoYXBlIHwgVHJpZ2dlclNwaGVyZVNoYXBlKSB7XHJcbiAgICBzdXBlcigpXHJcbiAgICB0aGlzLl9zaGFwZSA9IHNoYXBlXHJcbiAgICB0aGlzLl91dWlkID0gJ2NhbWVyYVRyaWdnZXInXHJcbiAgfVxyXG5cclxuICBnZXRHbG9iYWxQb3NpdGlvbigpIHtcclxuICAgIHJldHVybiBDYW1lcmEuaW5zdGFuY2UucG9zaXRpb25cclxuICB9XHJcblxyXG4gIGdldFNoYXBlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NoYXBlXHJcbiAgfVxyXG5cclxuICBzZXRTaGFwZShzaGFwZTogVHJpZ2dlckJveFNoYXBlIHwgVHJpZ2dlclNwaGVyZVNoYXBlKSB7XHJcbiAgICB0aGlzLl9zaGFwZSA9IHNoYXBlXHJcbiAgfVxyXG5cclxuICBpc0luRW5naW5lKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBoYXNBY3RpdmVDb2xsaXNpb24ob3RoZXI6IFRyaWdnZXJXcmFwcGVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIGRpc2VuZ2FnZUFjdGl2ZUNvbGxpc2lvbihvdGhlcjogVHJpZ2dlcldyYXBwZXIpIHt9XHJcblxyXG4gIGVuZ2FnZUNvbGxpc2lvbihvdGhlcjogVHJpZ2dlcldyYXBwZXIpIHt9XHJcbiAgaXNEZWJ1Z2dpbmcoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcbn1cclxuXHJcbkBDb21wb25lbnQoJ3RyaWdnZXJDb21wb25lbnQnKVxyXG5leHBvcnQgY2xhc3MgVHJpZ2dlckNvbXBvbmVudCB7XHJcbiAgLyoqXHJcbiAgICogaXMgdHJpZ2dlciBlbmFibGU/XHJcbiAgICovXHJcbiAgZW5hYmxlZDogYm9vbGVhbiA9IHRydWVcclxuICAvKipcclxuICAgKiBzaGFwZSBvZiB0aGUgY29sbGlkZXJcclxuICAgKi9cclxuICBzaGFwZTogVHJpZ2dlckJveFNoYXBlIHwgVHJpZ2dlclNwaGVyZVNoYXBlXHJcbiAgLyoqXHJcbiAgICogYml0IGxheWVyIG9mIHRoZSBUaWdnZXIgKHVzZWZ1bGwgdG8gZGlzY3JpbWluYXRlIGJldHdlZW4gdHJpZ2dlciBldmVudHMpXHJcbiAgICovXHJcbiAgbGF5ZXI6IG51bWJlciA9IDBcclxuICAvKipcclxuICAgKiBhZ2FpbnN0IHdoaWNoIGxheWVyIGFyZSB3ZSBnb2luZyB0byBjaGVjayB0cmlnZ2VyJ3MgY29sbGlzaW9uc1xyXG4gICAqL1xyXG4gIHRyaWdnZXJlZEJ5TGF5ZXI6IG51bWJlciA9IDBcclxuICAvKipcclxuICAgKiBjYWxsYmFjayB3aGVuIHRyaWdnZXIgaXMgZW50ZXJlZFxyXG4gICAqL1xyXG4gIG9uVHJpZ2dlckVudGVyPzogKGVudGl0eTogRW50aXR5KSA9PiB2b2lkXHJcbiAgLyoqXHJcbiAgICogY2FsbGJhY2sgd2hlbiB0cmlnZ2VyIGlzIGV4aXRcclxuICAgKi9cclxuICBvblRyaWdnZXJFeGl0PzogKGVudGl0eTogRW50aXR5KSA9PiB2b2lkXHJcbiAgLyoqXHJcbiAgICogY2FsbGJhY2sgd2hlbiB0cmlnZ2VyIGlzIGVudGVyZWRcclxuICAgKi9cclxuICBvbkNhbWVyYUVudGVyPzogKCkgPT4gdm9pZFxyXG4gIC8qKlxyXG4gICAqIGNhbGxiYWNrIHdoZW4gdHJpZ2dlciBpcyBleGl0XHJcbiAgICovXHJcbiAgb25DYW1lcmFFeGl0PzogKCkgPT4gdm9pZFxyXG4gIC8qKlxyXG4gICAqIGdldCBpZiBkZWJ1ZyBpcyBlbmFibGVkXHJcbiAgICovXHJcbiAgZ2V0IGRlYnVnRW5hYmxlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9kZWJ1Z0VuYWJsZWRcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2RlYnVnRW5hYmxlZDogYm9vbGVhblxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzaGFwZSBzaGFwZSBvZiB0aGUgdHJpZ2dlcmluZyBjb2xsaWRlciBhcmVhXHJcbiAgICogQHBhcmFtIGxheWVyIGxheWVyIG9mIHRoZSBUcmlnZ2VyLCB1c2VmdWwgdG8gZGlzY3JpbWluYXRlIGJldHdlZW4gdHJpZ2dlciBldmVudHMuIFlvdSBjYW4gc2V0IG11bHRpcGxlIGxheWVycyBieSB1c2luZyBhIHwgc3ltYm9sLlxyXG4gICAqIEBwYXJhbSB0cmlnZ2VyZWRCeUxheWVyIGFnYWluc3Qgd2hpY2ggbGF5ZXJzIHRvIGNoZWNrIGNvbGxpc2lvbnNcclxuICAgKiBAcGFyYW0gb25UcmlnZ2VyRW50ZXIgY2FsbGJhY2sgd2hlbiBhbiBlbnRpdHkgb2YgYSB2YWxpZCBsYXllciBlbnRlcnMgdGhlIHRyaWdnZXIgYXJlYVxyXG4gICAqIEBwYXJhbSBvblRyaWdnZXJFeGl0IGNhbGxiYWNrIHdoZW4gYW4gZW50aXR5IG9mIGEgdmFsaWQgbGF5ZXIgbGVhdmVzIHRoZSB0cmlnZ2VyIGFyZWFcclxuICAgKiBAcGFyYW0gb25DYW1lcmFFbnRlciBjYWxsYmFjayB3aGVuIHRoZSBwbGF5ZXIgZW50ZXJzIHRoZSB0cmlnZ2VyIGFyZWFcclxuICAgKiBAcGFyYW0gb25DYW1lcmFFeGl0IGNhbGxiYWNrIHdoZW4gdGhlIHBsYXllciBsZWF2ZXMgdGhlIHRyaWdnZXIgYXJlYVxyXG4gICAqIEBwYXJhbSBlbmFibGVEZWJ1ZyB3aGVuIHRydWUgbWFrZXMgdGhlIHRyaWdnZXIgYXJlYSB2aXNpYmxlIGZvciBkZWJ1ZyBwdXJwb3Nlcy5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHNoYXBlOiBUcmlnZ2VyQm94U2hhcGUgfCBUcmlnZ2VyU3BoZXJlU2hhcGUsXHJcbiAgICBsYXllcjogbnVtYmVyID0gMCxcclxuICAgIHRyaWdnZXJlZEJ5TGF5ZXI6IG51bWJlciA9IDAsXHJcbiAgICBvblRyaWdnZXJFbnRlcj86IChlbnRpdHk6IEVudGl0eSkgPT4gdm9pZCxcclxuICAgIG9uVHJpZ2dlckV4aXQ/OiAoZW50aXR5OiBFbnRpdHkpID0+IHZvaWQsXHJcbiAgICBvbkNhbWVyYUVudGVyPzogKCkgPT4gdm9pZCxcclxuICAgIG9uQ2FtZXJhRXhpdD86ICgpID0+IHZvaWQsXHJcbiAgICBlbmFibGVEZWJ1ZzogYm9vbGVhbiA9IGZhbHNlXHJcbiAgKSB7XHJcbiAgICBUcmlnZ2VyU3lzdGVtLmNyZWF0ZUFuZEFkZFRvRW5naW5lKClcclxuICAgIHRoaXMuc2hhcGUgPSBzaGFwZVxyXG4gICAgdGhpcy5sYXllciA9IGxheWVyXHJcbiAgICB0aGlzLnRyaWdnZXJlZEJ5TGF5ZXIgPSB0cmlnZ2VyZWRCeUxheWVyXHJcbiAgICB0aGlzLm9uVHJpZ2dlckVudGVyID0gb25UcmlnZ2VyRW50ZXJcclxuICAgIHRoaXMub25UcmlnZ2VyRXhpdCA9IG9uVHJpZ2dlckV4aXRcclxuICAgIHRoaXMub25DYW1lcmFFbnRlciA9IG9uQ2FtZXJhRW50ZXJcclxuICAgIHRoaXMub25DYW1lcmFFeGl0ID0gb25DYW1lcmFFeGl0XHJcbiAgICB0aGlzLl9kZWJ1Z0VuYWJsZWQgPSBlbmFibGVEZWJ1Z1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRyaWdnZXJCb3hTaGFwZSB7XHJcbiAgc2l6ZTogVmVjdG9yM1xyXG4gIHBvc2l0aW9uOiBWZWN0b3IzXHJcblxyXG4gIGNvbnN0cnVjdG9yKHNpemU6IFZlY3RvcjMsIHBvc2l0aW9uOiBWZWN0b3IzKSB7XHJcbiAgICB0aGlzLnNpemUgPSBzaXplXHJcbiAgICB0aGlzLnBvc2l0aW9uID0gcG9zaXRpb25cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUcmlnZ2VyU3BoZXJlU2hhcGUge1xyXG4gIHJhZGl1czogbnVtYmVyXHJcbiAgcG9zaXRpb246IFZlY3RvcjNcclxuXHJcbiAgY29uc3RydWN0b3IocmFkaXVzOiBudW1iZXIsIHBvc2l0aW9uOiBWZWN0b3IzKSB7XHJcbiAgICB0aGlzLnJhZGl1cyA9IHJhZGl1c1xyXG4gICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uXHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0gaW1wbGVtZW50cyBJU3lzdGVtIHtcbiAgcHJpdmF0ZSBiZWdpblNlcXVlbmNlTm9kZTogU2VxdWVuY2VOb2RlIHwgbnVsbCA9IG51bGxcbiAgcHJpdmF0ZSBjdXJyZW50U2VxdWVuY2VOb2RlOiBTZXF1ZW5jZU5vZGUgfCBudWxsID0gbnVsbFxuXG4gIHByaXZhdGUgcnVubmluZzogYm9vbGVhbiA9IGZhbHNlXG4gIHByaXZhdGUgc3RhcnRlZDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgcHJpdmF0ZSBvbkZpbmlzaENhbGxiYWNrPzogKCkgPT4gdm9pZFxuXG4gIGNvbnN0cnVjdG9yKHNlcXVlbmNlQnVpbHQ/OiBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uU2VxdWVuY2VCdWlsZGVyKSB7XG4gICAgaWYgKHNlcXVlbmNlQnVpbHQpIHtcbiAgICAgIHRoaXMuc3RhcnRTZXF1ZW5jZShzZXF1ZW5jZUJ1aWx0KVxuICAgIH1cbiAgfVxuXG4gIHN0YXJ0U2VxdWVuY2Uoc2VxdWVuY2VCdWlsdDogQWN0aW9uc1NlcXVlbmNlU3lzdGVtLlNlcXVlbmNlQnVpbGRlcikge1xuICAgIHRoaXMuYmVnaW5TZXF1ZW5jZU5vZGUgPSBzZXF1ZW5jZUJ1aWx0LmJlZ2luU2VxdWVuY2VOb2RlXG4gICAgdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlID0gdGhpcy5iZWdpblNlcXVlbmNlTm9kZVxuICAgIHRoaXMucnVubmluZyA9IHRydWVcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZVxuICB9XG5cbiAgc2V0T25GaW5pc2hDYWxsYmFjayhvbkZpbmlzaENhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5vbkZpbmlzaENhbGxiYWNrID0gb25GaW5pc2hDYWxsYmFja1xuICB9XG5cbiAgaXNSdW5uaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJ1bm5pbmdcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5ydW5uaW5nID0gZmFsc2VcbiAgfVxuXG4gIHJlc3VtZSgpIHtcbiAgICBpZiAodGhpcy5iZWdpblNlcXVlbmNlTm9kZSAhPSBudWxsKSB7XG4gICAgICB0aGlzLnJ1bm5pbmcgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlID0gdGhpcy5iZWdpblNlcXVlbmNlTm9kZVxuICAgIHRoaXMucnVubmluZyA9IHRydWVcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZVxuICB9XG5cbiAgZ2V0UnVubmluZ0FjdGlvbigpOiBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB8IG51bGwge1xuICAgIGxldCBjdXJyZW50Tm9kZTogU2VxdWVuY2VOb2RlIHwgbnVsbCA9IHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZVxuXG4gICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSBpbnN0YW5jZW9mIFN1YlNlcXVlbmNlTm9kZSkge1xuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50Tm9kZSA9IChjdXJyZW50Tm9kZSBhcyBTdWJTZXF1ZW5jZU5vZGUpLmN1cnJlbnRJbm5lclNlcXVlbmNlXG4gICAgICB9IHdoaWxlIChjdXJyZW50Tm9kZSBpbnN0YW5jZW9mIFN1YlNlcXVlbmNlTm9kZSlcbiAgICB9XG4gICAgcmV0dXJuIChjdXJyZW50Tm9kZSBhcyBTZXF1ZW5jZU5vZGUpLmFjdGlvblxuICB9XG5cbiAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ydW5uaW5nKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgICA7KHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSBhcyBTZXF1ZW5jZU5vZGUpLm9uU3RhcnQoKVxuICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoISh0aGlzLmN1cnJlbnRTZXF1ZW5jZU5vZGUgYXMgU2VxdWVuY2VOb2RlKS5oYXNGaW5pc2goKSkge1xuICAgICAgICAgIDsodGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlIGFzIFNlcXVlbmNlTm9kZSkudXBkYXRlKGR0KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIDsodGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlIGFzIFNlcXVlbmNlTm9kZSkub25GaW5pc2goKVxuICAgICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9ICh0aGlzXG4gICAgICAgICAgICAuY3VycmVudFNlcXVlbmNlTm9kZSBhcyBTZXF1ZW5jZU5vZGUpLm5leHRcbiAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZU5vZGUub25TdGFydCgpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucnVubmluZyA9IGZhbHNlXG4gICAgICAgICAgICBpZiAodGhpcy5vbkZpbmlzaENhbGxiYWNrKSB0aGlzLm9uRmluaXNoQ2FsbGJhY2soKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIEFjdGlvbnNTZXF1ZW5jZVN5c3RlbSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgSUFjdGlvbiB7XG4gICAgb25TdGFydCgpOiB2b2lkXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkXG4gICAgb25GaW5pc2goKTogdm9pZFxuICAgIGhhc0ZpbmlzaGVkOiBib29sZWFuXG4gIH1cblxuICBleHBvcnQgY2xhc3MgU2VxdWVuY2VCdWlsZGVyIHtcbiAgICBwcml2YXRlIGN1cnJlbnRTZXF1ZW5jZU5vZGU6IFNlcXVlbmNlTm9kZSB8IG51bGwgPSBudWxsXG4gICAgcHVibGljIGJlZ2luU2VxdWVuY2VOb2RlOiBTZXF1ZW5jZU5vZGUgfCBudWxsID0gbnVsbFxuXG4gICAgcHJpdmF0ZSB3aGlsZU5vZGVTdGFjazogV2hpbGVTZXF1ZW5jZU5vZGVbXSA9IFtdXG5cbiAgICB0aGVuKGFjdGlvbjogQWN0aW9uc1NlcXVlbmNlU3lzdGVtLklBY3Rpb24pOiBTZXF1ZW5jZUJ1aWxkZXIge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9IG5ldyBTZXF1ZW5jZU5vZGUoKVxuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZU5vZGUuYWN0aW9uID0gYWN0aW9uXG4gICAgICAgIHRoaXMuYmVnaW5TZXF1ZW5jZU5vZGUgPSB0aGlzLmN1cnJlbnRTZXF1ZW5jZU5vZGVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBuZXh0ID0gbmV3IFNlcXVlbmNlTm9kZSgpXG4gICAgICAgIG5leHQuYWN0aW9uID0gYWN0aW9uXG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9IHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZS50aGVuKG5leHQpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGlmKGNvbmRpdGlvbjogKCkgPT4gYm9vbGVhbik6IFNlcXVlbmNlQnVpbGRlciB7XG4gICAgICBsZXQgaWZTZXEgPSBuZXcgSWZTZXF1ZW5jZU5vZGUoY29uZGl0aW9uKVxuICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9IGlmU2VxXG4gICAgICAgIHRoaXMuYmVnaW5TZXF1ZW5jZU5vZGUgPSBpZlNlcVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlID0gdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlLnRoZW4oaWZTZXEpXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGVsc2UoKTogU2VxdWVuY2VCdWlsZGVyIHtcbiAgICAgIGxldCBzZXEgPSAodGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlIGFzIFNlcXVlbmNlTm9kZSkuZ2V0U2VxdWVuY2UoKVxuICAgICAgaWYgKHNlcSBpbnN0YW5jZW9mIElmU2VxdWVuY2VOb2RlKSB7XG4gICAgICAgIHNlcS5jbG9zZWQgPSB0cnVlXG4gICAgICAgIGxldCBlbHNlU2VxID0gbmV3IEVsc2VTZXF1ZW5jZU5vZGUoc2VxKVxuICAgICAgICB0aGlzLmN1cnJlbnRTZXF1ZW5jZU5vZGUgPSAodGhpc1xuICAgICAgICAgIC5jdXJyZW50U2VxdWVuY2VOb2RlIGFzIFNlcXVlbmNlTm9kZSkudGhlbihlbHNlU2VxKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdJRiBzdGF0ZW1lbnQgaXMgbmVlZGVkIHRvIGJlIGNhbGxlZCBiZWZvcmUgRUxTRSBzdGF0ZW1lbnQuJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGVuZElmKCk6IFNlcXVlbmNlQnVpbGRlciB7XG4gICAgICBsZXQgc2VxID0gKHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSBhcyBTZXF1ZW5jZU5vZGUpLmdldFNlcXVlbmNlKClcbiAgICAgIGlmIChzZXEgaW5zdGFuY2VvZiBJZlNlcXVlbmNlTm9kZSB8fCBzZXEgaW5zdGFuY2VvZiBFbHNlU2VxdWVuY2VOb2RlKSB7XG4gICAgICAgIHNlcS5jbG9zZWQgPSB0cnVlXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0lGIHN0YXRlbWVudCBpcyBuZWVkZWQgdG8gYmUgY2FsbGVkIGJlZm9yZSBFTkRJRiBzdGF0ZW1lbnQuJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHdoaWxlKGNvbmRpdGlvbjogKCkgPT4gYm9vbGVhbik6IFNlcXVlbmNlQnVpbGRlciB7XG4gICAgICBsZXQgd2hpbGVTZXEgPSBuZXcgV2hpbGVTZXF1ZW5jZU5vZGUoY29uZGl0aW9uKVxuICAgICAgaWYgKHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSA9IHdoaWxlU2VxXG4gICAgICAgIHRoaXMuYmVnaW5TZXF1ZW5jZU5vZGUgPSB3aGlsZVNlcVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlID0gdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlLnRoZW4od2hpbGVTZXEpXG4gICAgICB9XG4gICAgICB0aGlzLndoaWxlTm9kZVN0YWNrLnB1c2god2hpbGVTZXEpXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGVuZFdoaWxlKCk6IFNlcXVlbmNlQnVpbGRlciB7XG4gICAgICBsZXQgc2VxID0gKHRoaXMuY3VycmVudFNlcXVlbmNlTm9kZSBhcyBTZXF1ZW5jZU5vZGUpLmdldFNlcXVlbmNlKClcbiAgICAgIGlmIChzZXEgaW5zdGFuY2VvZiBXaGlsZVNlcXVlbmNlTm9kZSkge1xuICAgICAgICBzZXEuY2xvc2VkID0gdHJ1ZVxuICAgICAgICBpZiAodGhpcy53aGlsZU5vZGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGhpcy53aGlsZU5vZGVTdGFjay5zcGxpY2UodGhpcy53aGlsZU5vZGVTdGFjay5sZW5ndGggLSAxLCAxKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1dISUxFIHN0YXRlbWVudCBpcyBuZWVkZWQgdG8gYmUgY2FsbGVkIGJlZm9yZSBFTkRXSElMRSBzdGF0ZW1lbnQuJ1xuICAgICAgICApXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIGJyZWFrV2hpbGUoKTogU2VxdWVuY2VCdWlsZGVyIHtcbiAgICAgIGlmICh0aGlzLndoaWxlTm9kZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U2VxdWVuY2VOb2RlID0gKHRoaXNcbiAgICAgICAgICAuY3VycmVudFNlcXVlbmNlTm9kZSBhcyBTZXF1ZW5jZU5vZGUpLnRoZW4oXG4gICAgICAgICAgbmV3IEJyZWFrV2hpbGVTZXF1ZW5jZU5vZGUoXG4gICAgICAgICAgICB0aGlzLndoaWxlTm9kZVN0YWNrW3RoaXMud2hpbGVOb2RlU3RhY2subGVuZ3RoIC0gMV1cbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnV0hJTEUgc3RhdGVtZW50IGlzIG5lZWRlZCB0byBiZSBjYWxsZWQgYmVmb3JlIEJSRUFLV0hJTEUgc3RhdGVtZW50LidcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gIH1cbn1cblxuY2xhc3MgU2VxdWVuY2VOb2RlIHtcbiAgYWN0aW9uOiBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB8IG51bGwgPSBudWxsXG4gIG5leHQ6IFNlcXVlbmNlTm9kZSB8IG51bGwgPSBudWxsXG5cbiAgdGhlbihuZXh0OiBTZXF1ZW5jZU5vZGUpOiBTZXF1ZW5jZU5vZGUge1xuICAgIHRoaXMubmV4dCA9IG5leHRcbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgb25TdGFydCgpIHtcbiAgICBpZiAodGhpcy5hY3Rpb24pIHRoaXMuYWN0aW9uLm9uU3RhcnQoKVxuICB9XG5cbiAgdXBkYXRlKGR0OiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5hY3Rpb24pIHRoaXMuYWN0aW9uLnVwZGF0ZShkdClcbiAgfVxuXG4gIG9uRmluaXNoKCkge1xuICAgIGlmICh0aGlzLmFjdGlvbikgdGhpcy5hY3Rpb24ub25GaW5pc2goKVxuICB9XG5cbiAgaGFzRmluaXNoKCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmFjdGlvbikgcmV0dXJuIHRoaXMuYWN0aW9uLmhhc0ZpbmlzaGVkXG4gICAgZWxzZSByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZ2V0U2VxdWVuY2UoKTogU2VxdWVuY2VOb2RlIHtcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbmNsYXNzIFN1YlNlcXVlbmNlTm9kZSBleHRlbmRzIFNlcXVlbmNlTm9kZSB7XG4gIGN1cnJlbnRJbm5lclNlcXVlbmNlOiBTZXF1ZW5jZU5vZGUgfCBudWxsID0gbnVsbFxuICBzdGFydGluZ0lubmVyU2VxdWVuY2U6IFNlcXVlbmNlTm9kZSB8IG51bGwgPSBudWxsXG4gIGNsb3NlZDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgdGhlbihuZXh0OiBTZXF1ZW5jZU5vZGUpOiBTZXF1ZW5jZU5vZGUge1xuICAgIGlmICh0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlID09IG51bGwpIHtcbiAgICAgIHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UgPSBuZXh0XG4gICAgICB0aGlzLnN0YXJ0aW5nSW5uZXJTZXF1ZW5jZSA9IG5leHRcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IG5leHRcbiAgICAgICAgcmV0dXJuIG5leHRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UgPSB0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlLnRoZW4obmV4dClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIG9uU3RhcnQoKSB7XG4gICAgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSA9IHRoaXMuc3RhcnRpbmdJbm5lclNlcXVlbmNlXG4gICAgaWYgKHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UpIHRoaXMuY3VycmVudElubmVyU2VxdWVuY2Uub25TdGFydCgpXG4gIH1cblxuICB1cGRhdGUoZHQ6IG51bWJlcikge1xuICAgIGlmICh0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlKSB7XG4gICAgICBpZiAoIXRoaXMuY3VycmVudElubmVyU2VxdWVuY2UuaGFzRmluaXNoKCkpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZS51cGRhdGUoZHQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlLm9uRmluaXNoKClcbiAgICAgICAgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSA9IHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UubmV4dFxuICAgICAgICBpZiAodGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSkgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZS5vblN0YXJ0KClcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkZpbmlzaCgpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSkgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZS5vbkZpbmlzaCgpXG4gIH1cblxuICBoYXNGaW5pc2goKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UgPT0gbnVsbFxuICB9XG5cbiAgZ2V0U2VxdWVuY2UoKTogU2VxdWVuY2VOb2RlIHtcbiAgICBpZiAodGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSkge1xuICAgICAgbGV0IGlubmVyU2VxID0gdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZS5nZXRTZXF1ZW5jZSgpXG4gICAgICBpZiAoaW5uZXJTZXEgaW5zdGFuY2VvZiBTdWJTZXF1ZW5jZU5vZGUpIHtcbiAgICAgICAgaWYgKCFpbm5lclNlcS5jbG9zZWQpIHtcbiAgICAgICAgICByZXR1cm4gaW5uZXJTZXFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbmNsYXNzIElmU2VxdWVuY2VOb2RlIGV4dGVuZHMgU3ViU2VxdWVuY2VOb2RlIHtcbiAgY29uZGl0aW9uOiAoKSA9PiBib29sZWFuXG4gIHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoY29uZGl0aW9uOiAoKSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uXG4gIH1cblxuICBvblN0YXJ0KCkge1xuICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jb25kaXRpb24oKVxuICAgIGlmICh0aGlzLnJlc3VsdCkgc3VwZXIub25TdGFydCgpXG4gICAgZWxzZSB0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlID0gbnVsbFxuICB9XG59XG5cbmNsYXNzIEVsc2VTZXF1ZW5jZU5vZGUgZXh0ZW5kcyBTdWJTZXF1ZW5jZU5vZGUge1xuICBpZlNlcXVlbmNlOiBJZlNlcXVlbmNlTm9kZSB8IG51bGwgPSBudWxsXG5cbiAgY29uc3RydWN0b3IoaWZTZXF1ZW5jZTogSWZTZXF1ZW5jZU5vZGUpIHtcbiAgICBzdXBlcigpXG4gICAgdGhpcy5pZlNlcXVlbmNlID0gaWZTZXF1ZW5jZVxuICB9XG5cbiAgb25TdGFydCgpIHtcbiAgICBpZiAodGhpcy5pZlNlcXVlbmNlICYmICF0aGlzLmlmU2VxdWVuY2UucmVzdWx0KSBzdXBlci5vblN0YXJ0KClcbiAgICBlbHNlIHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UgPSBudWxsXG4gIH1cbn1cblxuY2xhc3MgV2hpbGVTZXF1ZW5jZU5vZGUgZXh0ZW5kcyBTdWJTZXF1ZW5jZU5vZGUge1xuICBjb25kaXRpb246ICgpID0+IGJvb2xlYW5cbiAgYnJlYWtXaGlsZTogYm9vbGVhbiA9IGZhbHNlXG5cbiAgY29uc3RydWN0b3IoY29uZGl0aW9uOiAoKSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uXG4gIH1cblxuICBvblN0YXJ0KCkge1xuICAgIHRoaXMuYnJlYWtXaGlsZSA9IGZhbHNlXG4gICAgaWYgKHRoaXMuY29uZGl0aW9uKCkpIHN1cGVyLm9uU3RhcnQoKVxuICAgIGVsc2UgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSA9IG51bGxcbiAgfVxuXG4gIHVwZGF0ZShkdDogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudElubmVyU2VxdWVuY2UpIHtcbiAgICAgIGlmICghdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZS5oYXNGaW5pc2goKSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlLnVwZGF0ZShkdClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY3VycmVudElubmVyU2VxdWVuY2Uub25GaW5pc2goKVxuICAgICAgICB0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlID0gdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZS5uZXh0XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlID09IG51bGwpXG4gICAgICAgICAgdGhpcy5jdXJyZW50SW5uZXJTZXF1ZW5jZSA9IHRoaXMuc3RhcnRpbmdJbm5lclNlcXVlbmNlXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlKSB0aGlzLmN1cnJlbnRJbm5lclNlcXVlbmNlLm9uU3RhcnQoKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGhhc0ZpbmlzaCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5icmVha1doaWxlIHx8ICF0aGlzLmNvbmRpdGlvbigpXG4gIH1cbn1cblxuY2xhc3MgQnJlYWtXaGlsZVNlcXVlbmNlTm9kZSBleHRlbmRzIFNlcXVlbmNlTm9kZSB7XG4gIHdoaWxlTm9kZTogV2hpbGVTZXF1ZW5jZU5vZGVcblxuICBjb25zdHJ1Y3Rvcih3aGlsZU5vZGU6IFdoaWxlU2VxdWVuY2VOb2RlKSB7XG4gICAgc3VwZXIoKVxuICAgIHRoaXMud2hpbGVOb2RlID0gd2hpbGVOb2RlXG4gIH1cblxuICBvblN0YXJ0KCkge1xuICAgIHRoaXMud2hpbGVOb2RlLmJyZWFrV2hpbGUgPSB0cnVlXG4gIH1cbn1cbiIsImltcG9ydCB7IE1vdmVUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuL3RyYW5zZm9ybS9jb21wb25lbnQvbW92ZSdcclxuaW1wb3J0IHsgUm90YXRlVHJhbnNmb3JtQ29tcG9uZW50IH0gZnJvbSAnLi90cmFuc2Zvcm0vY29tcG9uZW50L3JvdGF0ZSdcclxuaW1wb3J0IHsgU2NhbGVUcmFuc2Zvcm1Db21wb25lbnQgfSBmcm9tICcuL3RyYW5zZm9ybS9jb21wb25lbnQvc2NhbGUnXHJcbmltcG9ydCB7IEZvbGxvd1BhdGhDb21wb25lbnQgfSBmcm9tICcuL3RyYW5zZm9ybS9jb21wb25lbnQvZm9sbG93cGF0aCdcclxuaW1wb3J0IHsgS2VlcFJvdGF0aW5nQ29tcG9uZW50IH0gZnJvbSAnLi90cmFuc2Zvcm0vY29tcG9uZW50L2tlZXByb3RhdGluZydcclxuaW1wb3J0IHsgVHJhbnNmb3JtU3lzdGVtIH0gZnJvbSAnLi90cmFuc2Zvcm0vc3lzdGVtL3RyYW5zZnJvbVN5c3RlbSdcclxuaW1wb3J0IHsgSW50ZXJwb2xhdGUsIEludGVycG9sYXRpb25UeXBlIH0gZnJvbSAnLi90cmFuc2Zvcm0vbWF0aC9pbnRlcnBvbGF0aW9uJ1xyXG5cclxuaW1wb3J0IHsgVG9nZ2xlQ29tcG9uZW50LCBUb2dnbGVTdGF0ZSB9IGZyb20gJy4vdG9nZ2xlL3RvZ2dsZUNvbXBvbmVudCdcclxuXHJcbmltcG9ydCB7IERlbGF5IH0gZnJvbSAnLi90aW1lci9jb21wb25lbnQvZGVsYXknXHJcbmltcG9ydCB7IEV4cGlyZUluIH0gZnJvbSAnLi90aW1lci9jb21wb25lbnQvZXhwaXJlJ1xyXG5pbXBvcnQgeyBJbnRlcnZhbCB9IGZyb20gJy4vdGltZXIvY29tcG9uZW50L2ludGVydmFsJ1xyXG5pbXBvcnQgeyBtYXAsIGNsYW1wIH0gZnJvbSAnLi9oZWxwZXJzL2hlbHBlcmZ1bmN0aW9ucydcclxuaW1wb3J0IHsgYWRkVGVzdEN1YmUsIGFkZExhYmVsIH0gZnJvbSAnLi9oZWxwZXJzL3Rlc3RDdWJlJ1xyXG5pbXBvcnQge1xyXG4gIFRyaWdnZXJTeXN0ZW0sXHJcbiAgVHJpZ2dlckJveFNoYXBlLFxyXG4gIFRyaWdnZXJTcGhlcmVTaGFwZSxcclxuICBUcmlnZ2VyQ29tcG9uZW50XHJcbn0gZnJvbSAnLi90cmlnZ2Vycy90cmlnZ2VyU3lzdGVtJ1xyXG5cclxuaW1wb3J0IHsgQWN0aW9uc1NlcXVlbmNlU3lzdGVtIH0gZnJvbSAnLi9hY3Rpb25zU2VxdWVuY2VTeXN0ZW0vYWN0aW9uc1NlcXVlbmNlU3lzdGVtJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIFRyYW5zZm9ybVN5c3RlbSxcclxuICBNb3ZlVHJhbnNmb3JtQ29tcG9uZW50LFxyXG4gIFJvdGF0ZVRyYW5zZm9ybUNvbXBvbmVudCxcclxuICBTY2FsZVRyYW5zZm9ybUNvbXBvbmVudCxcclxuICBGb2xsb3dQYXRoQ29tcG9uZW50LFxyXG4gIEtlZXBSb3RhdGluZ0NvbXBvbmVudCxcclxuICBJbnRlcnBvbGF0ZSxcclxuICBJbnRlcnBvbGF0aW9uVHlwZSxcclxuICBUb2dnbGVDb21wb25lbnQsXHJcbiAgVG9nZ2xlU3RhdGUsXHJcbiAgRGVsYXksXHJcbiAgRXhwaXJlSW4sXHJcbiAgSW50ZXJ2YWwsXHJcbiAgVHJpZ2dlckNvbXBvbmVudCxcclxuICBUcmlnZ2VyU3lzdGVtLFxyXG4gIFRyaWdnZXJTcGhlcmVTaGFwZSxcclxuICBUcmlnZ2VyQm94U2hhcGUsXHJcbiAgQWN0aW9uc1NlcXVlbmNlU3lzdGVtLFxyXG4gIG1hcCxcclxuICBjbGFtcCxcclxuICBhZGRUZXN0Q3ViZSxcclxuICBhZGRMYWJlbFxyXG59XHJcbiIsImltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuXHJcbkBDb21wb25lbnQoXCJtb3VzZUZvbGxvd1BhdGhDb21wb25lbnRcIilcclxuZXhwb3J0IGNsYXNzIE1vdXNlRm9sbG93UGF0aENvbXBvbmVudCB7XHJcbiAgcHJpdmF0ZSBzdGFydERlbGF5OiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBpZGxlVGltZTogbnVtYmVyO1xyXG4gIHByaXZhdGUgcGF0aDogVmVjdG9yM1tdO1xyXG4gIHByaXZhdGUgbW92aW5nVGltZTogbnVtYmVyO1xyXG5cclxuICBwcml2YXRlIGN1cnJlbnRUaW1lOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBpc0luSWRsZVRpbWU6IGJvb2xlYW47XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgc3RhcnREZWxheTogbnVtYmVyLFxyXG4gICAgaWRsZVRpbWU6IG51bWJlcixcclxuICAgIHBhdGg6IFZlY3RvcjNbXSxcclxuICAgIG1vdmluZ1RpbWU6IG51bWJlclxyXG4gICkge1xyXG4gICAgdGhpcy5zdGFydERlbGF5ID0gc3RhcnREZWxheTtcclxuICAgIHRoaXMuaWRsZVRpbWUgPSBpZGxlVGltZTtcclxuICAgIHRoaXMucGF0aCA9IHBhdGg7XHJcbiAgICB0aGlzLm1vdmluZ1RpbWUgPSBtb3ZpbmdUaW1lO1xyXG5cclxuICAgIHRoaXMuY3VycmVudFRpbWUgPSBpZGxlVGltZTtcclxuICAgIHRoaXMuaXNJbklkbGVUaW1lID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZShkdDogbnVtYmVyLCBtb3VzZUVudGl0eTogSUVudGl0eSkge1xyXG4gICAgLy8gVmVyaWZpY2Egc2UgZXN0w6EgZXNwZXJhbmRvIG8gaW7DrWNpb1xyXG4gICAgaWYgKHRoaXMuc3RhcnREZWxheSA+IDApIHtcclxuICAgICAgdGhpcy5zdGFydERlbGF5IC09IGR0O1xyXG4gICAgfVxyXG4gICAgLy8gUXVhbmRvIG8gbW91c2UgZXN0w6EgZW0gcmVwb3Vzb1xyXG4gICAgZWxzZSBpZiAodGhpcy5pc0luSWRsZVRpbWUpIHtcclxuICAgICAgLy8gQXVtZW50YSBvIHRlbXBvIG5vIGVzdGFkbyBkZSByZXBvdXNvXHJcbiAgICAgIHRoaXMuY3VycmVudFRpbWUgKz0gZHQ7XHJcbiAgICAgIC8vIFF1YW5kbyBvIHRlbXBvIGRlIHJlcG91c28gw6kgYXRpbmdpZG9cclxuICAgICAgaWYgKHRoaXMuY3VycmVudFRpbWUgPj0gdGhpcy5pZGxlVGltZSkge1xyXG4gICAgICAgIC8vIE7Do28gZXN0YW1vcyBtYWlzIGVtIGVzdGFkbyBkZSByZXBvdXNvXHJcbiAgICAgICAgdGhpcy5pc0luSWRsZVRpbWUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gR2lyYSBvIG1vdXNlIHBhcmEgb2xoYXIgcGFyYSBvIHByw7N4aW1vIHBvbnRvIG5vIGNhbWluaG9cclxuICAgICAgICBtb3VzZUVudGl0eS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5sb29rQXQodGhpcy5wYXRoWzFdKTtcclxuICAgICAgICAvLyBBZGljaW9uYSBjb21wb25lbnRlIHBhcmEgc2VndWlyIG8gY2FtaW5ob1xyXG4gICAgICAgIG1vdXNlRW50aXR5LmFkZENvbXBvbmVudE9yUmVwbGFjZShcclxuICAgICAgICAgIG5ldyB1dGlscy5Gb2xsb3dQYXRoQ29tcG9uZW50KFxyXG4gICAgICAgICAgICB0aGlzLnBhdGgsXHJcbiAgICAgICAgICAgIHRoaXMubW92aW5nVGltZSxcclxuICAgICAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgICAgIC8vIFF1YW5kbyBvIGNhbWluaG8gw6kgY29uY2x1w61kbywgcmVkZWZpbmltb3MgYXMgdmFyacOhdmVpcyBkbyBtb3VzZVxyXG4gICAgICAgICAgICAgIHRoaXMuaXNJbklkbGVUaW1lID0gdHJ1ZTtcclxuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRUaW1lID0gMDtcclxuICAgICAgICAgICAgICAvLyBEZWZpbmltb3MgbyBtb3VzZSBwYXJhIGlyIG5hIGRpcmXDp8OjbyBvcG9zdGEgbmEgcHLDs3hpbWEgdmV6XHJcbiAgICAgICAgICAgICAgdGhpcy5wYXRoLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgKGN1cnJlbnRQb2ludCwgbmV4dFBvaW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgLy8gUXVhbmRvIGNoZWdhbW9zIGEgdW0gbm92byBwb250byBubyBjYW1pbmhvLCBnaXJhbW9zIG8gbW91c2UgcGFyYSBvbGhhciBwYXJhIG8gcHLDs3hpbW8gcG9udG9cclxuICAgICAgICAgICAgICBtb3VzZUVudGl0eS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5sb29rQXQobmV4dFBvaW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgeyBNb3VzZUZvbGxvd1BhdGhDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb3VzZUZvbGxvd1BhdGhDb21wb25lbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBcmNhZGVTY3JlZW4ge1xyXG4gIHB1YmxpYyB0aWxlc1BhaW50ZWRCeVBsYXllciA9IDA7XHJcbiAgcHVibGljIG9uQ29tcGxldGlvbjogKCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB0aWxlU2l6ZTogVmVjdG9yMyxcclxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXHJcbiAgICByb3dDb3VudDogbnVtYmVyLFxyXG4gICAgdGlsZVNwYWNpbmc6IFZlY3RvcjMsXHJcbiAgICBpbml0aWFsUG9zaXRpb246IFZlY3RvcjMsXHJcbiAgICBzY3JlZW5Sb3RhdGlvbjogUXVhdGVybmlvblxyXG4gICkge1xyXG4gICAgLy8gQ3JpYW5kbyBvcyBNYXRlcmlhaXNcclxuICAgIGNvbnN0IG1pY2VNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbCgpO1xyXG4gICAgbWljZU1hdGVyaWFsLmFsYmVkb0NvbG9yID0gQ29sb3IzLk1hZ2VudGEoKTtcclxuXHJcbiAgICBjb25zdCBwbGF5ZXJNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbCgpO1xyXG4gICAgcGxheWVyTWF0ZXJpYWwuYWxiZWRvQ29sb3IgPSBDb2xvcjMuR3JlZW4oKTtcclxuXHJcbiAgICBjb25zdCBkZWZhdWx0TWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwoKTtcclxuICAgIGRlZmF1bHRNYXRlcmlhbC5hbGJlZG9Db2xvciA9IENvbG9yMy5UZWFsKCk7XHJcblxyXG4gICAgLy8gQ3JpYW5kbyBhIFRlbGFcclxuICAgIGNvbnN0IHRpbGVTaGFwZSA9IG5ldyBQbGFuZVNoYXBlKCk7XHJcbiAgICB0aWxlU2hhcGUud2l0aENvbGxpc2lvbnMgPSBmYWxzZTtcclxuXHJcbiAgICBmb3IgKGxldCBjb2x1bW4gPSAwOyBjb2x1bW4gPCBjb2x1bW5Db3VudDsgY29sdW1uKyspIHtcclxuICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgcm93Q291bnQ7IHJvdysrKSB7XHJcbiAgICAgICAgLy8gQ2FsY3VsYW5kbyBhIFBvc2nDp8OjbyBkbyBBenVsZWpvXHJcbiAgICAgICAgbGV0IHRpbGVQb3MgPSBuZXcgVmVjdG9yMyhcclxuICAgICAgICAgIGNvbHVtbiAqICh0aWxlU2l6ZS54ICsgdGlsZVNwYWNpbmcueCksXHJcbiAgICAgICAgICByb3cgKiAodGlsZVNpemUueSArIHRpbGVTcGFjaW5nLnkpLFxyXG4gICAgICAgICAgMFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGlsZVBvcyA9IGluaXRpYWxQb3NpdGlvbi5hZGQodGlsZVBvcy5yb3RhdGUoc2NyZWVuUm90YXRpb24pKTtcclxuXHJcbiAgICAgICAgLy8gQ3JpYW5kbyBhIEVudGlkYWRlIGRvIEF6dWxlam9cclxuICAgICAgICBjb25zdCB0aWxlRW50aXR5ID0gbmV3IEVudGl0eSgpO1xyXG4gICAgICAgIGVuZ2luZS5hZGRFbnRpdHkodGlsZUVudGl0eSk7XHJcblxyXG4gICAgICAgIHRpbGVFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgICAgICAgbmV3IFRyYW5zZm9ybSh7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aWxlUG9zLFxyXG4gICAgICAgICAgICBzY2FsZTogdGlsZVNpemUsXHJcbiAgICAgICAgICAgIHJvdGF0aW9uOiBzY3JlZW5Sb3RhdGlvblxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRpbGVFbnRpdHkuYWRkQ29tcG9uZW50KHRpbGVTaGFwZSk7XHJcbiAgICAgICAgdGlsZUVudGl0eS5hZGRDb21wb25lbnQoZGVmYXVsdE1hdGVyaWFsKTtcclxuXHJcbiAgICAgICAgdGlsZUVudGl0eS5hZGRDb21wb25lbnQoXHJcbiAgICAgICAgICBuZXcgT25DbGljaygoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aWxlRW50aXR5LmdldENvbXBvbmVudChNYXRlcmlhbCkgIT0gcGxheWVyTWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICB0aWxlRW50aXR5LmFkZENvbXBvbmVudE9yUmVwbGFjZShwbGF5ZXJNYXRlcmlhbCk7XHJcbiAgICAgICAgICAgICAgdGhpcy50aWxlc1BhaW50ZWRCeVBsYXllcisrO1xyXG4gICAgICAgICAgICAgIGlmICh0aGlzLnRpbGVzUGFpbnRlZEJ5UGxheWVyID09PSBjb2x1bW5Db3VudCAqIHJvd0NvdW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tcGxldGlvbigpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIHRpbGVFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgICAgICAgbmV3IHV0aWxzLlRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgICAgICAgIG5ldyB1dGlscy5UcmlnZ2VyQm94U2hhcGUoXHJcbiAgICAgICAgICAgICAgbmV3IFZlY3RvcjMoMC4xNSwgMC4xNSwgMC4xNSksXHJcbiAgICAgICAgICAgICAgVmVjdG9yMy5aZXJvKClcclxuICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgMixcclxuICAgICAgICAgICAgMixcclxuICAgICAgICAgICAgKGVudGl0eUVudGVyKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGVudGl0eUVudGVyLmhhc0NvbXBvbmVudChNb3VzZUZvbGxvd1BhdGhDb21wb25lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBWZXJpZmljYSBzZSBvIGF6dWxlam8gZm9pIHBpbnRhZG8gcGVsbyBqb2dhZG9yXHJcbiAgICAgICAgICAgICAgICBpZiAodGlsZUVudGl0eS5nZXRDb21wb25lbnQoTWF0ZXJpYWwpID09IHBsYXllck1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIERpbWludWkgYSB2YXJpw6F2ZWwgZGUgYXp1bGVqb3MgcGludGFkb3NcclxuICAgICAgICAgICAgICAgICAgdGhpcy50aWxlc1BhaW50ZWRCeVBsYXllci0tO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGlsZUVudGl0eS5hZGRDb21wb25lbnRPclJlcGxhY2UobWljZU1hdGVyaWFsKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBTaGFyZWQgcmVzb3VyY2VzIHdoaWNoIG1heSBiZSB1c2VkIGJ5IG11bHRpcGxlIGdhbWVPYmplY3RzLCB0byBpbXByb3ZlIHBlcmZvcm1hbmNlLlxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBzb3VuZHM6IHtcclxuICAgIGJ1dHRvbjogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9idXR0b24ubXAzXCIpLFxyXG4gICAgZG9vclNxdWVhazogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9kb29yX3NxdWVhay5tcDNcIiksXHJcbiAgICBtb3ZlT2JqZWN0MTogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9tb3ZlX29iamVjdDEubXAzXCIpLFxyXG4gICAgbW92ZU9iamVjdDI6IG5ldyBBdWRpb0NsaXAoXCJzb3VuZHMvbW92ZV9vYmplY3QyLm1wM1wiKSxcclxuICAgIHdoaXA6IG5ldyBBdWRpb0NsaXAoXCJzb3VuZHMvcm9vbTMvd2hpcC5tcDNcIiksXHJcbiAgICBhY2Nlc3NHcmFudGVkOiBuZXcgQXVkaW9DbGlwKFwic291bmRzL2FjY2Vzc19ncmFudGVkLm1wM1wiKSxcclxuICAgIGFjY2Vzc0RlbmllZDogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9hY2Nlc3NfZGVuaWVkLm1wM1wiKSxcclxuICAgIHNwb3RsaWdodDogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9zcG90bGlnaHRfb24ubXAzXCIpLFxyXG4gICAgZG9vclNxdWVlazogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9kb29yX3NxdWVhay5tcDNcIiksXHJcbiAgICBmYW5BdWRpbzogbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9mYW4ubXAzXCIpXHJcbiAgfSxcclxuICBtb2RlbHM6IHtcclxuICAgIGJvb2sxOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb200L1B1enpsZTA0X0Jvb2sxLmdsYlwiKSxcclxuICAgIGJvb2syOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb200L1B1enpsZTA0X0Jvb2syLmdsYlwiKSxcclxuICAgIGNhbmRsZUhvbGRlcjogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tNC9QdXp6bGUwNF9DYW5kbGVIb2xkZXIuZ2xiXCIpLFxyXG5cclxuICAgIGRvb3IxOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb20xL1B1enpsZTAxX0Rvb3IuZ2xiXCIpLFxyXG4gICAgZG9vcjI6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTIvUHV6emxlMDJfRG9vci5nbGJcIiksXHJcbiAgICBkb29yMzogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tMy9QdXp6bGUwM19Eb29yLmdsYlwiKSxcclxuICAgIGRvb3I0OiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb200L1B1enpsZTA0X0xpYnJhcnlEb29yLmdsYlwiKSxcclxuICAgIGRvb3I1OiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb201L1B1enpsZTA1X0Rvb3IuZ2xiXCIpLFxyXG4gICAgZG9vcjY6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTYvUHV6emxlMDZfRG9vci5nbGJcIiksXHJcbiAgICBkb29yNzogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tNy9QdXp6bGUwN19Eb29yLmdsYlwiKSxcclxuICAgIGRvb3I4OiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb204L1B1enpsZTA4X0Rvb3IuZ2xiXCIpLFxyXG4gICAgZG9vcjk6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTkvUHV6emxlMDlfRG9vci5nbGJcIiksXHJcblxyXG4gICAgbW91c2VXaWxsOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb205L1B1enpsZTA5X01vdXNlV2lsbC5nbGJcIiksXHJcbiAgICBmYW5Nb2RlbDogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tOS9GYW4uZ2xiXCIpLFxyXG4gICAgZHJhd2VyOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb205L0RyYXdlci5nbGJcIiksXHJcbiAgICBraXRjaGVuTW9kZWw6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTkvUHV6emxlMDlfR2FtZS5nbGJcIiksXHJcblxyXG4gICAgbW91c2U6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTgvTW91c2UuZ2xiXCIpLFxyXG4gICAgdGlja2V0OiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb204L1RpY2tldC5nbGJcIiksXHJcbiAgICBudW1wYWQxOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb201L051bXBhZDEuZ2xiXCIpLFxyXG4gICAgbnVtcGFkMjogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tNi9OdW1wYWQyLmdsYlwiKSxcclxuICAgIGNhcnBldDogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tNS9QdXp6bGUwNV9DYXJwZXQuZ2xiXCIpLFxyXG4gICAgcG9zdGl0OiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb201L1B1enpsZTA1X1Bvc3RpdC5nbGJcIiksXHJcbiAgICBwaWN0dXJlRnJhbWU6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTUvUHV6emxlMDVfUGljdHVyZU1haW4uZ2xiXCIpLFxyXG4gICAgZ2xhc3M6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTQvUHV6emxlMDRfV0dsYXNzLmdsYlwiKSxcclxuICAgIGdsb2JlOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb200L1B1enpsZTA0X0dsb2JlLmdsYlwiKSxcclxuICAgIHBsYW50MTogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tMy9QdXp6bGUwM19QbGFudDEuZ2xiXCIpLFxyXG4gICAgcGxhbnQyOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb20zL1B1enpsZTAzX1BsYW50Mi5nbGJcIiksXHJcbiAgICBwbGFudDM6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTMvUHV6emxlMDNfUGxhbnQzLmdsYlwiKSxcclxuICAgIHBsYW50NDogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tMy9QdXp6bGUwM19QbGFudDQuZ2xiXCIpLFxyXG4gICAgcm91bmRCdXR0b246IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvZ2VuZXJpYy9Sb3VuZF9CdXR0b24uZ2xiXCIpLFxyXG4gICAgc2NlbmU6IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvc2NlbmUuZ2xiXCIpLFxyXG4gICAgc3F1YXJlQnV0dG9uOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb20yL1NxdWFyZV9CdXR0b24uZ2xiXCIpLFxyXG4gICAgdGVsZXNjb3BlOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb200L1B1enpsZTA0X1RlbGVzY29wZS5nbGJcIiksXHJcbiAgICBtdW5hOiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb202L1B1enpsZTA2X011bmEuZ2xiXCIpLFxyXG4gICAgc3BvdGxpZ2h0OiBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb202L3Nwb3RsaWdodGxpZ2h0LmdsYlwiKSxcclxuXHJcbiAgICB0dk9mZjogbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tNy9UVkNvbG9yLmdsYlwiKSxcclxuICAgIHR2T246IG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTcvVFZPcmFuZ2UuZ2xiXCIpLFxyXG4gICAgbGlnaHRPblNyYzogXCJtb2RlbHMvcm9vbTcvUHV6emxlMDdfTGlnaHRPbi5nbGJcIixcclxuICAgIGxpZ2h0T2ZmU3JjOiBcIm1vZGVscy9yb29tNy9QdXp6bGUwN19MaWdodE9mZi5nbGJcIlxyXG4gIH0sXHJcbiAgdGV4dHVyZXM6IHtcclxuICAgIGNsb3NlSGludEJ1dHRvbjogbmV3IFRleHR1cmUoXCJpbWFnZXMvcm9vbTUvYnV0dG9uX2Nsb3NlLnBuZ1wiKSxcclxuXHJcbiAgICBmZXJuSGludDogbmV3IFRleHR1cmUoXCJpbWFnZXMvcm9vbTUvZmVybnBpY3R1cmVIaW50LnBuZ1wiKSxcclxuICAgIHBvc3RpdEhpbnQ6IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL3Jvb201L1Bvc3RpdF8wMDEucG5nXCIpLFxyXG5cclxuICAgIGNsZWFyQnV0dG9uOiBuZXcgVGV4dHVyZShcImltYWdlcy9jb2RlcGFkL3B3ZHBhbmVsX2NsZWFyLnBuZ1wiKSxcclxuICAgIGNsb3NlQnV0dG9uOiBuZXcgVGV4dHVyZShcImltYWdlcy9jb2RlcGFkL2J1dHRvbl9jbG9zZS5wbmdcIiksXHJcbiAgICBlbnRlckJ1dHRvbjogbmV3IFRleHR1cmUoXCJpbWFnZXMvY29kZXBhZC9wd2RwYW5lbF9lbnRlci5wbmdcIiksXHJcbiAgICBpbnB1dEJveDogbmV3IFRleHR1cmUoXCJpbWFnZXMvY29kZXBhZC9wd2RwYW5lbF9pbnB1dC5wbmdcIiksXHJcbiAgICBudW1iZXJCdXR0b246IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL2NvZGVwYWQvcHdkcGFuZWxfYnV0dG9ucy5wbmdcIiksXHJcbiAgICBwYW5lbEJhY2tncm91bmQ6IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL2NvZGVwYWQvcHdkcGFuZWxfYmcucG5nXCIpLFxyXG5cclxuICAgIHRleHRDb250YWluZXI6IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL2RpYWxvZ3MvdGV4dENvbnRhaW5lci5wbmdcIiksXHJcbiAgICBvcHRpb25zQ29udGFpbmVyOiBuZXcgVGV4dHVyZShcImltYWdlcy9kaWFsb2dzL29wdGlvbnNDb250YWluZXIucG5nXCIpLFxyXG4gICAgcGxheWVyUG9ydHJhaXREZWZhdWx0OiBuZXcgVGV4dHVyZShcImltYWdlcy9kaWFsb2dzL3BsYXllcl9kZWZhdWx0LnBuZ1wiLCB7XHJcbiAgICAgIGhhc0FscGhhOiB0cnVlXHJcbiAgICB9KSxcclxuICAgIHBsYXllclBvcnRyYWl0U3VycHJpc2VkOiBuZXcgVGV4dHVyZShcclxuICAgICAgXCJpbWFnZXMvZGlhbG9ncy9wbGF5ZXJfc3VycHJpc2VkLnBuZ1wiLFxyXG4gICAgICB7IGhhc0FscGhhOiB0cnVlIH1cclxuICAgICksXHJcbiAgICBwbGF5ZXJQb3J0cmFpdFRoaW5raW5nOiBuZXcgVGV4dHVyZShcImltYWdlcy9kaWFsb2dzL3BsYXllcl90aGlua2luZy5wbmdcIiwge1xyXG4gICAgICBoYXNBbHBoYTogdHJ1ZVxyXG4gICAgfSksXHJcbiAgICBucGNQb3J0cmFpdERlZmF1bHQ6IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL2RpYWxvZ3MvZG9nX2RlZmF1bHQucG5nXCIsIHtcclxuICAgICAgaGFzQWxwaGE6IHRydWVcclxuICAgIH0pLFxyXG4gICAgbnBjUG9ydHJhaXRTdXJwcmlzZWQ6IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL2RpYWxvZ3MvZG9nX3N1cnByaXNlZC5wbmdcIiwge1xyXG4gICAgICBoYXNBbHBoYTogdHJ1ZVxyXG4gICAgfSksXHJcbiAgICBucGNQb3J0cmFpdFRoaW5raW5nOiBuZXcgVGV4dHVyZShcImltYWdlcy9kaWFsb2dzL2RvZ190aGlua2luZy5wbmdcIiwge1xyXG4gICAgICBoYXNBbHBoYTogdHJ1ZVxyXG4gICAgfSksXHJcbiAgICBidWJibGU6IG5ldyBUZXh0dXJlKFwiaW1hZ2VzL3Jvb205L2J1YmJsZVRleHR1cmUucG5nXCIsIHtcclxuICAgICAgaGFzQWxwaGE6IGZhbHNlXHJcbiAgICB9KVxyXG4gIH1cclxufTtcclxuIiwiaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZVNjZW5lIGV4dGVuZHMgRW50aXR5IHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHJlc291cmNlcy5tb2RlbHMuc2NlbmUpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgcmVzb3VyY2VzIGZyb20gXCIuLi9yZXNvdXJjZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBFbnRpdHkge1xyXG4gIGNvbnN0cnVjdG9yKG1vZGVsOiBHTFRGU2hhcGUsIHRyYW5zZm9ybTogVHJhbmZvcm1Db25zdHJ1Y3RvckFyZ3MpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG1vZGVsKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtKSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IEF1ZGlvU291cmNlKHJlc291cmNlcy5zb3VuZHMuYnV0dG9uKSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IEFuaW1hdG9yKCkpO1xyXG4gICAgdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3IpLmFkZENsaXAoXHJcbiAgICAgIG5ldyBBbmltYXRpb25TdGF0ZShcIkJ1dHRvbl9BY3Rpb25cIiwgeyBsb29waW5nOiBmYWxzZSB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwcmVzcygpOiB2b2lkIHtcclxuICAgIHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yKVxyXG4gICAgICAuZ2V0Q2xpcChcIkJ1dHRvbl9BY3Rpb25cIilcclxuICAgICAgLnN0b3AoKTsgLy8gYnVnIHdvcmthcm91bmRcclxuICAgIHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yKVxyXG4gICAgICAuZ2V0Q2xpcChcIkJ1dHRvbl9BY3Rpb25cIilcclxuICAgICAgLnBsYXkoKTtcclxuICAgIHRoaXMuZ2V0Q29tcG9uZW50KEF1ZGlvU291cmNlKS5wbGF5T25jZSgpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRG9vciBleHRlbmRzIEVudGl0eSB7XHJcbiAgcHVibGljIGlzT3BlbjogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBtb2RlbDogR0xURlNoYXBlLFxyXG4gICAgdHJhbnNmb3JtOiBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncyxcclxuICAgIHNvdW5kOiBBdWRpb0NsaXBcclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG1vZGVsKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtKSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IEFuaW1hdG9yKCkpO1xyXG4gICAgdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3IpLmFkZENsaXAoXHJcbiAgICAgIG5ldyBBbmltYXRpb25TdGF0ZShcIkRvb3JfT3BlblwiLCB7IGxvb3Bpbmc6IGZhbHNlIH0pXHJcbiAgICApO1xyXG4gICAgdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3IpLmFkZENsaXAoXHJcbiAgICAgIG5ldyBBbmltYXRpb25TdGF0ZShcIkRvb3JfQ2xvc2VcIiwgeyBsb29waW5nOiBmYWxzZSB9KVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgQXVkaW9Tb3VyY2Uoc291bmQpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvcGVuRG9vcihwbGF5QXVkaW8gPSB0cnVlKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yKVxyXG4gICAgICAgIC5nZXRDbGlwKFwiRG9vcl9DbG9zZVwiKVxyXG4gICAgICAgIC5zdG9wKCk7IC8vIGJ1ZyB3b3JrYXJvdW5kXHJcbiAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yKVxyXG4gICAgICAgIC5nZXRDbGlwKFwiRG9vcl9PcGVuXCIpXHJcbiAgICAgICAgLnBsYXkoKTtcclxuXHJcbiAgICAgIGlmIChwbGF5QXVkaW8pIHtcclxuICAgICAgICB0aGlzLmdldENvbXBvbmVudChBdWRpb1NvdXJjZSkucGxheU9uY2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGNsb3NlRG9vcihwbGF5QXVkaW8gPSB0cnVlKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5pc09wZW4pIHtcclxuICAgICAgdGhpcy5pc09wZW4gPSBmYWxzZTtcclxuXHJcbiAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yKVxyXG4gICAgICAgIC5nZXRDbGlwKFwiRG9vcl9PcGVuXCIpXHJcbiAgICAgICAgLnN0b3AoKTsgLy8gYnVnIHdvcmthcm91bmRcclxuICAgICAgdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3IpXHJcbiAgICAgICAgLmdldENsaXAoXCJEb29yX0Nsb3NlXCIpXHJcbiAgICAgICAgLnBsYXkoKTtcclxuXHJcbiAgICAgIGlmIChwbGF5QXVkaW8pIHtcclxuICAgICAgICB0aGlzLmdldENvbXBvbmVudChBdWRpb1NvdXJjZSkucGxheU9uY2UoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHRvZ2dsZURvb3IocGxheUF1ZGlvID0gdHJ1ZSk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaXNPcGVuKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEb29yKHBsYXlBdWRpbyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9wZW5Eb29yKHBsYXlBdWRpbyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBNb2RlbCBleHRlbmRzIEVudGl0eSB7XHJcbiAgY29uc3RydWN0b3IobW9kZWw6IEdMVEZTaGFwZSwgdHJhbnNmb3JtOiBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIGVuZ2luZS5hZGRFbnRpdHkodGhpcyk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0pKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG1vZGVsKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBNb3VzZSBleHRlbmRzIEVudGl0eSB7XHJcbiAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIGVuZ2luZS5hZGRFbnRpdHkodGhpcyk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQocmVzb3VyY2VzLm1vZGVscy5tb3VzZSk7XHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybSkpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBBbmltYXRvcigpKTtcclxuICAgIHRoaXMuZ2V0Q29tcG9uZW50KEFuaW1hdG9yKS5hZGRDbGlwKG5ldyBBbmltYXRpb25TdGF0ZShcIk1vdXNlX0FjdGlvblwiKSk7XHJcblxyXG4gICAgdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3IpXHJcbiAgICAgIC5nZXRDbGlwKFwiTW91c2VfQWN0aW9uXCIpXHJcbiAgICAgIC5wbGF5KCk7XHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZShcclxuICAgICAgICAgIG5ldyBWZWN0b3IzKDAuMDUsIDAuMDUsIDAuMDUpLFxyXG4gICAgICAgICAgVmVjdG9yMy5aZXJvKClcclxuICAgICAgICApLFxyXG4gICAgICAgIDIsXHJcbiAgICAgICAgMlxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTW92YWJsZUVudGl0eSBleHRlbmRzIEVudGl0eSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBtb2RlbDogR0xURlNoYXBlLFxyXG4gICAgdHJhbnNmb3JtOiBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncyxcclxuICAgIHNvdW5kOiBBdWRpb0NsaXAsXHJcbiAgICBkZWx0YVBvc2l0aW9uOiBWZWN0b3IzLFxyXG4gICAgbW92ZVRpbWUgPSAwLjVcclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG1vZGVsKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtKSk7XHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgQXVkaW9Tb3VyY2Uoc291bmQpKTtcclxuXHJcbiAgICBjb25zdCBzdGFydFBvcyA9IHRyYW5zZm9ybS5wb3NpdGlvbjtcclxuICAgIGNvbnN0IGVuZFBvcyA9IHRyYW5zZm9ybS5wb3NpdGlvbi5hZGQoZGVsdGFQb3NpdGlvbik7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5Ub2dnbGVDb21wb25lbnQodXRpbHMuVG9nZ2xlU3RhdGUuT2ZmLCAodmFsdWUpOiB2b2lkID0+IHtcclxuICAgICAgICBpZiAodmFsdWUgPT0gdXRpbHMuVG9nZ2xlU3RhdGUuT24pIHtcclxuICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50T3JSZXBsYWNlKFxyXG4gICAgICAgICAgICBuZXcgdXRpbHMuTW92ZVRyYW5zZm9ybUNvbXBvbmVudChcclxuICAgICAgICAgICAgICB0aGlzLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgIGVuZFBvcyxcclxuICAgICAgICAgICAgICBtb3ZlVGltZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmFkZENvbXBvbmVudE9yUmVwbGFjZShcclxuICAgICAgICAgICAgbmV3IHV0aWxzLk1vdmVUcmFuc2Zvcm1Db21wb25lbnQoXHJcbiAgICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5wb3NpdGlvbixcclxuICAgICAgICAgICAgICBzdGFydFBvcyxcclxuICAgICAgICAgICAgICBtb3ZlVGltZVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoQXVkaW9Tb3VyY2UpLnBsYXlPbmNlKCk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgcmVzb3VyY2VzIGZyb20gXCIuLi9yZXNvdXJjZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBOdW1QYWRMb2NrIGV4dGVuZHMgRW50aXR5IHtcclxuICBjb25zdHJ1Y3Rvcihtb2RlbDogR0xURlNoYXBlKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgZW5naW5lLmFkZEVudGl0eSh0aGlzKTtcclxuXHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChtb2RlbCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGxheUJ1dHRvblByZXNzZWQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjbGlwID0gdGhpcy5hZGRDb21wb25lbnRPclJlcGxhY2UoXHJcbiAgICAgIG5ldyBBdWRpb1NvdXJjZShyZXNvdXJjZXMuc291bmRzLmJ1dHRvbilcclxuICAgICk7XHJcbiAgICBjbGlwLnBsYXlPbmNlKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgcGxheUFjY2Vzc0dyYW50ZWQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjbGlwID0gdGhpcy5hZGRDb21wb25lbnRPclJlcGxhY2UoXHJcbiAgICAgIG5ldyBBdWRpb1NvdXJjZShyZXNvdXJjZXMuc291bmRzLmFjY2Vzc0dyYW50ZWQpXHJcbiAgICApO1xyXG4gICAgY2xpcC5wbGF5T25jZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHBsYXlBY2Nlc3NEZW5pZWQoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjbGlwID0gdGhpcy5hZGRDb21wb25lbnRPclJlcGxhY2UoXHJcbiAgICAgIG5ldyBBdWRpb1NvdXJjZShyZXNvdXJjZXMuc291bmRzLmFjY2Vzc0RlbmllZClcclxuICAgICk7XHJcbiAgICBjbGlwLnBsYXlPbmNlKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuXHJcbi8qKlxyXG4gKiBBbiBvYmplY3Qgd2hpY2ggcm90YXRlcyBiYWNrIGFuZCBmb3J0aCB3aGVuIHRvZ2dsZWQuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUm90YXRhYmxlRW50aXR5IGV4dGVuZHMgRW50aXR5IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIG1vZGVsOiBHTFRGU2hhcGUsXHJcbiAgICB0cmFuc2Zvcm06IFRyYW5mb3JtQ29uc3RydWN0b3JBcmdzLFxyXG4gICAgYXVkaW86IEF1ZGlvQ2xpcCxcclxuICAgIHJvdGF0aW9uOiBRdWF0ZXJuaW9uXHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgZW5naW5lLmFkZEVudGl0eSh0aGlzKTtcclxuXHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChtb2RlbCk7XHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgVHJhbnNmb3JtKHRyYW5zZm9ybSkpO1xyXG5cclxuICAgIGlmIChhdWRpbykge1xyXG4gICAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgQXVkaW9Tb3VyY2UoYXVkaW8pKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdGFydFJvdCA9IHRyYW5zZm9ybS5yb3RhdGlvbjtcclxuICAgIGNvbnN0IGVuZFJvdCA9IHJvdGF0aW9uO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KFxyXG4gICAgICBuZXcgdXRpbHMuVG9nZ2xlQ29tcG9uZW50KHV0aWxzLlRvZ2dsZVN0YXRlLk9mZiwgKHZhbHVlKTogdm9pZCA9PiB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09IHV0aWxzLlRvZ2dsZVN0YXRlLk9uKSB7XHJcbiAgICAgICAgICB0aGlzLmFkZENvbXBvbmVudE9yUmVwbGFjZShcclxuICAgICAgICAgICAgbmV3IHV0aWxzLlJvdGF0ZVRyYW5zZm9ybUNvbXBvbmVudChcclxuICAgICAgICAgICAgICB0aGlzLmdldENvbXBvbmVudChUcmFuc2Zvcm0pLnJvdGF0aW9uLFxyXG4gICAgICAgICAgICAgIGVuZFJvdCxcclxuICAgICAgICAgICAgICAwLjVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5hZGRDb21wb25lbnRPclJlcGxhY2UoXHJcbiAgICAgICAgICAgIG5ldyB1dGlscy5Sb3RhdGVUcmFuc2Zvcm1Db21wb25lbnQoXHJcbiAgICAgICAgICAgICAgdGhpcy5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5yb3RhdGlvbixcclxuICAgICAgICAgICAgICBzdGFydFJvdCxcclxuICAgICAgICAgICAgICAwLjVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZ2V0Q29tcG9uZW50KEF1ZGlvU291cmNlKS5wbGF5T25jZSgpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcG90bGlnaHQgZXh0ZW5kcyBFbnRpdHkge1xyXG4gIGNvbnN0cnVjdG9yKHRyYW5zZm9ybTogVHJhbmZvcm1Db25zdHJ1Y3RvckFyZ3MsIGhpZGRlbk51bWJlclZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtKSk7XHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChuZXcgQXVkaW9Tb3VyY2UocmVzb3VyY2VzLnNvdW5kcy5zcG90bGlnaHQpKTtcclxuXHJcbiAgICB0aGlzLmFkZENvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRvZ2dsZUNvbXBvbmVudCh1dGlscy5Ub2dnbGVTdGF0ZS5PZmYsIHZhbHVlID0+IHtcclxuICAgICAgICBpZiAodmFsdWUgPT0gdXRpbHMuVG9nZ2xlU3RhdGUuT24pIHtcclxuICAgICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KHJlc291cmNlcy5tb2RlbHMuc3BvdGxpZ2h0KTtcclxuXHJcbiAgICAgICAgICBjb25zdCBoaWRkZW5OdW1iZXIgPSBuZXcgRW50aXR5KCk7XHJcbiAgICAgICAgICBoaWRkZW5OdW1iZXIuYWRkQ29tcG9uZW50KG5ldyBUZXh0U2hhcGUoKSk7XHJcbiAgICAgICAgICBoaWRkZW5OdW1iZXIuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkudmFsdWUgPSBoaWRkZW5OdW1iZXJWYWx1ZTtcclxuICAgICAgICAgIGhpZGRlbk51bWJlci5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS5mb250U2l6ZSA9IDU7XHJcblxyXG4gICAgICAgICAgaGlkZGVuTnVtYmVyLnNldFBhcmVudCh0aGlzKTtcclxuICAgICAgICAgIGhpZGRlbk51bWJlci5hZGRDb21wb25lbnQoXHJcbiAgICAgICAgICAgIG5ldyBUcmFuc2Zvcm0oeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMCwgMC45LCAtMC40KSB9KVxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICB0aGlzLmdldENvbXBvbmVudChBdWRpb1NvdXJjZSkucGxheU9uY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgcmVzb3VyY2VzIGZyb20gXCIuLi9yZXNvdXJjZXNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBUaWNrZXQgZXh0ZW5kcyBFbnRpdHkge1xyXG4gIGNvbnN0cnVjdG9yKHRyYW5zZm9ybTogVHJhbmZvcm1Db25zdHJ1Y3RvckFyZ3MpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICBlbmdpbmUuYWRkRW50aXR5KHRoaXMpO1xyXG5cclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KHJlc291cmNlcy5tb2RlbHMudGlja2V0KTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm0odHJhbnNmb3JtKSk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IEFuaW1hdG9yKCkpO1xyXG4gICAgdGhpcy5nZXRDb21wb25lbnQoQW5pbWF0b3IpLmFkZENsaXAoXHJcbiAgICAgIG5ldyBBbmltYXRpb25TdGF0ZShcIlRpY2tldF9BY3Rpb25cIiwgeyBsb29waW5nOiBmYWxzZSB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIGVtaXRUaWNrZXQoKSB7XHJcbiAgICB0aGlzLmdldENvbXBvbmVudChBbmltYXRvcilcclxuICAgICAgLmdldENsaXAoXCJUaWNrZXRfQWN0aW9uXCIpXHJcbiAgICAgIC5wbGF5KCk7XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBVbSB0ZW1wb3JpemFkb3IgcXVlIHBvZGUgc2VyIGNvbG9jYWRvIGVtIHVtYSBwYXJlZGUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGltZXIgZXh0ZW5kcyBFbnRpdHkge1xyXG4gIC8vIEFybWF6ZW5hIGEgZW50aWRhZGUgZGUgdGV4dG8gcGFyYSB1c28gbm8gbcOpdG9kbyBhYmFpeG9cclxuXHJcbiAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBUcmFuZm9ybUNvbnN0cnVjdG9yQXJncykge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIGVuZ2luZS5hZGRFbnRpdHkodGhpcyk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0pKTtcclxuXHJcbiAgICAvLyBPIHZhbG9yIGEgc2VyIGV4aWJpZG8gc2Vyw6EgY29udHJvbGFkbyBwZWxhIHByw7NwcmlhIGNlbmFcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUZXh0U2hhcGUoKSk7XHJcbiAgICB0aGlzLmdldENvbXBvbmVudChUZXh0U2hhcGUpLmNvbG9yID0gQ29sb3IzLlJlZCgpO1xyXG4gICAgdGhpcy5nZXRDb21wb25lbnQoVGV4dFNoYXBlKS5mb250U2l6ZSA9IDU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGZvcm1hdFRpbWVTdHJpbmcoc2Vjb25kczogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IG1pbnMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MCk7XHJcbiAgICBjb25zdCBzZWNzID0gTWF0aC5mbG9vcihzZWNvbmRzICUgNjApO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgbWlucy50b0xvY2FsZVN0cmluZyh1bmRlZmluZWQsIHsgbWluaW11bUludGVnZXJEaWdpdHM6IDIgfSkgK1xyXG4gICAgICBcIjpcIiArXHJcbiAgICAgIHNlY3MudG9Mb2NhbGVTdHJpbmcodW5kZWZpbmVkLCB7IG1pbmltdW1JbnRlZ2VyRGlnaXRzOiAyIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLy8gRXN0ZSBtw6l0b2RvIHBvZGUgc2VyIGNoYW1hZG8gYSBxdWFscXVlciBtb21lbnRvIHBhcmEgYWx0ZXJhciBvIG7Dum1lcm8gZGUgc2VndW5kb3Mgbm8gcmVsw7NnaW9cclxuICBwdWJsaWMgdXBkYXRlVGltZVN0cmluZyhzZWNvbmRzOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMuZ2V0Q29tcG9uZW50KFRleHRTaGFwZSkudmFsdWUgPSB0aGlzLmZvcm1hdFRpbWVTdHJpbmcoc2Vjb25kcyk7XHJcbiAgfVxyXG59XHJcbiIsIkBDb21wb25lbnQoXCJ0b2dnbGVNb2RlbENvbXBvbmVudFwiKVxyXG5leHBvcnQgY2xhc3MgVG9nZ2xlTW9kZWxDb21wb25lbnQge1xyXG4gIHByaXZhdGUgb25Nb2RlbDogR0xURlNoYXBlO1xyXG4gIHByaXZhdGUgb2ZmTW9kZWw6IEdMVEZTaGFwZTtcclxuXHJcbiAgY29uc3RydWN0b3IoZW50aXR5OiBJRW50aXR5LCBvbk1vZGVsOiBHTFRGU2hhcGUsIG9mZk1vZGVsOiBHTFRGU2hhcGUpIHtcclxuICAgIHRoaXMub25Nb2RlbCA9IG9uTW9kZWw7XHJcbiAgICBjb25zdCBvbkVudGl0eSA9IG5ldyBFbnRpdHkoKTtcclxuICAgIG9uRW50aXR5LmFkZENvbXBvbmVudCh0aGlzLm9uTW9kZWwpO1xyXG4gICAgb25FbnRpdHkuc2V0UGFyZW50KGVudGl0eSk7XHJcblxyXG4gICAgdGhpcy5vZmZNb2RlbCA9IG9mZk1vZGVsO1xyXG4gICAgY29uc3Qgb2ZmRW50aXR5ID0gbmV3IEVudGl0eSgpO1xyXG4gICAgb2ZmRW50aXR5LmFkZENvbXBvbmVudCh0aGlzLm9mZk1vZGVsKTtcclxuICAgIG9mZkVudGl0eS5zZXRQYXJlbnQoZW50aXR5KTtcclxuXHJcbiAgICB0aGlzLm9uTW9kZWwudmlzaWJsZSA9IGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgaXNPbigpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLm9uTW9kZWwudmlzaWJsZTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZSgpIHtcclxuICAgIGlmICh0aGlzLmlzT24oKSkge1xyXG4gICAgICB0aGlzLm9uTW9kZWwudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLm9mZk1vZGVsLnZpc2libGUgPSB0cnVlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vZmZNb2RlbC52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgIHRoaXMub25Nb2RlbC52aXNpYmxlID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVG9nZ2xlTW9kZWxDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90b2dnbGVNb2RlbENvbXBvbmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFRvZ2dsZUVudGl0eSBleHRlbmRzIEVudGl0eSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICB0cmFuc2Zvcm06IFRyYW5mb3JtQ29uc3RydWN0b3JBcmdzLFxyXG4gICAgb25Nb2RlbDogR0xURlNoYXBlLFxyXG4gICAgb2ZmTW9kZWw6IEdMVEZTaGFwZVxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIGVuZ2luZS5hZGRFbnRpdHkodGhpcyk7XHJcblxyXG4gICAgdGhpcy5hZGRDb21wb25lbnQobmV3IFRyYW5zZm9ybSh0cmFuc2Zvcm0pKTtcclxuICAgIHRoaXMuYWRkQ29tcG9uZW50KG5ldyBUb2dnbGVNb2RlbENvbXBvbmVudCh0aGlzLCBvbk1vZGVsLCBvZmZNb2RlbCkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBBcmNhZGVTY3JlZW4gfSBmcm9tIFwiLi9hcmNhZGVTY3JlZW5cIjtcclxuaW1wb3J0IHsgQmFzZVNjZW5lIH0gZnJvbSBcIi4vYmFzZVNjZW5lXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBEb29yIH0gZnJvbSBcIi4vZG9vclwiO1xyXG5pbXBvcnQgeyBNb2RlbCB9IGZyb20gXCIuL21vZGVsXCI7XHJcbmltcG9ydCB7IE1vdXNlIH0gZnJvbSBcIi4vbW91c2VcIjtcclxuaW1wb3J0IHsgTW92YWJsZUVudGl0eSB9IGZyb20gXCIuL21vdmFibGVFbnRpdHlcIjtcclxuaW1wb3J0IHsgTnVtUGFkTG9jayB9IGZyb20gXCIuL251bVBhZExvY2tcIjtcclxuaW1wb3J0IHsgUm90YXRhYmxlRW50aXR5IH0gZnJvbSBcIi4vcm90YXRhYmxlRW50aXR5XCI7XHJcbmltcG9ydCB7IFNwb3RsaWdodCB9IGZyb20gXCIuL3Nwb3RsaWdodFwiO1xyXG5pbXBvcnQgeyBUaWNrZXQgfSBmcm9tIFwiLi90aWNrZXRcIjtcclxuaW1wb3J0IHsgVGltZXIgfSBmcm9tIFwiLi90aW1lclwiO1xyXG5pbXBvcnQgeyBUb2dnbGVFbnRpdHkgfSBmcm9tIFwiLi90b2dnbGVFbnRpdHlcIjtcclxuXHJcbmV4cG9ydCB7XHJcbiAgQXJjYWRlU2NyZWVuLFxyXG4gIEJhc2VTY2VuZSxcclxuICBCdXR0b24sXHJcbiAgRG9vcixcclxuICBNb2RlbCxcclxuICBNb3VzZSxcclxuICBNb3ZhYmxlRW50aXR5LFxyXG4gIE51bVBhZExvY2ssXHJcbiAgUm90YXRhYmxlRW50aXR5LFxyXG4gIFNwb3RsaWdodCxcclxuICBUaWNrZXQsXHJcbiAgVGltZXIsXHJcbiAgVG9nZ2xlRW50aXR5XHJcbn07XHJcbiIsIi8vIFN3aXRjaCB0aGUgaW1wb3J0IHRvIHVzZSB0aGUgaW5kZXhcclxuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgeyBEb29yLCBNb3ZhYmxlRW50aXR5IH0gZnJvbSBcIi4uL2dhbWVPYmplY3RzL2luZGV4XCI7XHJcbmltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVJvb20xKCk6IHZvaWQge1xyXG4gIGNvbnN0IGRvb3IgPSBuZXcgRG9vcihcclxuICAgIHJlc291cmNlcy5tb2RlbHMuZG9vcjEsXHJcbiAgICB7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMS4xOCwgMTAuOCwgMjQuNSkgfSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMuZG9vclNxdWVha1xyXG4gICk7XHJcblxyXG4gIC8vIFVtYSBlc3TDoXR1YSBibG9xdWVpYSBhIGVudHJhZGFcclxuICBjb25zdCBtdW5hU3RhdHVlID0gbmV3IE1vdmFibGVFbnRpdHkoXHJcbiAgICByZXNvdXJjZXMubW9kZWxzLm11bmEsXHJcbiAgICB7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMS44OSwgMTAuOCwgMjMuMDcpLFxyXG4gICAgICByb3RhdGlvbjogUXVhdGVybmlvbi5FdWxlcigwLCAtOTAsIDApIC8vIFJvdGFjaW9uYSBlbSAxODAgZ3JhdXMgZW0gdG9ybm8gZG8gZWl4byBZXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5tb3ZlT2JqZWN0MSxcclxuICAgIG5ldyBWZWN0b3IzKDIsIDAsIDApLFxyXG4gICAgMS41XHJcbiAgKTtcclxuXHJcbiAgZG9vci5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIG11bmFTdGF0dWUuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICAgIGRvb3Iub3BlbkRvb3IoKTtcclxuICAgIH0pXHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcbmltcG9ydCB7IEJ1dHRvbiwgRG9vciwgVGltZXIsIE1vdmFibGVFbnRpdHkgIH0gZnJvbSBcIi4uL2dhbWVPYmplY3RzL2luZGV4XCI7XHJcbmltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5cclxuY29uc3Qgb3BlbkRvb3JUaW1lID0gNTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVSb29tMigpOiB2b2lkIHtcclxuICBjb25zdCBkb29yID0gbmV3IERvb3IoXHJcbiAgICByZXNvdXJjZXMubW9kZWxzLmRvb3IyLFxyXG4gICAgeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjQuMSwgNS41MTYzNCwgMjQuOSkgfSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMuZG9vclNxdWVha1xyXG4gICk7XHJcblxyXG4gIGNvbnN0IGNvdW50ZG93bkNsb2NrID0gbmV3IFRpbWVyKHtcclxuICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyNS4xMjcyLCA5LjUxMTE5LCAyNS4yMTE2KSxcclxuICAgIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLkV1bGVyKDIwLCAxODAsIDApXHJcbiAgfSk7XHJcbiAgY291bnRkb3duQ2xvY2sudXBkYXRlVGltZVN0cmluZyhvcGVuRG9vclRpbWUpO1xyXG5cclxuICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uKHJlc291cmNlcy5tb2RlbHMuc3F1YXJlQnV0dG9uLCB7XHJcbiAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjYuMzcxNCwgNi44OSwgMjYuODkzNilcclxuICB9KTtcclxuXHJcbiAgY29uc3QgbXVuYVN0YXR1ZSA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5tdW5hLFxyXG4gICAgeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjUuMTQsIDUuNTE2MzQsIDI2LjIyKSxcclxuICAgICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMCwgOTAsIDApIC8vIFJvdGFjaW9uYSBlbSAxODAgZ3JhdXMgZW0gdG9ybm8gZG8gZWl4byBZXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICByZXNvdXJjZXMuc291bmRzLm1vdmVPYmplY3QxLFxyXG4gICAgbmV3IFZlY3RvcjMoMCwgMCwgNClcclxuICApO1xyXG5cclxuICBidXR0b24uYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBpZiAoIWNvdW50ZG93bkNsb2NrLmhhc0NvbXBvbmVudCh1dGlscy5JbnRlcnZhbCkpIHtcclxuICAgICAgICBidXR0b24ucHJlc3MoKTtcclxuICAgICAgICBkb29yLm9wZW5Eb29yKCk7XHJcbiAgICAgICAgbXVuYVN0YXR1ZS5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuXHJcbiAgICAgICAgbGV0IHRpbWVSZW1haW5pbmcgPSBvcGVuRG9vclRpbWU7XHJcbiAgICAgICAgY291bnRkb3duQ2xvY2suYWRkQ29tcG9uZW50KFxyXG4gICAgICAgICAgbmV3IHV0aWxzLkludGVydmFsKDEwMDAsICgpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgdGltZVJlbWFpbmluZy0tO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRpbWVSZW1haW5pbmcgPiAwKSB7XHJcbiAgICAgICAgICAgICAgY291bnRkb3duQ2xvY2sudXBkYXRlVGltZVN0cmluZyh0aW1lUmVtYWluaW5nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjb3VudGRvd25DbG9jay5yZW1vdmVDb21wb25lbnQodXRpbHMuSW50ZXJ2YWwpO1xyXG5cclxuICAgICAgICAgICAgICBkb29yLmNsb3NlRG9vcigpO1xyXG4gICAgICAgICAgICAgIG11bmFTdGF0dWUuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkudG9nZ2xlKCk7XHJcblxyXG4gICAgICAgICAgICAgIGNvdW50ZG93bkNsb2NrLnVwZGF0ZVRpbWVTdHJpbmcob3BlbkRvb3JUaW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgeyBCdXR0b24sIERvb3IsIE1vdmFibGVFbnRpdHkgfSBmcm9tIFwiLi4vZ2FtZU9iamVjdHMvaW5kZXhcIjtcclxuaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlUm9vbTMoKTogdm9pZCB7XHJcbiAgY29uc3QgZG9vciA9IG5ldyBEb29yKFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5kb29yMyxcclxuICAgIHsgcG9zaXRpb246IG5ldyBWZWN0b3IzKDI0LjExNjYsIDcuMTcsIDE1Ljc4KSB9LFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy53aGlwXHJcbiAgKTtcclxuICBkb29yLmlzT3BlbiA9IHRydWU7XHJcblxyXG4gIGNvbnN0IHRyaWdnZXIgPSBuZXcgRW50aXR5KCk7XHJcbiAgZW5naW5lLmFkZEVudGl0eSh0cmlnZ2VyKTtcclxuICB0cmlnZ2VyLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBUcmFuc2Zvcm0oeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjUuNSwgNy4xNywgMTkuNSkgfSlcclxuICApO1xyXG4gIHRyaWdnZXIuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IHV0aWxzLlRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5UcmlnZ2VyQm94U2hhcGUobmV3IFZlY3RvcjMoNC4yLCAzLCA4KSwgVmVjdG9yMy5aZXJvKCkpLFxyXG4gICAgICAwLFxyXG4gICAgICAwLFxyXG4gICAgICBudWxsLFxyXG4gICAgICBudWxsLFxyXG4gICAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgZG9vci5jbG9zZURvb3IoKTtcclxuICAgICAgfSxcclxuICAgICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGRvb3Iub3BlbkRvb3IoZmFsc2UpO1xyXG4gICAgICB9XHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgYnV0dG9uID0gbmV3IEJ1dHRvbihyZXNvdXJjZXMubW9kZWxzLnJvdW5kQnV0dG9uLCB7XHJcbiAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjIuNDQ1NiwgNS45MjcwNiwgMjQuMTgpXHJcbiAgfSk7XHJcblxyXG4gIGJ1dHRvbi5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIGJ1dHRvbi5wcmVzcygpO1xyXG4gICAgICBkb29yLm9wZW5Eb29yKGZhbHNlKTtcclxuICAgICAgdHJpZ2dlci5nZXRDb21wb25lbnQodXRpbHMuVHJpZ2dlckNvbXBvbmVudCkuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxuICBjb25zdCBmZXJuMSA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5wbGFudDEsXHJcbiAgICB7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMy4yNDg5LCA1LjUwNzEsIDIzLjgxMykgfSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMubW92ZU9iamVjdDEsXHJcbiAgICBuZXcgVmVjdG9yMygwLCAwLCAtMC41KVxyXG4gICk7XHJcbiAgZmVybjEuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBmZXJuMS5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgY29uc3QgZmVybjIgPSBuZXcgTW92YWJsZUVudGl0eShcclxuICAgIHJlc291cmNlcy5tb2RlbHMucGxhbnQyLFxyXG4gICAgeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjYuOTM1NiwgNS41MjAwNiwgMjMuNDgxNykgfSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMubW92ZU9iamVjdDEsXHJcbiAgICBuZXcgVmVjdG9yMygwLCAwLCAtMC41KVxyXG4gICk7XHJcbiAgZmVybjIuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBmZXJuMi5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuICBjb25zdCBmZXJuMyA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5wbGFudDMsXHJcbiAgICB7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMy40NTEzLCA1LjUwNTcxLCAxNi44MjE4KSB9LFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5tb3ZlT2JqZWN0MSxcclxuICAgIG5ldyBWZWN0b3IzKDAsIDAsIDAuNSlcclxuICApO1xyXG4gIGZlcm4zLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBPblBvaW50ZXJEb3duKCgpOiB2b2lkID0+IHtcclxuICAgICAgZmVybjMuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICB9KVxyXG4gICk7XHJcbiAgY29uc3QgZmVybjQgPSBuZXcgTW92YWJsZUVudGl0eShcclxuICAgIHJlc291cmNlcy5tb2RlbHMucGxhbnQ0LFxyXG4gICAgeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjYuOTg3OCwgNS41MTUxMSwgMTYuODI3OSkgfSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMubW92ZU9iamVjdDEsXHJcbiAgICBuZXcgVmVjdG9yMygwLCAwLCAwLjUpXHJcbiAgKTtcclxuICBmZXJuNC5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIGZlcm40LmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgfSlcclxuICApO1xyXG59XHJcbiIsIi8vIEltcG9ydGFuZG8gZW50aWRhZGVzIG3Ds3ZlaXMgZSByb3RhY2lvbsOhdmVpcyBlIG9zIHV0aWxpdMOhcmlvcyBuZWNlc3PDoXJpb3NcclxuaW1wb3J0IHsgTW92YWJsZUVudGl0eSwgUm90YXRhYmxlRW50aXR5IH0gZnJvbSBcIi4uL2dhbWVPYmplY3RzL2luZGV4XCI7XHJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcblxyXG4vLyBGdW7Dp8OjbyBwYXJhIGNyaWFyIGEgc2FsYSA0XHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVSb29tNCgpOiB2b2lkIHtcclxuICAvLyBDcmlhbmRvIHVtYSBlc3RhbnRlIG3Ds3ZlbFxyXG4gIGNvbnN0IGJvb2tzaGVsZiA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5kb29yNCxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjAuNjU1NywgNS40OTk2LCAxNS4wNDEpXHJcbiAgICB9KSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMubW92ZU9iamVjdDEsXHJcbiAgICBuZXcgVmVjdG9yMygxLjUsIDAsIDApLFxyXG4gICAgM1xyXG4gICk7XHJcblxyXG4gIC8vIENyaWFuZG8gdW0gbGl2cm8gbcOzdmVsXHJcbiAgY29uc3QgbW92YWJsZUJvb2sgPSBuZXcgTW92YWJsZUVudGl0eShcclxuICAgIHJlc291cmNlcy5tb2RlbHMuYm9vazIsXHJcbiAgICBuZXcgVHJhbnNmb3JtKHtcclxuICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDIwLjQxLCA2LjQxMTgsIDEwLjQ5MjIpXHJcbiAgICB9KSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMubW92ZU9iamVjdDEsXHJcbiAgICBuZXcgVmVjdG9yMygwLCAwLCAtMC4yKVxyXG4gICk7XHJcbiAgbW92YWJsZUJvb2suYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBtb3ZhYmxlQm9vay5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgLy8gQ3JpYW5kbyB1bSBjb3BvIGRlIHZpbmhvIG3Ds3ZlbFxyXG4gIGNvbnN0IHdpbmVHbGFzcyA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5nbGFzcyxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjUuNzUwNSwgNi45NTc4NiwgMTAuNTkxNylcclxuICAgIH0pLFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5tb3ZlT2JqZWN0MixcclxuICAgIG5ldyBWZWN0b3IzKDAuMiwgMCwgMClcclxuICApO1xyXG4gIHdpbmVHbGFzcy5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIHdpbmVHbGFzcy5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgLy8gQ3JpYW5kbyB1bSB0ZWxlc2PDs3BpbyByb3RhY2lvbsOhdmVsXHJcbiAgY29uc3QgdGVsZXNjb3BlID0gbmV3IFJvdGF0YWJsZUVudGl0eShcclxuICAgIHJlc291cmNlcy5tb2RlbHMudGVsZXNjb3BlLFxyXG4gICAgbmV3IFRyYW5zZm9ybSh7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMi42NTU0LCA3LjAyNjE1LCAxMC42MjA4KVxyXG4gICAgfSksXHJcbiAgICByZXNvdXJjZXMuc291bmRzLm1vdmVPYmplY3QxLFxyXG4gICAgUXVhdGVybmlvbi5FdWxlcigwLCAxMjcsIDApXHJcbiAgKTtcclxuICB0ZWxlc2NvcGUuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICB0ZWxlc2NvcGUuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIENyaWFuZG8gdW0gZ2xvYm8gdGVycmVzdHJlIHJvdGFjaW9uw6F2ZWxcclxuICBjb25zdCBnbG9iZSA9IG5ldyBSb3RhdGFibGVFbnRpdHkoXHJcbiAgICByZXNvdXJjZXMubW9kZWxzLmdsb2JlLFxyXG4gICAgbmV3IFRyYW5zZm9ybSh7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMS4yMTkxLCA3LjExMjM0LCAxMC42ODE3KSxcclxuICAgICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMC4xNDYsIDM0LjksIC0zMy44KVxyXG4gICAgfSksXHJcbiAgICByZXNvdXJjZXMuc291bmRzLm1vdmVPYmplY3QxLFxyXG4gICAgUXVhdGVybmlvbi5FdWxlcigxNzQsIC0yNi40MywgLTE0OS4zNylcclxuICApO1xyXG5cclxuICBnbG9iZS5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIGdsb2JlLmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxuICAvLyBDcmlhbmRvIHVtIGxpdnJvIHJvdGFjaW9uw6F2ZWxcclxuICBjb25zdCByb3RhdGFibGVCb29rID0gbmV3IFJvdGF0YWJsZUVudGl0eShcclxuICAgIHJlc291cmNlcy5tb2RlbHMuYm9vazEsXHJcbiAgICBuZXcgVHJhbnNmb3JtKHtcclxuICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDE1LjgzMjEsIDcuODMwOTUsIDE0LjEyNTIpXHJcbiAgICB9KSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMubW92ZU9iamVjdDEsXHJcbiAgICBRdWF0ZXJuaW9uLkV1bGVyKDAsIDAsIC0yNSlcclxuICApO1xyXG5cclxuICByb3RhdGFibGVCb29rLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBPblBvaW50ZXJEb3duKCgpOiB2b2lkID0+IHtcclxuICAgICAgcm90YXRhYmxlQm9vay5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgLy8gQ3JpYW5kbyB1bSBzdXBvcnRlIHBhcmEgdmVsYXMgcm90YWNpb27DoXZlbFxyXG4gIGNvbnN0IGNhbmRsZUhvbGRlciA9IG5ldyBSb3RhdGFibGVFbnRpdHkoXHJcbiAgICByZXNvdXJjZXMubW9kZWxzLmNhbmRsZUhvbGRlcixcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMTcuNTA1NiwgNy42MTYxMSwgMTUuMzgzNSlcclxuICAgIH0pLFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5tb3ZlT2JqZWN0MixcclxuICAgIFF1YXRlcm5pb24uRXVsZXIoMCwgMCwgMzApXHJcbiAgKTtcclxuXHJcbiAgY2FuZGxlSG9sZGVyLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBPblBvaW50ZXJEb3duKCgpOiB2b2lkID0+IHtcclxuICAgICAgY2FuZGxlSG9sZGVyLmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgICBib29rc2hlbGYuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICB9KVxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcblxyXG4vKipcclxuICogQ2xhc3NlIHBhcmEgZXhpYmlyIGRpY2FzIGRlIGltYWdlbS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUhpbnQge1xyXG4gIC8vIEV4cG9yIG8gY29udMOqaW5lciBwYXJhIGFsdGVyYXIgYSB2aXNpYmlsaWRhZGVcclxuICBwdWJsaWMgY29udGFpbmVyOiBVSUNvbnRhaW5lclJlY3Q7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGdhbWVDYW52YXM6IFVJQ2FudmFzLCB0ZXh0dXJlOiBUZXh0dXJlKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBVSUNvbnRhaW5lclJlY3QoZ2FtZUNhbnZhcyk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgdGhpcy5jb250YWluZXIuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcblxyXG4gICAgLy8gQWRpY2lvbmFyIGEgaW1hZ2VtIHByaW5jaXBhbFxyXG4gICAgY29uc3QgaGludEltYWdlID0gbmV3IFVJSW1hZ2UodGhpcy5jb250YWluZXIsIHRleHR1cmUpO1xyXG4gICAgaGludEltYWdlLnNvdXJjZVdpZHRoID0gNTEyO1xyXG4gICAgaGludEltYWdlLnNvdXJjZUhlaWdodCA9IDUxMjtcclxuICAgIGhpbnRJbWFnZS53aWR0aCA9IDUxMjtcclxuICAgIGhpbnRJbWFnZS5oZWlnaHQgPSA1MTI7XHJcblxyXG4gICAgLy8gRSBhZGljaW9uYXIgdW0gYm90w6NvIGRlIGZlY2hhciBubyBjYW50byBzdXBlcmlvciBkaXJlaXRvXHJcbiAgICBjb25zdCBjbG9zZSA9IG5ldyBVSUltYWdlKFxyXG4gICAgICB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLmNsb3NlSGludEJ1dHRvblxyXG4gICAgKTtcclxuICAgIGNsb3NlLnNvdXJjZVdpZHRoID0gOTI7XHJcbiAgICBjbG9zZS5zb3VyY2VIZWlnaHQgPSA5MjtcclxuICAgIGNsb3NlLndpZHRoID0gNDY7XHJcbiAgICBjbG9zZS5oZWlnaHQgPSA0NjtcclxuICAgIGNsb3NlLnBvc2l0aW9uWCA9IDI1NjtcclxuICAgIGNsb3NlLnBvc2l0aW9uWSA9IDI1NjtcclxuXHJcbiAgICAvLyBPIFVJIHRlbSB1bWEgZm9ybWEgZGlmZXJlbnRlIGRlIHJlZ2lzdHJhciBzdXBvcnRlIHBhcmEgT25DbGlja1xyXG4gICAgY2xvc2Uub25DbGljayA9IG5ldyBPbkNsaWNrKCgpOiB2b2lkID0+IHtcclxuICAgICAgdGhpcy5jb250YWluZXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5cclxuLy8gQ29uc3RhbnRlcyBwYXJhIHBvc2ljaW9uYW1lbnRvXHJcbmNvbnN0IHBhbmVsUG9zaXRpb24gPSBuZXcgVmVjdG9yMigxMiwgLTI0KTtcclxuY29uc3QgYnV0dG9uU2l6ZSA9IG5ldyBWZWN0b3IyKDU1LCA1NSk7XHJcbmNvbnN0IGJ1dHRvblNwYWNlID0gbmV3IFZlY3RvcjIoNSwgNSk7XHJcblxyXG4vKipcclxuICogQ2xhc3NlIHBhcmEgbyB0ZWNsYWRvIG51bcOpcmljby5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBLZXlwYWQge1xyXG4gIC8vIEV4cG9yIG8gY29udMOqaW5lciBwYXJhIGFsdGVyYXIgYSB2aXNpYmlsaWRhZGVcclxuICBwdWJsaWMgY29udGFpbmVyOiBVSUNvbnRhaW5lclJlY3Q7XHJcblxyXG4gIHByaXZhdGUgcGFuZWxJbnB1dHM6IFVJVGV4dFtdO1xyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyB1bWEgdGVjbGEgbnVtw6lyaWNhIMOpIHByZXNzaW9uYWRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbklucHV0OiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBib3TDo28gZGUgcmVzZXQgw6kgcHJlc3Npb25hZG8uXHJcbiAgICovXHJcbiAgcHVibGljIG9uUmVzZXQ6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIENoYW1hZG8gcXVhbmRvIG8gYm90w6NvIGRlIGVudmlvIMOpIHByZXNzaW9uYWRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvblN1Ym1pdDogKCkgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyZW50OiBVSVNoYXBlKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBVSUNvbnRhaW5lclJlY3QocGFyZW50KTtcclxuICAgIHRoaXMuY29udGFpbmVyLnBvc2l0aW9uWCA9IC01MDtcclxuICAgIHRoaXMuY29udGFpbmVyLnBvc2l0aW9uWSA9IDUwO1xyXG4gICAgdGhpcy5jb250YWluZXIud2lkdGggPSBcIjEwMCVcIjtcclxuICAgIHRoaXMuY29udGFpbmVyLmhlaWdodCA9IFwiMTAwJVwiO1xyXG5cclxuICAgIC8vIEV4aWJpciB1bWEgaW1hZ2VtIG5vIGZ1bmRvIHBhcmEgbyB0ZWNsYWRvIG51bcOpcmljb1xyXG4gICAgY29uc3QgcGFuZWxCYWNrZ3JvdW5kID0gbmV3IFVJSW1hZ2UoXHJcbiAgICAgIHRoaXMuY29udGFpbmVyLFxyXG4gICAgICByZXNvdXJjZXMudGV4dHVyZXMucGFuZWxCYWNrZ3JvdW5kXHJcbiAgICApO1xyXG4gICAgcGFuZWxCYWNrZ3JvdW5kLnNvdXJjZVdpZHRoID0gOTE4O1xyXG4gICAgcGFuZWxCYWNrZ3JvdW5kLnNvdXJjZUhlaWdodCA9IDEzMDA7XHJcbiAgICBwYW5lbEJhY2tncm91bmQud2lkdGggPSAzMTA7XHJcbiAgICBwYW5lbEJhY2tncm91bmQuaGVpZ2h0ID0gNDIwO1xyXG4gICAgcGFuZWxCYWNrZ3JvdW5kLnBvc2l0aW9uWCA9IDcwO1xyXG4gICAgcGFuZWxCYWNrZ3JvdW5kLnBvc2l0aW9uWSA9IC01NTtcclxuXHJcbiAgICAvLyBBZGljaW9uYXIgdW0gYm90w6NvIGRlIGZlY2hhciBwcsOzeGltbyBhbyBjYW50byBzdXBlcmlvciBkaXJlaXRvXHJcbiAgICBjb25zdCBjbG9zZUltYWdlID0gbmV3IFVJSW1hZ2UoXHJcbiAgICAgIHRoaXMuY29udGFpbmVyLFxyXG4gICAgICByZXNvdXJjZXMudGV4dHVyZXMuY2xvc2VCdXR0b25cclxuICAgICk7XHJcbiAgICBjbG9zZUltYWdlLnNvdXJjZVdpZHRoID0gOTI7XHJcbiAgICBjbG9zZUltYWdlLnNvdXJjZUhlaWdodCA9IDkyO1xyXG4gICAgY2xvc2VJbWFnZS53aWR0aCA9IDMyO1xyXG4gICAgY2xvc2VJbWFnZS5oZWlnaHQgPSAzMjtcclxuICAgIGNsb3NlSW1hZ2UucG9zaXRpb25YID0gMTk0O1xyXG4gICAgY2xvc2VJbWFnZS5wb3NpdGlvblkgPSAxMDg7XHJcblxyXG4gICAgLy8gUXVhbmRvIG8gYm90w6NvIGRlIGZlY2hhciDDqSBjbGljYWRvLCBlc2NvbmRlciBvIFVJXHJcbiAgICBjbG9zZUltYWdlLm9uQ2xpY2sgPSBuZXcgT25DbGljaygoKTogdm9pZCA9PiB7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIDMgY2FpeGFzIHBhcmEgbW9zdHJhciBvIGPDs2RpZ28gaW5zZXJpZG8gb3UgYSBtZW5zYWdlbSBhdHVhbFxyXG4gICAgdGhpcy5wYW5lbElucHV0cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgY29uc3QgaW5wdXRJbWFnZSA9IG5ldyBVSUltYWdlKFxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5pbnB1dEJveFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBpbnB1dFNsb3QgPSBuZXcgVUlUZXh0KHRoaXMuY29udGFpbmVyKTtcclxuICAgICAgaW5wdXRJbWFnZS5zb3VyY2VXaWR0aCA9IDE3MztcclxuICAgICAgaW5wdXRJbWFnZS5zb3VyY2VIZWlnaHQgPSAxNzM7XHJcbiAgICAgIGlucHV0SW1hZ2Uud2lkdGggPSBpbnB1dFNsb3Qud2lkdGggPSBidXR0b25TaXplLng7XHJcbiAgICAgIGlucHV0SW1hZ2UuaGVpZ2h0ID0gaW5wdXRTbG90LmhlaWdodCA9IGJ1dHRvblNpemUueTtcclxuICAgICAgaW5wdXRJbWFnZS5wb3NpdGlvblggPSBpbnB1dFNsb3QucG9zaXRpb25YID1cclxuICAgICAgICBpICogKGJ1dHRvblNwYWNlLnggKyBidXR0b25TaXplLngpICsgNTtcclxuICAgICAgaW5wdXRJbWFnZS5wb3NpdGlvblkgPSBpbnB1dFNsb3QucG9zaXRpb25ZID0gNDU7XHJcbiAgICAgIGlucHV0U2xvdC5mb250QXV0b1NpemUgPSB0cnVlO1xyXG4gICAgICBpbnB1dFNsb3QuaFRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgIHRoaXMucGFuZWxJbnB1dHMucHVzaChpbnB1dFNsb3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEJvdMO1ZXMgZGUgZW50cmFkYSBkbyB1c3XDoXJpb1xyXG4gICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgMzsgY29sKyspIHtcclxuICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgNDsgcm93KyspIHtcclxuICAgICAgICAvLyBPIHZhbG9yIHJlcHJlc2VudGFkbyBwb3IgZXN0ZSBib3TDo29cclxuICAgICAgICBsZXQgdmFsdWU6IG51bWJlcjtcclxuICAgICAgICBpZiAoY29sID09IDEgJiYgcm93ID09IDMpIHtcclxuICAgICAgICAgIC8vIE8gYm90w6NvIDAgw6kgdW0gY2FzbyBlc3BlY2lhbFxyXG4gICAgICAgICAgdmFsdWUgPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YWx1ZSA9IHJvdyAqIDMgKyBjb2wgKyAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ3JpYXIgbyBib3TDo28gZSBzZXUgZXZlbnRvXHJcbiAgICAgICAgbGV0IGJ1dHRvbkltYWdlOiBVSUltYWdlID0gbnVsbDtcclxuICAgICAgICBpZiAoY29sID09IDAgJiYgcm93ID09IDMpIHtcclxuICAgICAgICAgIC8vIE8gYm90w6NvIGRlIGxpbXBhciBubyBjYW50byBpbmZlcmlvciBlc3F1ZXJkb1xyXG4gICAgICAgICAgYnV0dG9uSW1hZ2UgPSBuZXcgVUlJbWFnZShcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIsXHJcbiAgICAgICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5jbGVhckJ1dHRvblxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAvLyBDaGFtYXIgb25SZXNldCBxdWFuZG8gY2xpY2Fkb1xyXG4gICAgICAgICAgYnV0dG9uSW1hZ2Uub25DbGljayA9IG5ldyBPbkNsaWNrKCgpOiB2b2lkID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vblJlc2V0KCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNvbCA9PSAyICYmIHJvdyA9PSAzKSB7XHJcbiAgICAgICAgICAvLyBPIGJvdMOjbyBkZSBlbnZpYXIgbm8gY2FudG8gaW5mZXJpb3IgZGlyZWl0b1xyXG4gICAgICAgICAgYnV0dG9uSW1hZ2UgPSBuZXcgVUlJbWFnZShcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIsXHJcbiAgICAgICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5lbnRlckJ1dHRvblxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAvLyBDaGFtYXIgb25TdWJtaXQgcXVhbmRvIGNsaWNhZG9cclxuICAgICAgICAgIGJ1dHRvbkltYWdlLm9uQ2xpY2sgPSBuZXcgT25DbGljaygoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25TdWJtaXQoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBCb3TDo28gZGUgdmFsb3IgbnVtw6lyaWNvXHJcbiAgICAgICAgICBidXR0b25JbWFnZSA9IG5ldyBVSUltYWdlKFxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLm51bWJlckJ1dHRvblxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBudW1iZXJUZXh0ID0gbmV3IFVJVGV4dChidXR0b25JbWFnZSk7XHJcbiAgICAgICAgICBudW1iZXJUZXh0LmlzUG9pbnRlckJsb2NrZXIgPSBmYWxzZTtcclxuICAgICAgICAgIG51bWJlclRleHQucG9zaXRpb25YID0gLTIzO1xyXG4gICAgICAgICAgbnVtYmVyVGV4dC5mb250QXV0b1NpemUgPSB0cnVlO1xyXG4gICAgICAgICAgbnVtYmVyVGV4dC5oVGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAgIG51bWJlclRleHQudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgIC8vIENoYW1hciBvbklucHV0IHF1YW5kbyBjbGljYWRvXHJcbiAgICAgICAgICBidXR0b25JbWFnZS5vbkNsaWNrID0gbmV3IE9uQ2xpY2soKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uSW5wdXQodmFsdWUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb25maWd1cmFyIGEgaW1hZ2VtIGRvIGJvdMOjb1xyXG4gICAgICAgIGJ1dHRvbkltYWdlLnNvdXJjZVdpZHRoID0gMTcxO1xyXG4gICAgICAgIGJ1dHRvbkltYWdlLnNvdXJjZUhlaWdodCA9IDE3MTtcclxuICAgICAgICBidXR0b25JbWFnZS53aWR0aCA9IGJ1dHRvblNpemUueDtcclxuICAgICAgICBidXR0b25JbWFnZS5oZWlnaHQgPSBidXR0b25TaXplLnk7XHJcbiAgICAgICAgYnV0dG9uSW1hZ2UucG9zaXRpb25YID1cclxuICAgICAgICAgIHBhbmVsUG9zaXRpb24ueCArIGNvbCAqIChidXR0b25TcGFjZS54ICsgYnV0dG9uU2l6ZS54KTtcclxuICAgICAgICBidXR0b25JbWFnZS5wb3NpdGlvblkgPVxyXG4gICAgICAgICAgcGFuZWxQb3NpdGlvbi55IC0gcm93ICogKGJ1dHRvblNwYWNlLnkgKyBidXR0b25TaXplLnkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBFeGliaXIgdW1hIG1lbnNhZ2VtIGFjaW1hIGRvIHRlY2xhZG8gbnVtw6lyaWNvLCBhdMOpIDMgY2FyYWN0ZXJlc1xyXG4gIHB1YmxpYyBkaXNwbGF5KG1lc3NhZ2U6IHN0cmluZywgY29sb3I6IENvbG9yNCA9IENvbG9yNC5XaGl0ZSgpKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFuZWxJbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgY2hhcmFjdGVyID0gbWVzc2FnZS5sZW5ndGggPiBpID8gbWVzc2FnZVtpXSA6IFwiXCI7XHJcbiAgICAgIHRoaXMucGFuZWxJbnB1dHNbaV0udmFsdWUgPSBjaGFyYWN0ZXI7XHJcbiAgICAgIHRoaXMucGFuZWxJbnB1dHNbaV0uY29sb3IgPSBjb2xvcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQWN0aW9uc1NlcXVlbmNlU3lzdGVtIH0gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2FjdGlvbnNTZXF1ZW5jZVN5c3RlbS9hY3Rpb25zU2VxdWVuY2VTeXN0ZW1cIlxyXG5cclxuZXhwb3J0IGNsYXNzIFNpbXBsZURpYWxvZyB7XHJcbiAgICBwcml2YXRlIGFjdGlvbnNTZXF1ZW5jZVN5c3RlbTogQWN0aW9uc1NlcXVlbmNlU3lzdGVtXHJcbiAgICBwcml2YXRlIGdhbWVDYW52YXM6IFVJQ2FudmFzXHJcblxyXG4gICAgcHJpdmF0ZSBkaWFsb2dDb250YWluZXI6IFVJQ29udGFpbmVyUmVjdFxyXG4gICAgcHJpdmF0ZSBwb3J0cmFpdENvbnRhaW5lcnM6IFBvcnRyYWl0Q29udGFpbmVyW10gPSBbXVxyXG4gICAgcHJpdmF0ZSB0ZXh0Q29udGFpbmVyOiBEaWFsb2dUZXh0Q29udGFpbmVyXHJcbiAgICBwcml2YXRlIG9wdGlvbnNDb250YWluZXI6IE9wdGlvbkNvbnRhaW5lclxyXG5cclxuICAgIHByaXZhdGUgb25GaW5pc2hDYWxsYmFjazogKCkgPT4gdm9pZFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRpYWxvZ0NvbmZpZzogU2ltcGxlRGlhbG9nLkRpYWxvZ0NvbmZpZykge1xyXG4gICAgICAgIHRoaXMuZGlhbG9nQ29udGFpbmVyID0gbmV3IFVJQ29udGFpbmVyUmVjdChkaWFsb2dDb25maWcuY2FudmFzKVxyXG4gICAgICAgIHRoaXMuZGlhbG9nQ29udGFpbmVyLndpZHRoID0gXCIxMDAlXCJcclxuICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lci5oZWlnaHQgPSBcIjEwMCVcIlxyXG5cclxuICAgICAgICB0aGlzLnBvcnRyYWl0Q29udGFpbmVycy5wdXNoKG5ldyBQb3J0cmFpdENvbnRhaW5lcihkaWFsb2dDb25maWcubGVmdFBvcnRyYWl0LCB0aGlzLmRpYWxvZ0NvbnRhaW5lcikpXHJcbiAgICAgICAgdGhpcy5wb3J0cmFpdENvbnRhaW5lcnMucHVzaChuZXcgUG9ydHJhaXRDb250YWluZXIoZGlhbG9nQ29uZmlnLnJpZ2h0UG9ydHJhaXQsIHRoaXMuZGlhbG9nQ29udGFpbmVyKSlcclxuXHJcbiAgICAgICAgdGhpcy50ZXh0Q29udGFpbmVyID0gbmV3IERpYWxvZ1RleHRDb250YWluZXIoZGlhbG9nQ29uZmlnLmRpYWxvZ1RleHQsIHRoaXMuZGlhbG9nQ29udGFpbmVyKVxyXG4gICAgICAgIHRoaXMub3B0aW9uc0NvbnRhaW5lciA9IG5ldyBPcHRpb25Db250YWluZXIoZGlhbG9nQ29uZmlnLm9wdGlvbnNDb250YWluZXIsIHRoaXMuZGlhbG9nQ29udGFpbmVyKVxyXG5cclxuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGFpbmVyLmJhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Q29udGFpbmVyLmJhY2tncm91bmQub25DbGljayA9IG5ldyBPbkNsaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbnNTZXF1ZW5jZVN5c3RlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGlvbnNTZXF1ZW5jZVN5c3RlbS5nZXRSdW5uaW5nQWN0aW9uKCkgaW5zdGFuY2VvZiBTYXlXaXRoQ2FsbGJhY2tBY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYWN0aW9uc1NlcXVlbmNlU3lzdGVtLmdldFJ1bm5pbmdBY3Rpb24oKSBhcyBTYXlXaXRoQ2FsbGJhY2tBY3Rpb24pLnNraXBEaWFsb2coKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5nYW1lQ2FudmFzID0gZGlhbG9nQ29uZmlnLmNhbnZhc1xyXG4gICAgICAgIHRoaXMuaGlkZSgpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBwbGF5IGRpYWxvZyB0cmVlXHJcbiAgICAgKiBAcGFyYW0gZGlhbG9nVHJlZSBkaWFsb2cgdHJlZSBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBydW5EaWFsb2dUcmVlKGRpYWxvZ1RyZWU6IFNpbXBsZURpYWxvZy5EaWFsb2dUcmVlKSB7XHJcbiAgICAgICAgdGhpcy5wb3J0cmFpdENvbnRhaW5lcnMuZm9yRWFjaChwb3J0cmFpdCA9PiB7XHJcbiAgICAgICAgICAgIHBvcnRyYWl0LmhpZGUoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuaGlkZU9wdGlvbnMoKVxyXG4gICAgICAgIHRoaXMuc2hvdygpXHJcbiAgICAgICAgZGlhbG9nVHJlZS5zaW1wbGVEaWFsb2dJbnN0YW5jZSA9IHRoaXNcclxuXHJcbiAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VTeXN0ZW0gPSBuZXcgQWN0aW9uc1NlcXVlbmNlU3lzdGVtKClcclxuICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZVN5c3RlbS5zdGFydFNlcXVlbmNlKGRpYWxvZ1RyZWUuYWN0aW9uc1NlcXVlbmNlQnVpbGRlcilcclxuICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZVN5c3RlbS5zZXRPbkZpbmlzaENhbGxiYWNrKCgpID0+IHtcclxuICAgICAgICAgICAgZW5naW5lLnJlbW92ZVN5c3RlbSh0aGlzLmFjdGlvbnNTZXF1ZW5jZVN5c3RlbSlcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VTeXN0ZW0gPSBudWxsXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uRmluaXNoQ2FsbGJhY2spIHRoaXMub25GaW5pc2hDYWxsYmFjaygpXHJcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpXHJcbiAgICAgICAgfSlcclxuICAgICAgICBlbmdpbmUuYWRkU3lzdGVtKHRoaXMuYWN0aW9uc1NlcXVlbmNlU3lzdGVtKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0IGNhbGxiYWNrIGZvciB3aGVuIGRpYWxvZyBmaW5pc2hcclxuICAgICAqIEBwYXJhbSBvbkZpbmlzaENhbGxiYWNrIGNhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIHNldEZpbmlzaENhbGxiYWNrKG9uRmluaXNoQ2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcclxuICAgICAgICB0aGlzLm9uRmluaXNoQ2FsbGJhY2sgPSBvbkZpbmlzaENhbGxiYWNrXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQgaWYgZGlhbG9nIGlzIHJ1bm5pbmdcclxuICAgICAqL1xyXG4gICAgaXNEaWFsb2dUcmVlUnVubmluZygpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodGhpcy5hY3Rpb25zU2VxdWVuY2VTeXN0ZW0gPT0gbnVsbCkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgZWxzZSByZXR1cm4gdGhpcy5hY3Rpb25zU2VxdWVuY2VTeXN0ZW0uaXNSdW5uaW5nKClcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNldCBwb3J0cmFpdFxyXG4gICAgICogQHBhcmFtIHBvcnRyYWl0SW5kZXggcG9ydHJhaXQgaW5kZXhcclxuICAgICAqIEBwYXJhbSB0ZXh0dXJlIHRleHR1cmUgZm9yIHBvcnRyYWl0XHJcbiAgICAgKiBAcGFyYW0gaW1hZ2VDb25maWcgcG9ydHJhaXQncyBpbWFnZSBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHNldFBvcnRyYWl0KHBvcnRyYWl0SW5kZXg6IFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LCB0ZXh0dXJlOiBUZXh0dXJlLCBpbWFnZUNvbmZpZz86IFNpbXBsZURpYWxvZy5JbWFnZUNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucG9ydHJhaXRDb250YWluZXJzW3BvcnRyYWl0SW5kZXhdLnNldEltYWdlKHRleHR1cmUsIGltYWdlQ29uZmlnKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0IHByb3RyYWl0IGltYWdlIGNvbmZpZ3VyYXRpb25cclxuICAgICAqIEBwYXJhbSBwb3J0cmFpdEluZGV4IHBvcnRyYWl0IGluZGV4XHJcbiAgICAgKiBAcGFyYW0gaW1hZ2VDb25maWcgcG9ydHJhaXQncyBpbWFnZSBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHNldFBvcnRyYWl0SW1hZ2VDb25maWcocG9ydHJhaXRJbmRleDogU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXgsIGltYWdlQ29uZmlnOiBTaW1wbGVEaWFsb2cuSW1hZ2VDb25maWcpIHtcclxuICAgICAgICB0aGlzLnBvcnRyYWl0Q29udGFpbmVyc1twb3J0cmFpdEluZGV4XS5jb25maWdQb3J0cmFpdEltYWdlKGltYWdlQ29uZmlnKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2V0IHRleHQgaW4gZGlhbG9nIGJveFxyXG4gICAgICogQHBhcmFtIHRleHQgdGV4dCB2YWx1ZVxyXG4gICAgICogQHBhcmFtIHRleHRDb25maWcgY29uZmlndXJhdGlvbiBmb3IgdGV4dFxyXG4gICAgICovXHJcbiAgICBzZXRUZXh0KHRleHQ6IHN0cmluZywgdGV4dENvbmZpZz86IFNpbXBsZURpYWxvZy5UZXh0Q29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy50ZXh0Q29udGFpbmVyLnRleHQudmFsdWUgPSB0ZXh0XHJcbiAgICAgICAgaWYgKHRleHRDb25maWcpIHtcclxuICAgICAgICAgICAgY29uZmlnVGV4dCh0aGlzLnRleHRDb250YWluZXIudGV4dCwgdGV4dENvbmZpZylcclxuICAgICAgICAgICAgdGhpcy50ZXh0Q29udGFpbmVyLmNvbmZpZy50ZXh0Q29uZmlnID0gdGV4dENvbmZpZ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGNvbmZpZ3VyZSB0ZXh0IGluIGRpYWxvZyBib3hcclxuICAgICAqIEBwYXJhbSB0ZXh0Q29uZmlnIHRleHQncyBjb25maWd1cmF0aW9uXHJcbiAgICAgKi9cclxuICAgIHNldFRleHRDb25maWcodGV4dENvbmZpZzogU2ltcGxlRGlhbG9nLlRleHRDb25maWcpIHtcclxuICAgICAgICBpZiAodGV4dENvbmZpZykge1xyXG4gICAgICAgICAgICBjb25maWdUZXh0KHRoaXMudGV4dENvbnRhaW5lci50ZXh0LCB0ZXh0Q29uZmlnKVxyXG4gICAgICAgICAgICB0aGlzLnRleHRDb250YWluZXIuY29uZmlnLnRleHRDb25maWcgPSB0ZXh0Q29uZmlnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogc2hvdyBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lci52aXNpYmxlID0gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGlkZSBkaWFsb2dcclxuICAgICAqL1xyXG4gICAgaGlkZSgpIHtcclxuICAgICAgICB0aGlzLmRpYWxvZ0NvbnRhaW5lci52aXNpYmxlID0gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHNob3cgYSBwb3J0cmFpdFxyXG4gICAgICogQHBhcmFtIHBvcnRyYWl0SW5kZXggcG9ydHJhaXQncyBpbmRleCB0byBzaG93XHJcbiAgICAgKi9cclxuICAgIHNob3dQb3J0cmFpdChwb3J0cmFpdEluZGV4OiBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleCkge1xyXG4gICAgICAgIHRoaXMucG9ydHJhaXRDb250YWluZXJzW3BvcnRyYWl0SW5kZXhdLnNob3coKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGlkZSBhIHBvcnRyYWl0XHJcbiAgICAgKiBAcGFyYW0gcG9ydHJhaXRJbmRleCBwb3J0cmFpdCdzIGluZGV4IHRvIGhpZGVcclxuICAgICAqL1xyXG4gICAgaGlkZVBvcnRyYWl0KHBvcnRyYWl0SW5kZXg6IFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5wb3J0cmFpdENvbnRhaW5lcnNbcG9ydHJhaXRJbmRleF0uaGlkZSgpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBnZXQgY29uZmlndXJlZCBkaWFsb2cgdGV4dCBzcGVlZFxyXG4gICAgICovXHJcbiAgICBnZXRDb25maWdEaWFsb2dUZXh0U3BlZWQoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGFpbmVyLmNvbmZpZy50ZXh0U3BlZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250YWluZXIuY29uZmlnLnRleHRTcGVlZFxyXG4gICAgICAgIHJldHVybiAxNVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogZ2V0IGNvbmZpZ3VyZWQgaWRsZSB0aW1lIGZvciB0ZXh0IChpZGxlIHRpbWUgYmV0d2VlbiBkaWFsb2dzKVxyXG4gICAgICovXHJcbiAgICBnZXRDb25maWdEaWFsb2dUZXh0SWRsZVRpbWUoKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy50ZXh0Q29udGFpbmVyLmNvbmZpZy50ZXh0SWRsZVRpbWUpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250YWluZXIuY29uZmlnLnRleHRJZGxlVGltZVxyXG4gICAgICAgIHJldHVybiAzXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBhZGQgYW4gb3B0aW9uIHRvIGRpYWxvZyBzeXN0ZW1cclxuICAgICAqIEBwYXJhbSB0ZXh0IHRleHQgdmFsdWVcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBjYWxsYmFjayBmb3Igd2hlbiBvcHRpb24gaXMgcHJlc3NlZFxyXG4gICAgICovXHJcbiAgICBhZGRPcHRpb24odGV4dDogc3RyaW5nLCBjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMub3B0aW9uc0NvbnRhaW5lci5hZGRPcHRpb24odGV4dCwgY2FsbGJhY2spXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBzaG93IGRpYWxvZydzIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgc2hvd09wdGlvbnMoKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zQ29udGFpbmVyLnNob3coKVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogaGlkZSBkaWFsb2cncyBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGhpZGVPcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMub3B0aW9uc0NvbnRhaW5lci5oaWRlQW5kQ2xlYXJPcHRpb25zKClcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldCBkaWFsb2cgYm94IGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBnZXREaWFsb2dUZXh0Q29udGFpbmVyKCk6IFVJQ29udGFpbmVyUmVjdCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dENvbnRhaW5lci5jb250YWluZXJcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGdldCBvcHRpb25zIGNvbnRhaW5lclxyXG4gICAgICovXHJcbiAgICBnZXRPcHRpb25zQ29udGFpbmVyKCk6IFVJQ29udGFpbmVyU3RhY2sge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNDb250YWluZXIub3B0aW9uc1N0YWNrXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgU2ltcGxlRGlhbG9nIHtcclxuICAgIGV4cG9ydCBjbGFzcyBEaWFsb2dUcmVlIHtcclxuICAgICAgICBhY3Rpb25zU2VxdWVuY2VCdWlsZGVyOiBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uU2VxdWVuY2VCdWlsZGVyXHJcbiAgICAgICAgc2ltcGxlRGlhbG9nSW5zdGFuY2U6IFNpbXBsZURpYWxvZ1xyXG5cclxuICAgICAgICBwcml2YXRlIG9wdGlvbnNHcm91cFN0YWNrOiBPcHRpb25zR3JvdXBEYXRhW10gPSBbXVxyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VCdWlsZGVyID0gbmV3IEFjdGlvbnNTZXF1ZW5jZVN5c3RlbS5TZXF1ZW5jZUJ1aWxkZXIoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogc3RhcnQgdGV4dCBkaXNwbGF5aW5nIG9uIGRpYWxvZyBib3hcclxuICAgICAgICAgKiBAcGFyYW0gc3RyaW5nRnVuY3Rpb24gZnVuY3Rpb24gdG8gZ2V0IHRleHQgZnJvbVxyXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0Q29uZmlnIHRleHQgY29uZmlndXJhdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSB0ZXh0U3BlZWQgdGV4dCB0eXBlIHdyaXRpbmcgYW5pbWF0aW9uIHNwZWVkXHJcbiAgICAgICAgICogQHBhcmFtIHRleHRJZGxlVGltZSBpZGxlIHRpbWUgdG8gd2FpdCBhZnRlciBmdWxsIHRleHQgaXMgZGlzcGxheWVkXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2F5KHN0cmluZ0Z1bmN0aW9uOiAoKSA9PiBzdHJpbmcsIHRleHRDb25maWc/OiBUZXh0Q29uZmlnLCB0ZXh0U3BlZWQ/OiBudW1iZXIsIHRleHRJZGxlVGltZT86IG51bWJlcik6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIudGhlbihuZXcgU2F5V2l0aENhbGxiYWNrQWN0aW9uKHN0cmluZ0Z1bmN0aW9uLCB0ZXh0Q29uZmlnLCAoKSA9PiB0aGlzLnNpbXBsZURpYWxvZ0luc3RhbmNlLCB0ZXh0U3BlZWQsIHRleHRJZGxlVGltZSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBzaG93IG9uZSBvZiB0aGUgcG9ydHJhaXRzXHJcbiAgICAgICAgICogQHBhcmFtIGluZGV4IGluZGV4IG9mIHBvcnRyYWl0IHRvIHNob3dcclxuICAgICAgICAgKiBAcGFyYW0gY2hhbmdlVGV4dHVyZSB0ZXh0dXJlIHRvIGNoYW5nZSBwb3J0cmFpdCdzIGltYWdlXHJcbiAgICAgICAgICogQHBhcmFtIGNoYW5nZUNvbmZpZyBjaGFuZ2UgY29uZmlndXJhdGlvbiBmb3IgcG9ydHJhaXQncyBpbWFnZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNob3dQb3J0cmFpdChpbmRleDogU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXgsIGNoYW5nZVRleHR1cmU/OiBUZXh0dXJlLCBjaGFuZ2VDb25maWc/OiBJbWFnZUNvbmZpZyk6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIudGhlbihuZXcgU2hvd1BvcnRyYWl0QWN0aW9uKGluZGV4LCBjaGFuZ2VUZXh0dXJlLCBjaGFuZ2VDb25maWcsICgpID0+IHRoaXMuc2ltcGxlRGlhbG9nSW5zdGFuY2UpKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogaGlkZSBvbmUgb2YgdGhlIHBvcnRyYWl0c1xyXG4gICAgICAgICAqIEBwYXJhbSBpbmRleCBpbmRleCBvZiBwb3J0cmFpdCB0byBoaWRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaGlkZVBvcnRyYWl0KGluZGV4OiBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleCk6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIudGhlbihuZXcgSGlkZVBvcnRyYWl0QWN0aW9uKGluZGV4LCAoKSA9PiB0aGlzLnNpbXBsZURpYWxvZ0luc3RhbmNlKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIElGIGNvbmRpdGlvbmFsIHN0YXRlbWVudFxyXG4gICAgICAgICAqIEBwYXJhbSBjb25kaXRpb24gY29uZGl0aW9uIGZ1bmN0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaWYoY29uZGl0aW9uOiAoKSA9PiBib29sZWFuKTogRGlhbG9nVHJlZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1NlcXVlbmNlQnVpbGRlci5pZihjb25kaXRpb24pXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBFTFNFIGNvbmRpdGlvbmFsIHN0YXRlbWVudFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVsc2UoKTogRGlhbG9nVHJlZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1NlcXVlbmNlQnVpbGRlci5lbHNlKClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGVuZHMgYSBjb25kaXRpb25hbCBibG9ja1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGVuZGlmKCk6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIuZW5kSWYoKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYmVnaW4gYW4gb3B0aW9ucyBibG9jayBncm91cFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGJlZ2luT3B0aW9uc0dyb3VwKCk6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICBsZXQgZ3JvdXBEYXRhID0gbmV3IE9wdGlvbnNHcm91cERhdGEoKVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNHcm91cFN0YWNrLnB1c2goZ3JvdXBEYXRhKVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VCdWlsZGVyLndoaWxlKCgpID0+IHRydWUpXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBlbmRzIG9wdGlvbnMgYmxvY2sgZ3JvdXBcclxuICAgICAgICAgKi9cclxuICAgICAgICBlbmRPcHRpb25zR3JvdXAoKTogRGlhbG9nVHJlZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1NlcXVlbmNlQnVpbGRlci50aGVuKG5ldyBXYWl0Rm9ySW5wdXRBY3Rpb24odGhpcy5vcHRpb25zR3JvdXBTdGFja1t0aGlzLm9wdGlvbnNHcm91cFN0YWNrLmxlbmd0aCAtIDFdLCAoKSA9PiB0aGlzLnNpbXBsZURpYWxvZ0luc3RhbmNlKSlcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VCdWlsZGVyLmVuZFdoaWxlKClcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zR3JvdXBTdGFjay5zcGxpY2UodGhpcy5vcHRpb25zR3JvdXBTdGFjay5sZW5ndGggLSAxLCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogYWRkIGEgb3B0aW9uIHRvIHRoZSBvcHRpb25zIGJsb2NrXHJcbiAgICAgICAgICogQHBhcmFtIHN0cmluZ0Z1bmN0aW9uIGZ1bmN0aW9uIHRvIGdldCB0ZXh0IGZvciBvcHRpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICBvcHRpb24oc3RyaW5nRnVuY3Rpb246ICgpID0+IHN0cmluZyk6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICBsZXQgZ3JvdXAgPSB0aGlzLm9wdGlvbnNHcm91cFN0YWNrW3RoaXMub3B0aW9uc0dyb3VwU3RhY2subGVuZ3RoIC0gMV1cclxuICAgICAgICAgICAgbGV0IG9wdGlvbkFjdGlvbiA9IG5ldyBPcHRpb25BY3Rpb24oc3RyaW5nRnVuY3Rpb24sICgpID0+IHRoaXMuc2ltcGxlRGlhbG9nSW5zdGFuY2UpXHJcbiAgICAgICAgICAgIGdyb3VwLm9wdGlvbnMucHVzaChvcHRpb25BY3Rpb24pXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1NlcXVlbmNlQnVpbGRlci5pZigoKSA9PiBncm91cC5vcHRpb25TZWxlY3RlZCA9PSAtMSlcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VCdWlsZGVyLnRoZW4ob3B0aW9uQWN0aW9uKVxyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIuZW5kSWYoKVxyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIuaWYoKCkgPT4gb3B0aW9uQWN0aW9uLnNlbGVjdGVkKVxyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIudGhlbihuZXcgQ2FsbGJhY2tBY3Rpb24oKCkgPT4geyBvcHRpb25BY3Rpb24uc2VsZWN0ZWQgPSBmYWxzZTsgZ3JvdXAub3B0aW9uU2VsZWN0ZWQgPSAtMSB9KSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGVuZHMgYSBvcHRpb24gYmxvY2tcclxuICAgICAgICAgKi9cclxuICAgICAgICBlbmRPcHRpb24oKTogRGlhbG9nVHJlZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uc1NlcXVlbmNlQnVpbGRlci5icmVha1doaWxlKClcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VCdWlsZGVyLmVuZElmKClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGNhbGwgYSBmdW5jdGlvblxyXG4gICAgICAgICAqIEBwYXJhbSBjYWxsYmFjayBmdW5jdGlvbiB0byBjYWxsIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbGwoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBEaWFsb2dUcmVlIHtcclxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zU2VxdWVuY2VCdWlsZGVyLnRoZW4obmV3IENhbGxiYWNrQWN0aW9uKGNhbGxiYWNrKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIHJ1biBhIGN1c3RvbSBhY3Rpb25cclxuICAgICAgICAgKiBAcGFyYW0gYWN0aW9uIGFjdGlvbiB0byBydW5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjdXN0b21BY3Rpb24oYWN0aW9uOiBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbik6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIudGhlbihhY3Rpb24pXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiB3YWl0IGEgbnVtYmVyIG9mIHNlY29uZHNcclxuICAgICAgICAgKiBAcGFyYW0gc2Vjb25kcyBzZWNvbmRzIHRvIHdhaXRcclxuICAgICAgICAgKi9cclxuICAgICAgICB3YWl0KHNlY29uZHM6IG51bWJlcik6IERpYWxvZ1RyZWUge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnNTZXF1ZW5jZUJ1aWxkZXIudGhlbihuZXcgV2FpdEFjdGlvbihzZWNvbmRzKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIERpYWxvZ0NvbmZpZyB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogcmVmZXJlbmNlIHRvIHNjZW5lIGNhbnZhc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNhbnZhczogVUlDYW52YXNcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBsZWZ0IHBvcnRhaXQgY29uZmlndXJhdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxlZnRQb3J0cmFpdDogUG9ydHJhaXRDb25maWdcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiByaWdodCBwb3J0cmFpdCBjb25maWd1cmF0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgcmlnaHRQb3J0cmFpdDogUG9ydHJhaXRDb25maWdcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBjb25maWd1cmF0aW9uIGZvciB0ZXh0IGluIGRpYWxvZyBib3hcclxuICAgICAgICAgKi9cclxuICAgICAgICBkaWFsb2dUZXh0OiBEaWFsb2dUZXh0Q29uZmlnXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogY29uZmlndXJhdGlvbiBmb3Igb3B0aW9ucyBjb250YWluZXJcclxuICAgICAgICAgKi9cclxuICAgICAgICBvcHRpb25zQ29udGFpbmVyOiBPcHRpb25zQ29udGFpbmVyQ29uZmlnXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFBvcnRyYWl0Q29uZmlnIHtcclxuICAgICAgICBoQWxpZ24/OiBzdHJpbmdcclxuICAgICAgICB2QWxpZ24/OiBzdHJpbmdcclxuICAgICAgICB3aWR0aDogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgaGVpZ2h0OiBzdHJpbmcgfCBudW1iZXJcclxuICAgICAgICBwb3NpdGlvblg/OiBzdHJpbmcgfCBudW1iZXJcclxuICAgICAgICBwb3NpdGlvblk/OiBzdHJpbmcgfCBudW1iZXJcclxuICAgICAgICBzb3VyY2VXaWR0aD86IG51bWJlclxyXG4gICAgICAgIHNvdXJjZUhlaWdodD86IG51bWJlclxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBEaWFsb2dUZXh0Q29uZmlnIHtcclxuICAgICAgICB0ZXh0Q29uZmlnPzogVGV4dENvbmZpZ1xyXG4gICAgICAgIGhBbGlnbj86IHN0cmluZ1xyXG4gICAgICAgIHZBbGlnbj86IHN0cmluZ1xyXG4gICAgICAgIHdpZHRoOiBzdHJpbmcgfCBudW1iZXJcclxuICAgICAgICBoZWlnaHQ6IHN0cmluZyB8IG51bWJlclxyXG4gICAgICAgIHBvc2l0aW9uWD86IHN0cmluZyB8IG51bWJlclxyXG4gICAgICAgIHBvc2l0aW9uWT86IHN0cmluZyB8IG51bWJlclxyXG4gICAgICAgIHRleHRTcGVlZD86IG51bWJlclxyXG4gICAgICAgIHRleHRJZGxlVGltZT86IG51bWJlclxyXG4gICAgICAgIGJhY2tncm91bmQ/OiBUZXh0dXJlXHJcbiAgICAgICAgYmFja2dyb3VuZENvbmZpZz86IEltYWdlQ29uZmlnXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE9wdGlvbnNDb250YWluZXJDb25maWcge1xyXG4gICAgICAgIG9wdGlvbnNUZXh0Q29uZmlnPzogVGV4dENvbmZpZ1xyXG4gICAgICAgIGFkYXB0V2lkdGg/OiBib29sZWFuXHJcbiAgICAgICAgYWRhcHRIZWlnaHQ/OiBib29sZWFuXHJcbiAgICAgICAgY29sb3I/OiBDb2xvcjRcclxuICAgICAgICBzdGFja09yaWVudGF0aW9uPzogVUlTdGFja09yaWVudGF0aW9uXHJcbiAgICAgICAgc3BhY2luZz86IG51bWJlclxyXG4gICAgICAgIGhBbGlnbj86IHN0cmluZ1xyXG4gICAgICAgIHZBbGlnbj86IHN0cmluZ1xyXG4gICAgICAgIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgaGVpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgcG9zaXRpb25YPzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgcG9zaXRpb25ZPzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgYmFja2dyb3VuZD86IFRleHR1cmVcclxuICAgICAgICBiYWNrZ3JvdW5kQ29uZmlnPzogSW1hZ2VDb25maWdcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2hhcGVDb25maWcge1xyXG4gICAgICAgIGhBbGlnbj86IHN0cmluZ1xyXG4gICAgICAgIHZBbGlnbj86IHN0cmluZ1xyXG4gICAgICAgIHdpZHRoPzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgaGVpZ2h0Pzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgcG9zaXRpb25YPzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICAgICAgcG9zaXRpb25ZPzogc3RyaW5nIHwgbnVtYmVyXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEltYWdlQ29uZmlnIGV4dGVuZHMgU2hhcGVDb25maWcge1xyXG4gICAgICAgIHNvdXJjZUxlZnQ/OiBudW1iZXJcclxuICAgICAgICBzb3VyY2VUb3A/OiBudW1iZXJcclxuICAgICAgICBzb3VyY2VXaWR0aD86IG51bWJlclxyXG4gICAgICAgIHNvdXJjZUhlaWdodD86IG51bWJlclxyXG4gICAgICAgIHBhZGRpbmdUb3A/OiBudW1iZXJcclxuICAgICAgICBwYWRkaW5nUmlnaHQ/OiBudW1iZXJcclxuICAgICAgICBwYWRkaW5nQm90dG9tPzogbnVtYmVyXHJcbiAgICAgICAgcGFkZGluZ0xlZnQ/OiBudW1iZXJcclxuICAgICAgICBzaXplSW5QaXhlbHM/OiBib29sZWFuXHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFJlY3RDb250YWluZXJDb25maWcgZXh0ZW5kcyBTaGFwZUNvbmZpZyB7XHJcbiAgICAgICAgYWRhcHRXaWR0aD86IGJvb2xlYW5cclxuICAgICAgICBhZGFwdEhlaWdodD86IGJvb2xlYW5cclxuICAgICAgICB0aGlja25lc3M/OiBudW1iZXJcclxuICAgICAgICBjb2xvcj86IENvbG9yNFxyXG4gICAgICAgIGFsaWdubWVudFVzZXNTaXplPzogYm9vbGVhblxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUZXh0Q29uZmlnIGV4dGVuZHMgU2hhcGVDb25maWcge1xyXG4gICAgICAgIG91dGxpbmVXaWR0aD86IG51bWJlcjtcclxuICAgICAgICBvdXRsaW5lQ29sb3I/OiBDb2xvcjQ7XHJcbiAgICAgICAgY29sb3I/OiBDb2xvcjQ7XHJcbiAgICAgICAgZm9udFNpemU/OiBudW1iZXI7XHJcbiAgICAgICAgZm9udEF1dG9TaXplPzogYm9vbGVhbjtcclxuICAgICAgICBmb250V2VpZ2h0Pzogc3RyaW5nO1xyXG4gICAgICAgIGxpbmVTcGFjaW5nPzogbnVtYmVyO1xyXG4gICAgICAgIGxpbmVDb3VudD86IG51bWJlcjtcclxuICAgICAgICBhZGFwdFdpZHRoPzogYm9vbGVhbjtcclxuICAgICAgICBhZGFwdEhlaWdodD86IGJvb2xlYW47XHJcbiAgICAgICAgdGV4dFdyYXBwaW5nPzogYm9vbGVhbjtcclxuICAgICAgICBzaGFkb3dCbHVyPzogbnVtYmVyO1xyXG4gICAgICAgIHNoYWRvd09mZnNldFg/OiBudW1iZXI7XHJcbiAgICAgICAgc2hhZG93T2Zmc2V0WT86IG51bWJlcjtcclxuICAgICAgICBzaGFkb3dDb2xvcj86IENvbG9yNDtcclxuICAgICAgICBoVGV4dEFsaWduPzogc3RyaW5nO1xyXG4gICAgICAgIHZUZXh0QWxpZ24/OiBzdHJpbmc7XHJcbiAgICAgICAgcGFkZGluZ1RvcD86IG51bWJlcjtcclxuICAgICAgICBwYWRkaW5nUmlnaHQ/OiBudW1iZXI7XHJcbiAgICAgICAgcGFkZGluZ0JvdHRvbT86IG51bWJlcjtcclxuICAgICAgICBwYWRkaW5nTGVmdD86IG51bWJlcjtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgZW51bSBQb3J0cmFpdEluZGV4IHsgTEVGVCwgUklHSFQgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjb25maWdTaGFwZShzaGFwZTogVUlTaGFwZSwgc2hhcGVDb25maWc6IFNpbXBsZURpYWxvZy5TaGFwZUNvbmZpZykge1xyXG4gICAgaWYgKHNoYXBlQ29uZmlnLmhBbGlnbikgc2hhcGUuaEFsaWduID0gc2hhcGVDb25maWcuaEFsaWduXHJcbiAgICBpZiAoc2hhcGVDb25maWcudkFsaWduKSBzaGFwZS52QWxpZ24gPSBzaGFwZUNvbmZpZy52QWxpZ25cclxuICAgIGlmIChzaGFwZUNvbmZpZy53aWR0aCkgc2hhcGUud2lkdGggPSBzaGFwZUNvbmZpZy53aWR0aFxyXG4gICAgaWYgKHNoYXBlQ29uZmlnLmhlaWdodCkgc2hhcGUuaGVpZ2h0ID0gc2hhcGVDb25maWcuaGVpZ2h0XHJcbiAgICBpZiAoc2hhcGVDb25maWcucG9zaXRpb25YKSBzaGFwZS5wb3NpdGlvblggPSBzaGFwZUNvbmZpZy5wb3NpdGlvblhcclxuICAgIGlmIChzaGFwZUNvbmZpZy5wb3NpdGlvblkpIHNoYXBlLnBvc2l0aW9uWSA9IHNoYXBlQ29uZmlnLnBvc2l0aW9uWVxyXG59XHJcblxyXG5mdW5jdGlvbiBjb25maWdJbWFnZShpbWFnZTogVUlJbWFnZSwgaW1hZ2VDb25maWc6IFNpbXBsZURpYWxvZy5JbWFnZUNvbmZpZykge1xyXG4gICAgY29uZmlnU2hhcGUoaW1hZ2UsIGltYWdlQ29uZmlnKVxyXG4gICAgaWYgKGltYWdlQ29uZmlnLnNvdXJjZUxlZnQpIGltYWdlLnNvdXJjZUxlZnQgPSBpbWFnZUNvbmZpZy5zb3VyY2VMZWZ0XHJcbiAgICBpZiAoaW1hZ2VDb25maWcuc291cmNlVG9wKSBpbWFnZS5zb3VyY2VUb3AgPSBpbWFnZUNvbmZpZy5zb3VyY2VUb3BcclxuICAgIGlmIChpbWFnZUNvbmZpZy5zb3VyY2VXaWR0aCkgaW1hZ2Uuc291cmNlV2lkdGggPSBpbWFnZUNvbmZpZy5zb3VyY2VXaWR0aFxyXG4gICAgaWYgKGltYWdlQ29uZmlnLnNvdXJjZUhlaWdodCkgaW1hZ2Uuc291cmNlSGVpZ2h0ID0gaW1hZ2VDb25maWcuc291cmNlSGVpZ2h0XHJcbiAgICBpZiAoaW1hZ2VDb25maWcucGFkZGluZ1RvcCkgaW1hZ2UucGFkZGluZ1RvcCA9IGltYWdlQ29uZmlnLnBhZGRpbmdUb3BcclxuICAgIGlmIChpbWFnZUNvbmZpZy5wYWRkaW5nUmlnaHQpIGltYWdlLnBhZGRpbmdSaWdodCA9IGltYWdlQ29uZmlnLnBhZGRpbmdSaWdodFxyXG4gICAgaWYgKGltYWdlQ29uZmlnLnBhZGRpbmdCb3R0b20pIGltYWdlLnBhZGRpbmdCb3R0b20gPSBpbWFnZUNvbmZpZy5wYWRkaW5nQm90dG9tXHJcbiAgICBpZiAoaW1hZ2VDb25maWcucGFkZGluZ0xlZnQpIGltYWdlLnBhZGRpbmdMZWZ0ID0gaW1hZ2VDb25maWcucGFkZGluZ0xlZnRcclxuICAgIGlmIChpbWFnZUNvbmZpZy5zaXplSW5QaXhlbHMpIGltYWdlLnNpemVJblBpeGVscyA9IGltYWdlQ29uZmlnLnNpemVJblBpeGVsc1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb25maWdSZWN0Q29udGFpbmVyKGNvbnRhaW5lcjogVUlDb250YWluZXJSZWN0LCBjb250YWluZXJDb25maWc6IFNpbXBsZURpYWxvZy5SZWN0Q29udGFpbmVyQ29uZmlnKSB7XHJcbiAgICBjb25maWdTaGFwZShjb250YWluZXIsIGNvbnRhaW5lckNvbmZpZylcclxuICAgIGlmIChjb250YWluZXJDb25maWcuYWRhcHRXaWR0aCkgY29udGFpbmVyLmFkYXB0V2lkdGggPSBjb250YWluZXJDb25maWcuYWRhcHRXaWR0aFxyXG4gICAgaWYgKGNvbnRhaW5lckNvbmZpZy5hZGFwdEhlaWdodCkgY29udGFpbmVyLmFkYXB0SGVpZ2h0ID0gY29udGFpbmVyQ29uZmlnLmFkYXB0SGVpZ2h0XHJcbiAgICBpZiAoY29udGFpbmVyQ29uZmlnLnRoaWNrbmVzcykgY29udGFpbmVyLnRoaWNrbmVzcyA9IGNvbnRhaW5lckNvbmZpZy50aGlja25lc3NcclxuICAgIGlmIChjb250YWluZXJDb25maWcuY29sb3IpIGNvbnRhaW5lci5jb2xvciA9IGNvbnRhaW5lckNvbmZpZy5jb2xvclxyXG4gICAgaWYgKGNvbnRhaW5lckNvbmZpZy5hbGlnbm1lbnRVc2VzU2l6ZSkgY29udGFpbmVyLmFsaWdubWVudFVzZXNTaXplID0gY29udGFpbmVyQ29uZmlnLmFsaWdubWVudFVzZXNTaXplXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNvbmZpZ1RleHQodGV4dDogVUlUZXh0LCB0ZXh0Q29uZmlnOiBTaW1wbGVEaWFsb2cuVGV4dENvbmZpZykge1xyXG4gICAgY29uZmlnU2hhcGUodGV4dCwgdGV4dENvbmZpZylcclxuICAgIGlmICh0ZXh0Q29uZmlnLm91dGxpbmVXaWR0aCkgdGV4dC5vdXRsaW5lV2lkdGggPSB0ZXh0Q29uZmlnLm91dGxpbmVXaWR0aFxyXG4gICAgaWYgKHRleHRDb25maWcub3V0bGluZUNvbG9yKSB0ZXh0Lm91dGxpbmVDb2xvciA9IHRleHRDb25maWcub3V0bGluZUNvbG9yXHJcbiAgICBpZiAodGV4dENvbmZpZy5jb2xvcikgdGV4dC5jb2xvciA9IHRleHRDb25maWcuY29sb3JcclxuICAgIGlmICh0ZXh0Q29uZmlnLmZvbnRTaXplKSB0ZXh0LmZvbnRTaXplID0gdGV4dENvbmZpZy5mb250U2l6ZVxyXG4gICAgaWYgKHRleHRDb25maWcuZm9udEF1dG9TaXplKSB0ZXh0LmZvbnRBdXRvU2l6ZSA9IHRleHRDb25maWcuZm9udEF1dG9TaXplXHJcbiAgICBpZiAodGV4dENvbmZpZy5mb250V2VpZ2h0KSB0ZXh0LmZvbnRXZWlnaHQgPSB0ZXh0Q29uZmlnLmZvbnRXZWlnaHRcclxuICAgIGlmICh0ZXh0Q29uZmlnLmxpbmVTcGFjaW5nKSB0ZXh0LmxpbmVTcGFjaW5nID0gdGV4dENvbmZpZy5saW5lU3BhY2luZ1xyXG4gICAgaWYgKHRleHRDb25maWcubGluZUNvdW50KSB0ZXh0LmxpbmVDb3VudCA9IHRleHRDb25maWcubGluZUNvdW50XHJcbiAgICBpZiAodGV4dENvbmZpZy5hZGFwdFdpZHRoKSB0ZXh0LmFkYXB0V2lkdGggPSB0ZXh0Q29uZmlnLmFkYXB0V2lkdGhcclxuICAgIGlmICh0ZXh0Q29uZmlnLmFkYXB0SGVpZ2h0KSB0ZXh0LmFkYXB0SGVpZ2h0ID0gdGV4dENvbmZpZy5hZGFwdEhlaWdodFxyXG4gICAgaWYgKHRleHRDb25maWcudGV4dFdyYXBwaW5nKSB0ZXh0LnRleHRXcmFwcGluZyA9IHRleHRDb25maWcudGV4dFdyYXBwaW5nXHJcbiAgICBpZiAodGV4dENvbmZpZy5zaGFkb3dCbHVyKSB0ZXh0LnNoYWRvd0JsdXIgPSB0ZXh0Q29uZmlnLnNoYWRvd0JsdXJcclxuICAgIGlmICh0ZXh0Q29uZmlnLnNoYWRvd09mZnNldFgpIHRleHQuc2hhZG93T2Zmc2V0WCA9IHRleHRDb25maWcuc2hhZG93T2Zmc2V0WFxyXG4gICAgaWYgKHRleHRDb25maWcuc2hhZG93T2Zmc2V0WSkgdGV4dC5zaGFkb3dPZmZzZXRZID0gdGV4dENvbmZpZy5zaGFkb3dPZmZzZXRZXHJcbiAgICBpZiAodGV4dENvbmZpZy5zaGFkb3dDb2xvcikgdGV4dC5zaGFkb3dDb2xvciA9IHRleHRDb25maWcuc2hhZG93Q29sb3JcclxuICAgIGlmICh0ZXh0Q29uZmlnLmhUZXh0QWxpZ24pIHRleHQuaFRleHRBbGlnbiA9IHRleHRDb25maWcuaFRleHRBbGlnblxyXG4gICAgaWYgKHRleHRDb25maWcudlRleHRBbGlnbikgdGV4dC52VGV4dEFsaWduID0gdGV4dENvbmZpZy52VGV4dEFsaWduXHJcbiAgICBpZiAodGV4dENvbmZpZy5wYWRkaW5nVG9wKSB0ZXh0LnBhZGRpbmdUb3AgPSB0ZXh0Q29uZmlnLnBhZGRpbmdUb3BcclxuICAgIGlmICh0ZXh0Q29uZmlnLnBhZGRpbmdSaWdodCkgdGV4dC5wYWRkaW5nUmlnaHQgPSB0ZXh0Q29uZmlnLnBhZGRpbmdSaWdodFxyXG4gICAgaWYgKHRleHRDb25maWcucGFkZGluZ0JvdHRvbSkgdGV4dC5wYWRkaW5nQm90dG9tID0gdGV4dENvbmZpZy5wYWRkaW5nQm90dG9tXHJcbiAgICBpZiAodGV4dENvbmZpZy5wYWRkaW5nTGVmdCkgdGV4dC5wYWRkaW5nTGVmdCA9IHRleHRDb25maWcucGFkZGluZ0xlZnRcclxufVxyXG5cclxuXHJcbmNsYXNzIFBvcnRyYWl0Q29udGFpbmVyIHtcclxuICAgIGNvbnRhaW5lcjogVUlDb250YWluZXJSZWN0XHJcbiAgICBpbWFnZTogVUlJbWFnZVxyXG4gICAgY29uZmlnOiBTaW1wbGVEaWFsb2cuUG9ydHJhaXRDb25maWdcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFNpbXBsZURpYWxvZy5Qb3J0cmFpdENvbmZpZywgcGFyZW50OiBVSUNvbnRhaW5lclJlY3QpIHtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZ1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbmV3IFVJQ29udGFpbmVyUmVjdChwYXJlbnQpXHJcbiAgICAgICAgdGhpcy5jb25maWdQb3J0cmFpdChjb25maWcpXHJcbiAgICB9XHJcblxyXG4gICAgY29uZmlnUG9ydHJhaXQoY29uZmlnOiBTaW1wbGVEaWFsb2cuUG9ydHJhaXRDb25maWcpIHtcclxuICAgICAgICBpZiAoY29uZmlnLmhBbGlnbikgdGhpcy5jb250YWluZXIuaEFsaWduID0gY29uZmlnLmhBbGlnblxyXG4gICAgICAgIGlmIChjb25maWcudkFsaWduKSB0aGlzLmNvbnRhaW5lci52QWxpZ24gPSBjb25maWcudkFsaWduXHJcbiAgICAgICAgaWYgKGNvbmZpZy5wb3NpdGlvblgpIHRoaXMuY29udGFpbmVyLnBvc2l0aW9uWCA9IGNvbmZpZy5wb3NpdGlvblhcclxuICAgICAgICBpZiAoY29uZmlnLnBvc2l0aW9uWSkgdGhpcy5jb250YWluZXIucG9zaXRpb25ZID0gY29uZmlnLnBvc2l0aW9uWVxyXG4gICAgICAgIGlmIChjb25maWcuaGVpZ2h0KSB0aGlzLmNvbnRhaW5lci5oZWlnaHQgPSBjb25maWcuaGVpZ2h0XHJcbiAgICAgICAgaWYgKGNvbmZpZy53aWR0aCkgdGhpcy5jb250YWluZXIud2lkdGggPSBjb25maWcud2lkdGhcclxuICAgIH1cclxuXHJcbiAgICBjb25maWdQb3J0cmFpdEltYWdlKGltYWdlQ29uZmlnOiBTaW1wbGVEaWFsb2cuSW1hZ2VDb25maWcpIHtcclxuICAgICAgICBjb25maWdJbWFnZSh0aGlzLmltYWdlLCBpbWFnZUNvbmZpZylcclxuICAgICAgICBpZiAoaW1hZ2VDb25maWcuc291cmNlV2lkdGggPT0gbnVsbCAmJiB0aGlzLmNvbmZpZy5zb3VyY2VXaWR0aCkgdGhpcy5pbWFnZS5zb3VyY2VXaWR0aCA9IHRoaXMuY29uZmlnLnNvdXJjZVdpZHRoXHJcbiAgICAgICAgaWYgKGltYWdlQ29uZmlnLnNvdXJjZUhlaWdodCA9PSBudWxsICYmIHRoaXMuY29uZmlnLnNvdXJjZUhlaWdodCkgdGhpcy5pbWFnZS5zb3VyY2VIZWlnaHQgPSB0aGlzLmNvbmZpZy5zb3VyY2VIZWlnaHRcclxuICAgIH1cclxuXHJcbiAgICBzZXRJbWFnZSh0ZXh0dXJlOiBUZXh0dXJlLCBpbWFnZUNvbmZpZz86IFNpbXBsZURpYWxvZy5JbWFnZUNvbmZpZykge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2Uuc291cmNlID0gdGV4dHVyZVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZSA9IG5ldyBVSUltYWdlKHRoaXMuY29udGFpbmVyLCB0ZXh0dXJlKVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuc291cmNlV2lkdGgpIHRoaXMuaW1hZ2Uuc291cmNlV2lkdGggPSB0aGlzLmNvbmZpZy5zb3VyY2VXaWR0aFxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb25maWcuc291cmNlSGVpZ2h0KSB0aGlzLmltYWdlLnNvdXJjZUhlaWdodCA9IHRoaXMuY29uZmlnLnNvdXJjZUhlaWdodFxyXG4gICAgICAgICAgICB0aGlzLmltYWdlLndpZHRoID0gXCIxMDAlXCJcclxuICAgICAgICAgICAgdGhpcy5pbWFnZS5oZWlnaHQgPSBcIjEwMCVcIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGltYWdlQ29uZmlnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnUG9ydHJhaXRJbWFnZShpbWFnZUNvbmZpZylcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci52aXNpYmxlID0gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGhpZGUoKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIudmlzaWJsZSA9IGZhbHNlXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5jbGFzcyBEaWFsb2dUZXh0Q29udGFpbmVyIHtcclxuICAgIGNvbnRhaW5lcjogVUlDb250YWluZXJSZWN0XHJcbiAgICB0ZXh0OiBVSVRleHRcclxuICAgIGNvbmZpZzogU2ltcGxlRGlhbG9nLkRpYWxvZ1RleHRDb25maWdcclxuICAgIGJhY2tncm91bmQ6IFVJSW1hZ2VcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFNpbXBsZURpYWxvZy5EaWFsb2dUZXh0Q29uZmlnLCBwYXJlbnQ6IFVJQ29udGFpbmVyUmVjdCkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbmV3IFVJQ29udGFpbmVyUmVjdChwYXJlbnQpXHJcbiAgICAgICAgaWYgKGNvbmZpZy5iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgIGxldCBiZyA9IG5ldyBVSUltYWdlKHRoaXMuY29udGFpbmVyLCBjb25maWcuYmFja2dyb3VuZClcclxuICAgICAgICAgICAgYmcud2lkdGggPSBcIjEwMCVcIlxyXG4gICAgICAgICAgICBiZy5oZWlnaHQgPSBcIjEwMCVcIlxyXG4gICAgICAgICAgICBiZy5pc1BvaW50ZXJCbG9ja2VyID0gdHJ1ZVxyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBiZ1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnLmJhY2tncm91bmRDb25maWcpIGNvbmZpZ0ltYWdlKGJnLCBjb25maWcuYmFja2dyb3VuZENvbmZpZylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IG5ldyBVSVRleHQodGhpcy5jb250YWluZXIpXHJcbiAgICAgICAgdGhpcy50ZXh0LndpZHRoID0gXCIxMDAlXCJcclxuICAgICAgICB0aGlzLnRleHQuaGVpZ2h0ID0gXCIxMDAlXCJcclxuICAgICAgICB0aGlzLnRleHQuaFRleHRBbGlnbiA9IFwibGVmdFwiXHJcbiAgICAgICAgdGhpcy50ZXh0LnZUZXh0QWxpZ24gPSBcImNlbnRlclwiXHJcbiAgICAgICAgdGhpcy50ZXh0LnRleHRXcmFwcGluZyA9IHRydWVcclxuICAgICAgICB0aGlzLnRleHQuaXNQb2ludGVyQmxvY2tlciA9IGZhbHNlXHJcbiAgICAgICAgaWYgKGNvbmZpZy50ZXh0Q29uZmlnKSBjb25maWdUZXh0KHRoaXMudGV4dCwgY29uZmlnLnRleHRDb25maWcpXHJcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKVxyXG4gICAgfVxyXG5cclxuICAgIHNldENvbmZpZyhjb25maWc6IFNpbXBsZURpYWxvZy5EaWFsb2dUZXh0Q29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWdcclxuICAgICAgICBpZiAoY29uZmlnLmhBbGlnbikgdGhpcy5jb250YWluZXIuaEFsaWduID0gY29uZmlnLmhBbGlnblxyXG4gICAgICAgIGlmIChjb25maWcudkFsaWduKSB0aGlzLmNvbnRhaW5lci52QWxpZ24gPSBjb25maWcudkFsaWduXHJcbiAgICAgICAgaWYgKGNvbmZpZy5wb3NpdGlvblgpIHRoaXMuY29udGFpbmVyLnBvc2l0aW9uWCA9IGNvbmZpZy5wb3NpdGlvblhcclxuICAgICAgICBpZiAoY29uZmlnLnBvc2l0aW9uWSkgdGhpcy5jb250YWluZXIucG9zaXRpb25ZID0gY29uZmlnLnBvc2l0aW9uWVxyXG4gICAgICAgIGlmIChjb25maWcuaGVpZ2h0KSB0aGlzLmNvbnRhaW5lci5oZWlnaHQgPSBjb25maWcuaGVpZ2h0XHJcbiAgICAgICAgaWYgKGNvbmZpZy53aWR0aCkgdGhpcy5jb250YWluZXIud2lkdGggPSBjb25maWcud2lkdGhcclxuXHJcbiAgICAgICAgaWYgKGNvbmZpZy50ZXh0Q29uZmlnKSBjb25maWdUZXh0KHRoaXMudGV4dCwgY29uZmlnLnRleHRDb25maWcpXHJcbiAgICB9XHJcbn1cclxuXHJcbmNsYXNzIE9wdGlvbkNvbnRhaW5lckRhdGEge1xyXG4gICAgaW1hZ2U6IFVJSW1hZ2VcclxuICAgIHRleHQ6IFVJVGV4dFxyXG4gICAgYWN0aXZlOiBib29sZWFuXHJcbiAgICBjYWxsYmFjazogKCkgPT4gdm9pZFxyXG59XHJcblxyXG5jbGFzcyBPcHRpb25Db250YWluZXIge1xyXG4gICAgY29udGFpbmVyOiBVSUNvbnRhaW5lclJlY3RcclxuICAgIG9wdGlvbnNTdGFjazogVUlDb250YWluZXJTdGFja1xyXG4gICAgYmFja2dyb3VuZDogVUlJbWFnZVxyXG4gICAgb3B0aW9uczogT3B0aW9uQ29udGFpbmVyRGF0YVtdID0gW11cclxuICAgIGNvbmZpZzogU2ltcGxlRGlhbG9nLk9wdGlvbnNDb250YWluZXJDb25maWdcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IFNpbXBsZURpYWxvZy5PcHRpb25zQ29udGFpbmVyQ29uZmlnLCBwYXJlbnQ6IFVJQ29udGFpbmVyUmVjdCkge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbmV3IFVJQ29udGFpbmVyUmVjdChwYXJlbnQpXHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gbmV3IFVJSW1hZ2UodGhpcy5jb250YWluZXIsIG51bGwpXHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kLm9wYWNpdHkgPSAwXHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kLndpZHRoID0gXCIxMDAlXCJcclxuICAgICAgICB0aGlzLmJhY2tncm91bmQuaGVpZ2h0ID0gXCIxMDAlXCJcclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zU3RhY2sgPSBuZXcgVUlDb250YWluZXJTdGFjayh0aGlzLmNvbnRhaW5lcilcclxuICAgICAgICB0aGlzLm9wdGlvbnNTdGFjay5hZGFwdEhlaWdodCA9IGZhbHNlXHJcbiAgICAgICAgdGhpcy5vcHRpb25zU3RhY2suYWRhcHRXaWR0aCA9IGZhbHNlXHJcbiAgICAgICAgdGhpcy5vcHRpb25zU3RhY2sud2lkdGggPSBcIjEwMCVcIlxyXG4gICAgICAgIHRoaXMub3B0aW9uc1N0YWNrLmhlaWdodCA9IFwiMTAwJVwiXHJcbiAgICAgICAgdGhpcy5zZXRDb25maWcoY29uZmlnKVxyXG4gICAgfVxyXG5cclxuICAgIHNldENvbmZpZyhjb25maWc6IFNpbXBsZURpYWxvZy5PcHRpb25zQ29udGFpbmVyQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWdcclxuICAgICAgICBpZiAoY29uZmlnLmFkYXB0V2lkdGgpIHRoaXMub3B0aW9uc1N0YWNrLmFkYXB0V2lkdGggPSBjb25maWcuYWRhcHRXaWR0aFxyXG4gICAgICAgIGlmIChjb25maWcuYWRhcHRIZWlnaHQpIHRoaXMub3B0aW9uc1N0YWNrLmFkYXB0SGVpZ2h0ID0gY29uZmlnLmFkYXB0SGVpZ2h0XHJcbiAgICAgICAgaWYgKGNvbmZpZy5jb2xvcikgdGhpcy5jb250YWluZXIuY29sb3IgPSBjb25maWcuY29sb3JcclxuICAgICAgICBpZiAoY29uZmlnLnNwYWNpbmcpIHRoaXMub3B0aW9uc1N0YWNrLnNwYWNpbmcgPSBjb25maWcuc3BhY2luZ1xyXG4gICAgICAgIGlmIChjb25maWcuc3RhY2tPcmllbnRhdGlvbikgdGhpcy5vcHRpb25zU3RhY2suc3RhY2tPcmllbnRhdGlvbiA9IGNvbmZpZy5zdGFja09yaWVudGF0aW9uXHJcbiAgICAgICAgaWYgKGNvbmZpZy5oQWxpZ24pIHRoaXMuY29udGFpbmVyLmhBbGlnbiA9IGNvbmZpZy5oQWxpZ25cclxuICAgICAgICBpZiAoY29uZmlnLnZBbGlnbikgdGhpcy5jb250YWluZXIudkFsaWduID0gY29uZmlnLnZBbGlnblxyXG4gICAgICAgIGlmIChjb25maWcud2lkdGgpIHRoaXMuY29udGFpbmVyLndpZHRoID0gY29uZmlnLndpZHRoXHJcbiAgICAgICAgaWYgKGNvbmZpZy5oZWlnaHQpIHRoaXMuY29udGFpbmVyLmhlaWdodCA9IGNvbmZpZy5oZWlnaHRcclxuICAgICAgICBpZiAoY29uZmlnLnBvc2l0aW9uWCkgdGhpcy5jb250YWluZXIucG9zaXRpb25YID0gY29uZmlnLnBvc2l0aW9uWFxyXG4gICAgICAgIGlmIChjb25maWcucG9zaXRpb25ZKSB0aGlzLmNvbnRhaW5lci5wb3NpdGlvblkgPSBjb25maWcucG9zaXRpb25ZXHJcblxyXG4gICAgICAgIGlmIChjb25maWcuYmFja2dyb3VuZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5iYWNrZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmQuc291cmNlID0gY29uZmlnLmJhY2tncm91bmRcclxuICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZC5vcGFjaXR5ID0gMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb25maWcuYmFja2dyb3VuZENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnSW1hZ2UodGhpcy5iYWNrZ3JvdW5kLCBjb25maWcuYmFja2dyb3VuZENvbmZpZylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2gob3B0aW9uID0+IHtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZy5vcHRpb25zVGV4dENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgY29uZmlnVGV4dChvcHRpb24udGV4dCwgY29uZmlnLm9wdGlvbnNUZXh0Q29uZmlnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb25maWcub3B0aW9uc1RleHRDb25maWcgPT0gbnVsbCB8fCBjb25maWcub3B0aW9uc1RleHRDb25maWcuZm9udEF1dG9TaXplID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbi50ZXh0LmZvbnRTaXplID0gMTBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZE9wdGlvbih0ZXh0OiBzdHJpbmcsIGNhbGxiYWNrOiAoKSA9PiB2b2lkKSB7XHJcbiAgICAgICAgbGV0IG9wdGlvbkRhdGE6IE9wdGlvbkNvbnRhaW5lckRhdGEgPSBudWxsXHJcbiAgICAgICAgY29uc3QgZGVmYXVsdEZvbnRTaXplID0gMTBcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnNbaV0uYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRpb25EYXRhID0gdGhpcy5vcHRpb25zW2ldXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgdWl0ZXh0OiBVSVRleHRcclxuICAgICAgICBsZXQgdWlJbWFnZTogVUlJbWFnZVxyXG5cclxuICAgICAgICBpZiAob3B0aW9uRGF0YSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHVpdGV4dCA9IG9wdGlvbkRhdGEudGV4dFxyXG4gICAgICAgICAgICB1aUltYWdlID0gb3B0aW9uRGF0YS5pbWFnZVxyXG4gICAgICAgICAgICBvcHRpb25EYXRhLmFjdGl2ZSA9IHRydWVcclxuICAgICAgICAgICAgdWlJbWFnZS52aXNpYmxlID0gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHVpdGV4dCA9IG5ldyBVSVRleHQodGhpcy5vcHRpb25zU3RhY2spXHJcbiAgICAgICAgICAgIHVpSW1hZ2UgPSBuZXcgVUlJbWFnZSh1aXRleHQsIG51bGwpXHJcblxyXG4gICAgICAgICAgICB1aXRleHQuYWRhcHRIZWlnaHQgPSB0cnVlXHJcbiAgICAgICAgICAgIHVpdGV4dC5hZGFwdFdpZHRoID0gdHJ1ZVxyXG4gICAgICAgICAgICB1aXRleHQuZm9udFNpemUgPSBkZWZhdWx0Rm9udFNpemVcclxuXHJcbiAgICAgICAgICAgIHVpSW1hZ2Uud2lkdGggPSBcIjEwMCVcIlxyXG4gICAgICAgICAgICB1aUltYWdlLmhlaWdodCA9IFwiMTAwJVwiXHJcbiAgICAgICAgICAgIHVpSW1hZ2Uub3BhY2l0eSA9IDBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVpSW1hZ2Uub25DbGljayA9IG5ldyBPbkNsaWNrKGNhbGxiYWNrKVxyXG4gICAgICAgIHVpSW1hZ2UucGFkZGluZ0xlZnQgPSB1aXRleHQucGFkZGluZ0xlZnRcclxuICAgICAgICB1aUltYWdlLnBhZGRpbmdSaWdodCA9IHVpdGV4dC5wYWRkaW5nUmlnaHRcclxuICAgICAgICB1aUltYWdlLnBhZGRpbmdUb3AgPSB1aXRleHQucGFkZGluZ1RvcFxyXG4gICAgICAgIHVpSW1hZ2UucGFkZGluZ0JvdHRvbSA9IHVpdGV4dC5wYWRkaW5nQm90dG9tXHJcblxyXG4gICAgICAgIHVpdGV4dC52YWx1ZSA9IHRleHRcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm9wdGlvbnNUZXh0Q29uZmlnKSB7XHJcbiAgICAgICAgICAgIGNvbmZpZ1RleHQodWl0ZXh0LCB0aGlzLmNvbmZpZy5vcHRpb25zVGV4dENvbmZpZylcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLm9wdGlvbnNUZXh0Q29uZmlnID09IG51bGwgfHwgdGhpcy5jb25maWcub3B0aW9uc1RleHRDb25maWcuZm9udFNpemUgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB1aXRleHQuZm9udFNpemUgPSBkZWZhdWx0Rm9udFNpemVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25EYXRhID09IG51bGwpIHtcclxuICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHsgdGV4dDogdWl0ZXh0LCBhY3RpdmU6IHRydWUsIGNhbGxiYWNrOiBjYWxsYmFjaywgaW1hZ2U6IHVpSW1hZ2UgfVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucHVzaChvcHRpb25EYXRhKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3B0aW9uRGF0YS5jYWxsYmFjayA9IGNhbGxiYWNrXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhpZGVBbmRDbGVhck9wdGlvbnMoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2ldLmFjdGl2ZSA9IGZhbHNlXHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tpXS50ZXh0LnZpc2libGUgPSBmYWxzZVxyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnNbaV0uaW1hZ2UudmlzaWJsZSA9IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIHNob3coKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9uc1tpXS5hY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1tpXS50ZXh0LnZpc2libGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNbaV0uaW1hZ2UudmlzaWJsZSA9IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRhaW5lci52aXNpYmxlID0gdHJ1ZVxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBPcHRpb25zR3JvdXBEYXRhIHtcclxuICAgIG9wdGlvblNlbGVjdGVkOiBudW1iZXIgPSAtMVxyXG4gICAgb3B0aW9uczogT3B0aW9uQWN0aW9uW10gPSBbXVxyXG59XHJcblxyXG5jbGFzcyBTYXlXaXRoQ2FsbGJhY2tBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB7XHJcbiAgICBwcml2YXRlIGNhbGxiYWNrOiAoKSA9PiBzdHJpbmdcclxuICAgIHByaXZhdGUgZ2V0RGlhbG9nSW5zdGFuY2U6ICgpID0+IFNpbXBsZURpYWxvZ1xyXG4gICAgcHJpdmF0ZSB0ZXh0Q29uZmlnOiBTaW1wbGVEaWFsb2cuVGV4dENvbmZpZ1xyXG4gICAgcHJpdmF0ZSB3b3JkSW5kZXg6IG51bWJlclxyXG4gICAgcHJpdmF0ZSB0aW1lOiBudW1iZXJcclxuICAgIHByaXZhdGUgdGV4dDogc3RyaW5nW11cclxuICAgIHByaXZhdGUgd3JpdHRpbmc6IGJvb2xlYW5cclxuICAgIHByaXZhdGUgdGV4dFNwZWVkOiBudW1iZXJcclxuICAgIHByaXZhdGUgaWRsZVRpbWU6IG51bWJlclxyXG4gICAgcHJpdmF0ZSBsYXN0U2tpcFRpbWU6IG51bWJlclxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRleHQ6ICgpID0+IHN0cmluZywgdGV4dENvbmZpZzogU2ltcGxlRGlhbG9nLlRleHRDb25maWcsIGdldERpYWxvZ0luc3RhbmNlOiAoKSA9PiBTaW1wbGVEaWFsb2csIHRleHRTcGVlZDogbnVtYmVyLCBpZGxlVGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IHRleHRcclxuICAgICAgICB0aGlzLnRleHRDb25maWcgPSB0ZXh0Q29uZmlnXHJcbiAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSA9IGdldERpYWxvZ0luc3RhbmNlXHJcbiAgICAgICAgdGhpcy50ZXh0U3BlZWQgPSB0ZXh0U3BlZWRcclxuICAgICAgICB0aGlzLmlkbGVUaW1lID0gaWRsZVRpbWVcclxuICAgIH1cclxuICAgIG9uU3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudGV4dENvbmZpZykgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLnNldFRleHRDb25maWcodGhpcy50ZXh0Q29uZmlnKVxyXG4gICAgICAgIHRoaXMuaGFzRmluaXNoZWQgPSBmYWxzZVxyXG4gICAgICAgIHRoaXMud29yZEluZGV4ID0gMFxyXG4gICAgICAgIHRoaXMudGltZSA9IDBcclxuICAgICAgICB0aGlzLnRleHQgPSB0aGlzLmNhbGxiYWNrKCkuc3BsaXQoXCIgXCIpXHJcbiAgICAgICAgdGhpcy53cml0dGluZyA9IHRydWVcclxuICAgICAgICB0aGlzLmdldERpYWxvZ0luc3RhbmNlKCkuc2V0VGV4dChcIlwiKVxyXG4gICAgICAgIGlmICghdGhpcy50ZXh0U3BlZWQpIHRoaXMudGV4dFNwZWVkID0gdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLmdldENvbmZpZ0RpYWxvZ1RleHRTcGVlZCgpXHJcbiAgICAgICAgaWYgKCF0aGlzLmlkbGVUaW1lKSB0aGlzLmlkbGVUaW1lID0gdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLmdldENvbmZpZ0RpYWxvZ1RleHRJZGxlVGltZSgpXHJcbiAgICAgICAgdGhpcy5sYXN0U2tpcFRpbWUgPSAwXHJcbiAgICB9XHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLndyaXR0aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZSArPSBkdCAqIHRoaXMudGV4dFNwZWVkXHJcbiAgICAgICAgICAgIGxldCBmbG9vclRpbWUgPSBNYXRoLmNlaWwodGhpcy50aW1lKVxyXG4gICAgICAgICAgICBpZiAoZmxvb3JUaW1lID4gdGhpcy53b3JkSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud29yZEluZGV4ID0gU2NhbGFyLkNsYW1wKGZsb29yVGltZSwgMCwgdGhpcy50ZXh0Lmxlbmd0aClcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLndvcmRJbmRleCA+PSB0aGlzLnRleHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0dGluZyA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lID0gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLnNldFRleHQodGhpcy5nZXRUZXh0KHRoaXMud29yZEluZGV4KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lICs9IGR0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWUgPiB0aGlzLmlkbGVUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0ZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIG9uRmluaXNoKCk6IHZvaWQge1xyXG4gICAgfVxyXG4gICAgc2tpcERpYWxvZygpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy53cml0dGluZykge1xyXG4gICAgICAgICAgICB0aGlzLndyaXR0aW5nID0gZmFsc2VcclxuICAgICAgICAgICAgdGhpcy50aW1lID0gMFxyXG4gICAgICAgICAgICB0aGlzLmdldERpYWxvZ0luc3RhbmNlKCkuc2V0VGV4dCh0aGlzLmdldFRleHQodGhpcy50ZXh0Lmxlbmd0aCkpXHJcbiAgICAgICAgICAgIHRoaXMubGFzdFNraXBUaW1lID0gRGF0ZS5ub3coKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChEYXRlLm5vdygpIC0gdGhpcy5sYXN0U2tpcFRpbWUgPj0gMTUwMCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhc0ZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldFRleHQobGFzdEluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIGxldCByZXQ6IHN0cmluZyA9IFwiXCJcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpICE9IDApIHJldCArPSBcIiBcIlxyXG4gICAgICAgICAgICByZXQgKz0gdGhpcy50ZXh0W2ldXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXRcclxuICAgIH1cclxuICAgIGhhc0ZpbmlzaGVkOiBib29sZWFuID0gZmFsc2U7XHJcbn1cclxuXHJcbmNsYXNzIE9wdGlvbkFjdGlvbiBpbXBsZW1lbnRzIEFjdGlvbnNTZXF1ZW5jZVN5c3RlbS5JQWN0aW9uIHtcclxuICAgIHByaXZhdGUgdGV4dENhbGxiYWNrOiAoKSA9PiBzdHJpbmdcclxuICAgIHByaXZhdGUgZ2V0RGlhbG9nSW5zdGFuY2U6ICgpID0+IFNpbXBsZURpYWxvZ1xyXG4gICAgc2VsZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHRleHRDYWxsYmFjazogKCkgPT4gc3RyaW5nLCBnZXREaWFsb2dJbnN0YW5jZTogKCkgPT4gU2ltcGxlRGlhbG9nKSB7XHJcbiAgICAgICAgdGhpcy50ZXh0Q2FsbGJhY2sgPSB0ZXh0Q2FsbGJhY2tcclxuICAgICAgICB0aGlzLmdldERpYWxvZ0luc3RhbmNlID0gZ2V0RGlhbG9nSW5zdGFuY2VcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0gZmFsc2VcclxuICAgIH1cclxuICAgIG9uU3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLmFkZE9wdGlvbih0aGlzLnRleHRDYWxsYmFjaygpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB0cnVlXHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLmhhc0ZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgfVxyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIH1cclxuICAgIG9uRmluaXNoKCk6IHZvaWQge1xyXG4gICAgfVxyXG4gICAgaGFzRmluaXNoZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxufVxyXG5cclxuY2xhc3MgQ2FsbGJhY2tBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB7XHJcbiAgICBwcml2YXRlIGNhbGxiYWNrOiAoKSA9PiB2b2lkXHJcbiAgICBjb25zdHJ1Y3RvcihjYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFja1xyXG4gICAgfVxyXG4gICAgb25TdGFydCgpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jYWxsYmFjaykgdGhpcy5jYWxsYmFjaygpXHJcbiAgICAgICAgdGhpcy5oYXNGaW5pc2hlZCA9IHRydWVcclxuICAgIH1cclxuICAgIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB9XHJcbiAgICBvbkZpbmlzaCgpOiB2b2lkIHtcclxuICAgIH1cclxuICAgIGhhc0ZpbmlzaGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5jbGFzcyBXYWl0Rm9ySW5wdXRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB7XHJcbiAgICBwcml2YXRlIGdyb3VwOiBPcHRpb25zR3JvdXBEYXRhXHJcbiAgICBwcml2YXRlIGdldERpYWxvZ0luc3RhbmNlOiAoKSA9PiBTaW1wbGVEaWFsb2dcclxuICAgIGNvbnN0cnVjdG9yKGdyb3VwOiBPcHRpb25zR3JvdXBEYXRhLCBnZXREaWFsb2dJbnN0YW5jZTogKCkgPT4gU2ltcGxlRGlhbG9nKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cCA9IGdyb3VwXHJcbiAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSA9IGdldERpYWxvZ0luc3RhbmNlXHJcbiAgICB9XHJcbiAgICBvblN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaGFzRmluaXNoZWQgPSBmYWxzZVxyXG4gICAgICAgIHRoaXMuZ2V0RGlhbG9nSW5zdGFuY2UoKS5zaG93T3B0aW9ucygpXHJcbiAgICB9XHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ncm91cC5vcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwLm9wdGlvbnNbaV0uc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXAub3B0aW9uU2VsZWN0ZWQgPSBpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0ZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLmhpZGVPcHRpb25zKClcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkZpbmlzaCgpOiB2b2lkIHtcclxuICAgIH1cclxuICAgIGhhc0ZpbmlzaGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5jbGFzcyBTaG93UG9ydHJhaXRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB7XHJcbiAgICBwcml2YXRlIGdldERpYWxvZ0luc3RhbmNlOiAoKSA9PiBTaW1wbGVEaWFsb2dcclxuICAgIHByaXZhdGUgY2hhbmdlVGV4dHVyZTogVGV4dHVyZVxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VDb25maWc6IFNpbXBsZURpYWxvZy5JbWFnZUNvbmZpZ1xyXG4gICAgcHJpdmF0ZSBpbmRleDogU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXhcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpbmRleDogU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXgsIGNoYW5nZVRleHR1cmU6IFRleHR1cmUsIGNoYW5nZUNvbmZpZzogU2ltcGxlRGlhbG9nLkltYWdlQ29uZmlnLCBnZXREaWFsb2dJbnN0YW5jZTogKCkgPT4gU2ltcGxlRGlhbG9nKSB7XHJcbiAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSA9IGdldERpYWxvZ0luc3RhbmNlXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VUZXh0dXJlID0gY2hhbmdlVGV4dHVyZVxyXG4gICAgICAgIHRoaXMuY2hhbmdlQ29uZmlnID0gY2hhbmdlQ29uZmlnXHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4XHJcbiAgICB9XHJcbiAgICBvblN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNoYW5nZVRleHR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSgpLnNldFBvcnRyYWl0KHRoaXMuaW5kZXgsIHRoaXMuY2hhbmdlVGV4dHVyZSwgdGhpcy5jaGFuZ2VDb25maWcpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY2hhbmdlQ29uZmlnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2V0RGlhbG9nSW5zdGFuY2UoKS5zZXRQb3J0cmFpdEltYWdlQ29uZmlnKHRoaXMuaW5kZXgsIHRoaXMuY2hhbmdlQ29uZmlnKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdldERpYWxvZ0luc3RhbmNlKCkuc2hvd1BvcnRyYWl0KHRoaXMuaW5kZXgpXHJcbiAgICAgICAgdGhpcy5oYXNGaW5pc2hlZCA9IHRydWVcclxuICAgIH1cclxuICAgIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB9XHJcbiAgICBvbkZpbmlzaCgpOiB2b2lkIHtcclxuICAgIH1cclxuICAgIGhhc0ZpbmlzaGVkOiBib29sZWFuO1xyXG59XHJcblxyXG5jbGFzcyBIaWRlUG9ydHJhaXRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB7XHJcbiAgICBwcml2YXRlIGdldERpYWxvZ0luc3RhbmNlOiAoKSA9PiBTaW1wbGVEaWFsb2dcclxuICAgIHByaXZhdGUgaW5kZXg6IFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4XHJcblxyXG4gICAgY29uc3RydWN0b3IoaW5kZXg6IFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LCBnZXREaWFsb2dJbnN0YW5jZTogKCkgPT4gU2ltcGxlRGlhbG9nKSB7XHJcbiAgICAgICAgdGhpcy5nZXREaWFsb2dJbnN0YW5jZSA9IGdldERpYWxvZ0luc3RhbmNlXHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4XHJcbiAgICB9XHJcbiAgICBvblN0YXJ0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZ2V0RGlhbG9nSW5zdGFuY2UoKS5oaWRlUG9ydHJhaXQodGhpcy5pbmRleClcclxuICAgICAgICB0aGlzLmhhc0ZpbmlzaGVkID0gdHJ1ZVxyXG4gICAgfVxyXG4gICAgdXBkYXRlKGR0OiBudW1iZXIpOiB2b2lkIHtcclxuICAgIH1cclxuICAgIG9uRmluaXNoKCk6IHZvaWQge1xyXG4gICAgfVxyXG4gICAgaGFzRmluaXNoZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIFdhaXRBY3Rpb24gaW1wbGVtZW50cyBBY3Rpb25zU2VxdWVuY2VTeXN0ZW0uSUFjdGlvbiB7XHJcbiAgICBwcml2YXRlIHNlY29uZHM6IG51bWJlclxyXG4gICAgcHJpdmF0ZSBzdGFydGluZ1RpbWU6IG51bWJlclxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNlY29uZHM6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuc2Vjb25kcyA9IHNlY29uZHNcclxuICAgIH1cclxuICAgIG9uU3RhcnQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zdGFydGluZ1RpbWUgPSBEYXRlLm5vdygpXHJcbiAgICAgICAgdGhpcy5oYXNGaW5pc2hlZCA9IGZhbHNlXHJcbiAgICB9XHJcbiAgICB1cGRhdGUoZHQ6IG51bWJlcik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaGFzRmluaXNoZWQgPSAoRGF0ZS5ub3coKSAtIHRoaXMuc3RhcnRpbmdUaW1lKSA+PSB0aGlzLnNlY29uZHMgKiAxMDAwXHJcbiAgICB9XHJcbiAgICBvbkZpbmlzaCgpOiB2b2lkIHtcclxuICAgIH1cclxuICAgIGhhc0ZpbmlzaGVkOiBib29sZWFuO1xyXG59IiwiaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcbmltcG9ydCB7IFNpbXBsZURpYWxvZyB9IGZyb20gXCIuLi9tb2R1bGVzL3NpbXBsZURpYWxvZ1wiO1xyXG5cclxuZnVuY3Rpb24gc2VsZWN0UmFuZG9tKG9wdGlvbnM6IHN0cmluZ1tdKTogc3RyaW5nIHtcclxuICByZXR1cm4gb3B0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAob3B0aW9ucy5sZW5ndGggLSAxKSldO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTXVuYURpYWxvZyBleHRlbmRzIFNpbXBsZURpYWxvZyB7XHJcbiAgcHJpdmF0ZSBkaWFsb2dUcmVlOiBTaW1wbGVEaWFsb2cuRGlhbG9nVHJlZTtcclxuXHJcbiAgcHVibGljIG9uQ29ycmVjdEFuc3dlcjogKHF1ZXN0aW9uSWQ6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbiAgY29uc3RydWN0b3IoZ2FtZUNhbnZhczogVUlDYW52YXMpIHtcclxuICAgIC8vIENyZWF0ZSBhIG5ldyBTaW1wbGVEaWFsb2cgdG8gbWFuYWdlIHRoZSBkaWFsb2cgdHJlZVxyXG4gICAgc3VwZXIoe1xyXG4gICAgICBjYW52YXM6IGdhbWVDYW52YXMsXHJcbiAgICAgIGxlZnRQb3J0cmFpdDoge1xyXG4gICAgICAgIHdpZHRoOiAyNTYsXHJcbiAgICAgICAgaGVpZ2h0OiAyNTYsXHJcbiAgICAgICAgc291cmNlV2lkdGg6IDI1NixcclxuICAgICAgICBzb3VyY2VIZWlnaHQ6IDI1NixcclxuICAgICAgICBwb3NpdGlvblg6IFwiLTE3JVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0UG9ydHJhaXQ6IHtcclxuICAgICAgICB3aWR0aDogMjU2LFxyXG4gICAgICAgIGhlaWdodDogMjU2LFxyXG4gICAgICAgIHNvdXJjZVdpZHRoOiAyNTYsXHJcbiAgICAgICAgc291cmNlSGVpZ2h0OiAyNTYsXHJcbiAgICAgICAgcG9zaXRpb25YOiBcIjE1JVwiXHJcbiAgICAgIH0sXHJcbiAgICAgIGRpYWxvZ1RleHQ6IHtcclxuICAgICAgICB3aWR0aDogXCIyNSVcIixcclxuICAgICAgICBoZWlnaHQ6IFwiMjUlXCIsXHJcbiAgICAgICAgdGV4dFNwZWVkOiAxNSxcclxuICAgICAgICB0ZXh0SWRsZVRpbWU6IDUsXHJcbiAgICAgICAgdGV4dENvbmZpZzogeyBmb250U2l6ZTogMTYsIHBhZGRpbmdMZWZ0OiAyNSwgcGFkZGluZ1JpZ2h0OiAyNSB9LFxyXG4gICAgICAgIGJhY2tncm91bmQ6IHJlc291cmNlcy50ZXh0dXJlcy50ZXh0Q29udGFpbmVyLFxyXG4gICAgICAgIGJhY2tncm91bmRDb25maWc6IHsgc291cmNlV2lkdGg6IDUxMiwgc291cmNlSGVpZ2h0OiAyNTcgfVxyXG4gICAgICB9LFxyXG4gICAgICBvcHRpb25zQ29udGFpbmVyOiB7XHJcbiAgICAgICAgc3RhY2tPcmllbnRhdGlvbjogVUlTdGFja09yaWVudGF0aW9uLlZFUlRJQ0FMLFxyXG4gICAgICAgIHNwYWNpbmc6IDAsXHJcbiAgICAgICAgd2lkdGg6IFwiNDAlXCIsXHJcbiAgICAgICAgaGVpZ2h0OiBcIjEyJVwiLFxyXG4gICAgICAgIHZBbGlnbjogXCJ0b3BcIixcclxuICAgICAgICBoQWxpZ246IFwiY2VudGVyXCIsXHJcbiAgICAgICAgcG9zaXRpb25ZOiBcIi02NSVcIixcclxuICAgICAgICBiYWNrZ3JvdW5kOiByZXNvdXJjZXMudGV4dHVyZXMub3B0aW9uc0NvbnRhaW5lcixcclxuICAgICAgICBiYWNrZ3JvdW5kQ29uZmlnOiB7IHNvdXJjZVdpZHRoOiA1MTIsIHNvdXJjZUhlaWdodDogNzkgfSxcclxuICAgICAgICBvcHRpb25zVGV4dENvbmZpZzogeyBmb250U2l6ZTogMjAsIHBhZGRpbmdMZWZ0OiAyMCwgcG9zaXRpb25ZOiBcIi0zNSVcIiB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFNvbWUgcmFuZG9tIHJlcGxpZXMgZm9yIG11bmFcclxuICAgIGNvbnN0IHJhbmRvbVN0YXJ0aW5nT3B0aW9ucyA9IFtcclxuICAgICAgXCJFbnRlbmRvLi4uXCIsIFwiLi4uXCIsIFwiLi4uT0suLi5cIl07XHJcbiAgICBjb25zdCByYW5kb21Xcm9uZ0Fuc3dlcnMgPSBbXHJcbiAgICAgIFwiVm9jw6ogZXN0w6EgYXBlbmFzIGFkaXZpbmhhbmRvLi4uXCIsXHJcbiAgICAgIFwiTsOjbyBuw6NvIMOpLi4uXCIsXHJcbiAgICAgIFwiTyBxdcOqPyBOZW0gcGVydG8hXCJcclxuICAgIF07XHJcblxyXG4gICAgLy8gVmFyaWFibGVzIHVzZWQgaW4gdGhlIGRpYWxvZyB0cmVlXHJcbiAgICBsZXQgZmlyc3RUaW1lRGlhbG9nID0gdHJ1ZTtcclxuICAgIGxldCBmaXJzdE9wdGlvbkNvcnJlY3QgPSBmYWxzZTtcclxuICAgIGxldCBzZWNvbmRPcHRpb25Db3JyZWN0ID0gZmFsc2U7XHJcbiAgICBsZXQgdGhpcmRPcHRpb25Db3JyZWN0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gRGlhbG9nIHRleHQgY29sb3JzXHJcbiAgICBjb25zdCBucGNDb2xvciA9IENvbG9yNC5XaGl0ZSgpO1xyXG4gICAgY29uc3QgcGxheWVyQ29sb3IgPSBuZXcgQ29sb3I0KDAuODk4LCAwLCAwLjE1Nyk7XHJcblxyXG4gICAgdGhpcy5kaWFsb2dUcmVlID0gbmV3IFNpbXBsZURpYWxvZy5EaWFsb2dUcmVlKClcclxuICAgICAgLmlmKCgpID0+IGZpcnN0VGltZURpYWxvZylcclxuICAgICAgLmNhbGwoKCkgPT4gKGZpcnN0VGltZURpYWxvZyA9IGZhbHNlKSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXREZWZhdWx0XHJcbiAgICAgIClcclxuICAgICAgLnNheSgoKSA9PiBcIk9sw6EgZXN0cmFuaG8hXCIsIHsgY29sb3I6IG5wY0NvbG9yIH0pXHJcbiAgICAgIC5zaG93UG9ydHJhaXQoXHJcbiAgICAgICAgU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXguTEVGVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMucGxheWVyUG9ydHJhaXRTdXJwcmlzZWRcclxuICAgICAgKVxyXG4gICAgICAuc2F5KCgpID0+IFwiVW1hIGVzdMOhdHVhIGRlIGNhY2hvcnJvIGZhbGFudGU/IVwiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoXHJcbiAgICAgICAgKCkgPT5cclxuICAgICAgICAgIFwiVm9jw6ogdGFtYsOpbSDDqSB1bSB1cnNvIGZhbGFudGUuLi4gbsOjbyBtZSB2w6ogZmF6ZW5kbyBuZW5odW0ganVsZ2FtZW50by5cIixcclxuICAgICAgICB7IGNvbG9yOiBucGNDb2xvciB9XHJcbiAgICAgIClcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5MRUZULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5wbGF5ZXJQb3J0cmFpdFRoaW5raW5nXHJcbiAgICAgIClcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXREZWZhdWx0XHJcbiAgICAgIClcclxuICAgICAgLnNheSgoKSA9PiBcIkVuZmltLi4uIGNvbW8gZmHDp28gcGFyYSBzYWlyIGRlc3RlIGx1Z2FyP1wiLCB7XHJcbiAgICAgICAgY29sb3I6IHBsYXllckNvbG9yXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zaG93UG9ydHJhaXQoXHJcbiAgICAgICAgU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXguUklHSFQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLm5wY1BvcnRyYWl0VGhpbmtpbmdcclxuICAgICAgKVxyXG4gICAgICAuc2F5KFxyXG4gICAgICAgICgpID0+XHJcbiAgICAgICAgICBcIlZvY8OqIHRlcsOhIHF1ZSBwYXNzYXIgcG9yIG1pbS4gRSBldSBzw7Mgdm91IGRlaXhhciB2b2PDqiByZXNwb25kZXIgw6BzIG1pbmhhcyB0csOqcyBwZXJndW50YXMuXCIsXHJcbiAgICAgICAgeyBjb2xvcjogbnBjQ29sb3IgfVxyXG4gICAgICApXHJcbiAgICAgIC5zaG93UG9ydHJhaXQoXHJcbiAgICAgICAgU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXguUklHSFQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLm5wY1BvcnRyYWl0U3VycHJpc2VkXHJcbiAgICAgIClcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5MRUZULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5wbGF5ZXJQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoXHJcbiAgICAgICAgKCkgPT5cclxuICAgICAgICAgIFwiRW50w6NvIHbDoSBlbSBmcmVudGUsIGV4cGxvcmUgYXMgb3V0cmFzIHNhbGFzIGUgcmVzb2x2YSBvcyBxdWVicmEtY2FiZcOnYXMgcGFyYSBlbmNvbnRyYXIgYXMgcmVzcG9zdGFzIHBhcmEgbWluaGFzIHBlcmd1bnRhcyFcIixcclxuICAgICAgICB7IGNvbG9yOiBucGNDb2xvciB9XHJcbiAgICAgIClcclxuICAgICAgLnNheSgoKSA9PiBcIkh1bS4uLiBjbGFybywgcG9yIHF1ZSBuw6NvPyBRdWVtIHNvdSBldSBwYXJhIGRpc2N1dGlyP1wiLCB7XHJcbiAgICAgICAgY29sb3I6IHBsYXllckNvbG9yXHJcbiAgICAgIH0pXHJcbiAgICAgIC53YWl0KDMpXHJcbiAgICAgIC5lbHNlKClcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5MRUZULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5wbGF5ZXJQb3J0cmFpdERlZmF1bHRcclxuICAgICAgKVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFRoaW5raW5nXHJcbiAgICAgIClcclxuICAgICAgLmlmKCgpID0+IGZpcnN0T3B0aW9uQ29ycmVjdCAmJiBzZWNvbmRPcHRpb25Db3JyZWN0ICYmIHRoaXJkT3B0aW9uQ29ycmVjdClcclxuICAgICAgLnNheSgoKSA9PiBcIkFjYWJhbW9zIGRlIGZhbGFyLiBcXG5EaWdpdGUgbyBjw7NkaWdvIGUgdm9jw6ogcG9kZSBzYWlyLlwiLCB7XHJcbiAgICAgICAgY29sb3I6IG5wY0NvbG9yXHJcbiAgICAgIH0pXHJcbiAgICAgIC53YWl0KDMpXHJcbiAgICAgIC5lbHNlKClcclxuICAgICAgLnNheSgoKSA9PiBcIlZvY8OqIHJlc29sdmV1IG1ldXMgcXVlYnJhLWNhYmXDp2FzPyB2b2PDqiBzYWJlIGFzIHJlc3Bvc3Rhcz9cIiwge1xyXG4gICAgICAgIGNvbG9yOiBucGNDb2xvclxyXG4gICAgICB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LkxFRlQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLnBsYXllclBvcnRyYWl0VGhpbmtpbmdcclxuICAgICAgKVxyXG4gICAgICAuYmVnaW5PcHRpb25zR3JvdXAoKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBTaW0uXCIpXHJcbiAgICAgIC5zaG93UG9ydHJhaXQoXHJcbiAgICAgICAgU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXguTEVGVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMucGxheWVyUG9ydHJhaXREZWZhdWx0XHJcbiAgICAgIClcclxuICAgICAgLnNheSgoKSA9PiBcIlNpbS4gUG9yIHF1ZSB2b2PDqiBhY2hhIHF1ZSB2aW0gYXTDqSBhcXVpP1wiLCB7XHJcbiAgICAgICAgY29sb3I6IHBsYXllckNvbG9yXHJcbiAgICAgIH0pXHJcbiAgICAgIC5zaG93UG9ydHJhaXQoXHJcbiAgICAgICAgU2ltcGxlRGlhbG9nLlBvcnRyYWl0SW5kZXguUklHSFQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLm5wY1BvcnRyYWl0U3VycHJpc2VkXHJcbiAgICAgIClcclxuICAgICAgLnNheSgoKSA9PiBzZWxlY3RSYW5kb20ocmFuZG9tU3RhcnRpbmdPcHRpb25zKSwgeyBjb2xvcjogbnBjQ29sb3IgfSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXRUaGlua2luZ1xyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gXCJNdWl0byBiZW0gZW50w6NvLi4uIHJlc3BvbmRhLW1lIGlzdG9cIiwgeyBjb2xvcjogbnBjQ29sb3IgfSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXREZWZhdWx0XHJcbiAgICAgIClcclxuICAgICAgLmlmKCgpID0+ICFmaXJzdE9wdGlvbkNvcnJlY3QpXHJcbiAgICAgIC5zYXkoKCkgPT4gXCJRdWFsIMOpIGEgbWluaGEgY29yIGZhdm9yaXRhP1wiLCB7IGNvbG9yOiBucGNDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LkxFRlQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLnBsYXllclBvcnRyYWl0VGhpbmtpbmdcclxuICAgICAgKVxyXG4gICAgICAuYmVnaW5PcHRpb25zR3JvdXAoKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBWZXJkZS5cIilcclxuICAgICAgLnNheSgoKSA9PiBcIsOJIHZlcmRlP1wiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gc2VsZWN0UmFuZG9tKHJhbmRvbVdyb25nQW5zd2VycyksIHsgY29sb3I6IG5wY0NvbG9yIH0pXHJcbiAgICAgIC5lbmRPcHRpb24oKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBBenVsLlwiKVxyXG4gICAgICAuc2F5KCgpID0+IFwiQXp1bC4uLiBjZXJ0bz9cIiwgeyBjb2xvcjogcGxheWVyQ29sb3IgfSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXRTdXJwcmlzZWRcclxuICAgICAgKVxyXG4gICAgICAuc2F5KCgpID0+IHNlbGVjdFJhbmRvbShyYW5kb21Xcm9uZ0Fuc3dlcnMpLCB7IGNvbG9yOiBucGNDb2xvciB9KVxyXG4gICAgICAuZW5kT3B0aW9uKClcclxuICAgICAgLm9wdGlvbigoKSA9PiBcIi0gTGFyYW5qYS5cIilcclxuICAgICAgLnNheSgoKSA9PiBcIkxhcmFuamEhXCIsIHsgY29sb3I6IHBsYXllckNvbG9yIH0pXHJcbiAgICAgIC5jYWxsKCgpID0+IChmaXJzdE9wdGlvbkNvcnJlY3QgPSB0cnVlKSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXRTdXJwcmlzZWRcclxuICAgICAgKVxyXG4gICAgICAuc2F5KCgpID0+IFwiSXNzbyBtZXNtbyFcIiwgeyBjb2xvcjogbnBjQ29sb3IgfSlcclxuICAgICAgLnNheSgoKSA9PiAnXCJObyBtZWlvIGRhIGVzY3VyaWTDo28sIGEgbHV6IHBlcnNpc3RlLlwiJywge1xyXG4gICAgICAgIGNvbG9yOiBucGNDb2xvclxyXG4gICAgICB9KVxyXG4gICAgICAuY2FsbCgoKSA9PiB0aGlzLm9uQ29ycmVjdEFuc3dlcigwKSlcclxuICAgICAgLmVuZE9wdGlvbigpXHJcbiAgICAgIC5lbmRPcHRpb25zR3JvdXAoKVxyXG4gICAgICAuZWxzZSgpXHJcbiAgICAgIC5pZigoKSA9PiAhc2Vjb25kT3B0aW9uQ29ycmVjdClcclxuICAgICAgLnNheSgoKSA9PiBcIlF1YWwgw6kgbyBtZXUgam9nbyBmYXZvcml0bz9cIiwgeyBjb2xvcjogbnBjQ29sb3IgfSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5MRUZULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5wbGF5ZXJQb3J0cmFpdFRoaW5raW5nXHJcbiAgICAgIClcclxuICAgICAgLmJlZ2luT3B0aW9uc0dyb3VwKClcclxuICAgICAgLm9wdGlvbigoKSA9PiBcIi0gSm9nb3MgZGUgYXJjYWRlIHJldHLDtC5cIilcclxuICAgICAgLnNheSgoKSA9PiBcIlPDo28gam9nb3MgZGUgYXJjYWRlIHJldHLDtD9cIiwgeyBjb2xvcjogcGxheWVyQ29sb3IgfSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXRTdXJwcmlzZWRcclxuICAgICAgKVxyXG4gICAgICAuc2F5KCgpID0+IHNlbGVjdFJhbmRvbShyYW5kb21Xcm9uZ0Fuc3dlcnMpLCB7IGNvbG9yOiBucGNDb2xvciB9KVxyXG4gICAgICAuZW5kT3B0aW9uKClcclxuICAgICAgLm9wdGlvbigoKSA9PiBcIi0gRGFyZG9zLlwiKVxyXG4gICAgICAuc2F5KCgpID0+IFwiRGFyZG9zP1wiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuY2FsbCgoKSA9PiAoc2Vjb25kT3B0aW9uQ29ycmVjdCA9IHRydWUpKVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gXCLDiSBzaW0uLi5cIiwgeyBjb2xvcjogbnBjQ29sb3IgfSlcclxuICAgICAgLnNheSgoKSA9PiAnXCJEw6ogbHV6LCBlIGEgZXNjdXJpZMOjbyBkZXNhcGFyZWNlcsOhIHBvciBzaSBtZXNtYS5cIicsIHtcclxuICAgICAgICBjb2xvcjogbnBjQ29sb3JcclxuICAgICAgfSlcclxuICAgICAgLmNhbGwoKCkgPT4gdGhpcy5vbkNvcnJlY3RBbnN3ZXIoMSkpXHJcbiAgICAgIC5lbmRPcHRpb24oKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBCb2xpY2hlLlwiKVxyXG4gICAgICAuc2F5KCgpID0+IFwiQ2xhcm8uLi4gw4kgYm9saWNoZS4uLiBjZXJ0bz9cIiwgeyBjb2xvcjogcGxheWVyQ29sb3IgfSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXRTdXJwcmlzZWRcclxuICAgICAgKVxyXG4gICAgICAuc2F5KCgpID0+IHNlbGVjdFJhbmRvbShyYW5kb21Xcm9uZ0Fuc3dlcnMpLCB7IGNvbG9yOiBucGNDb2xvciB9KVxyXG4gICAgICAuZW5kT3B0aW9uKClcclxuICAgICAgLmVuZE9wdGlvbnNHcm91cCgpXHJcbiAgICAgIC5lbHNlKClcclxuICAgICAgLmlmKCgpID0+ICF0aGlyZE9wdGlvbkNvcnJlY3QpXHJcbiAgICAgIC5zYXkoKCkgPT4gXCJRdWFsIMOpIGEgbWluaGEgc29icmVtZXNhIGZhdm9yaXRhP1wiLCB7IGNvbG9yOiBucGNDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LkxFRlQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLnBsYXllclBvcnRyYWl0VGhpbmtpbmdcclxuICAgICAgKVxyXG4gICAgICAuYmVnaW5PcHRpb25zR3JvdXAoKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBCb2xvIGRlIHF1ZWlqby5cIilcclxuICAgICAgLnNheSgoKSA9PiBcIkJvbG8gZGUgcXVlaWpvP1wiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gc2VsZWN0UmFuZG9tKHJhbmRvbVdyb25nQW5zd2VycyksIHsgY29sb3I6IG5wY0NvbG9yIH0pXHJcbiAgICAgIC5lbmRPcHRpb24oKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBCb2xvIGRlIE1pbGhvLlwiKVxyXG4gICAgICAuc2F5KCgpID0+IFwiSXNzbyDDqSBib2xvIGRlIG1pbGhvPy4uLlwiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gc2VsZWN0UmFuZG9tKHJhbmRvbVdyb25nQW5zd2VycyksIHsgY29sb3I6IG5wY0NvbG9yIH0pXHJcbiAgICAgIC5lbmRPcHRpb24oKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBCb2xvIGRlIGxpbcOjby5cIilcclxuICAgICAgLnNheSgoKSA9PiBcIkJvbG8gZGUgbGltw6NvIVwiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5jYWxsKCgpID0+ICh0aGlyZE9wdGlvbkNvcnJlY3QgPSB0cnVlKSlcclxuICAgICAgLnNob3dQb3J0cmFpdChcclxuICAgICAgICBTaW1wbGVEaWFsb2cuUG9ydHJhaXRJbmRleC5SSUdIVCxcclxuICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMubnBjUG9ydHJhaXRTdXJwcmlzZWRcclxuICAgICAgKVxyXG4gICAgICAuc2F5KCgpID0+IFwiTXVpdG8gYm9tLi4uXCIsIHsgY29sb3I6IG5wY0NvbG9yIH0pXHJcbiAgICAgIC5zYXkoKCkgPT4gJ1wiRMOqIGx1eiBlIGFzIHBlc3NvYXMgZW5jb250cmFyw6NvIG8gY2FtaW5oby5cIicpXHJcbiAgICAgIC5jYWxsKCgpID0+IHRoaXMub25Db3JyZWN0QW5zd2VyKDIpKVxyXG4gICAgICAuZW5kT3B0aW9uKClcclxuICAgICAgLmVuZE9wdGlvbnNHcm91cCgpXHJcbiAgICAgIC5lbmRpZigpXHJcbiAgICAgIC5lbmRpZigpXHJcbiAgICAgIC5lbmRpZigpXHJcbiAgICAgIC5lbmRPcHRpb24oKVxyXG4gICAgICAub3B0aW9uKCgpID0+IFwiLSBOw6NvLCBuw6NvIGFpbmRhLlwiKVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LkxFRlQsXHJcbiAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLnBsYXllclBvcnRyYWl0RGVmYXVsdFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gXCJOw6NvLCBuw6NvIGFpbmRhIVwiLCB7IGNvbG9yOiBwbGF5ZXJDb2xvciB9KVxyXG4gICAgICAuc2hvd1BvcnRyYWl0KFxyXG4gICAgICAgIFNpbXBsZURpYWxvZy5Qb3J0cmFpdEluZGV4LlJJR0hULFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5ucGNQb3J0cmFpdFN1cnByaXNlZFxyXG4gICAgICApXHJcbiAgICAgIC5zYXkoKCkgPT4gXCJWb2PDqiBlc3TDoSBkZXNwZXJkacOnYW5kbyBvIG1ldSB0ZW1wby5cIiwgeyBjb2xvcjogbnBjQ29sb3IgfSlcclxuICAgICAgLmVuZE9wdGlvbigpXHJcbiAgICAgIC5lbmRPcHRpb25zR3JvdXAoKVxyXG4gICAgICAuZW5kaWYoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBydW4oKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNEaWFsb2dUcmVlUnVubmluZygpKSB7XHJcbiAgICAgIHRoaXMucnVuRGlhbG9nVHJlZSh0aGlzLmRpYWxvZ1RyZWUpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBJbWFnZUhpbnQgfSBmcm9tIFwiLi9pbWFnZUhpbnRcIjtcclxuaW1wb3J0IHsgS2V5cGFkIH0gZnJvbSBcIi4va2V5cGFkXCI7XHJcbmltcG9ydCB7IE11bmFEaWFsb2cgfSBmcm9tIFwiLi9tdW5hRGlhbG9nXCI7XHJcblxyXG5leHBvcnQgeyBJbWFnZUhpbnQsIEtleXBhZCwgTXVuYURpYWxvZyB9O1xyXG4iLCIvLyBJbXBvcnRhbmRvIHV0aWxpdMOhcmlvcyBlIHJlY3Vyc29zIG5lY2Vzc8Ohcmlvc1xyXG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcbmltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5pbXBvcnQgeyBEb29yLCBNb2RlbCwgTnVtUGFkTG9jaywgUm90YXRhYmxlRW50aXR5LCBNb3ZhYmxlRW50aXR5IH0gZnJvbSBcIi4uL2dhbWVPYmplY3RzL2luZGV4XCI7XHJcbmltcG9ydCB7IEltYWdlSGludCwgS2V5cGFkIH0gZnJvbSBcIi4uL3VpL2luZGV4XCI7XHJcblxyXG4vLyBGdW7Dp8OjbyBwYXJhIGNyaWFyIGEgc2FsYSA1LCByZWNlYmVuZG8gbyBjYW52YXMgZG8gam9nbyBjb21vIHBhcsOibWV0cm9cclxuZXhwb3J0IGZ1bmN0aW9uIENyZWF0ZVJvb201KGdhbWVDYW52YXM6IFVJQ2FudmFzKTogdm9pZCB7XHJcbiAgLy8gQ3JpYW5kbyBhIHBvcnRhIGUgY29uZmlndXJhbmRvIG8gY29tcG9ydGFtZW50byBkZSBhYmVydHVyYSBhbyBjbGljYXIgbmVsYVxyXG4gIGNvbnN0IGRvb3IgPSBuZXcgRG9vcihcclxuICAgIHJlc291cmNlcy5tb2RlbHMuZG9vcjUsXHJcbiAgICB7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygxOS41MTQxLCA1LjU0NzA5LCAyNS42NzYpXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5kb29yU3F1ZWFrXHJcbiAgKTtcclxuXHJcbiAgLy8gQWRpY2lvbmFuZG8gdW1hIHBpbnR1cmEgY29tIGEgcHJpbWVpcmEgZGljYVxyXG4gIGNvbnN0IHBhaW50aW5nID0gbmV3IE1vZGVsKHJlc291cmNlcy5tb2RlbHMucGljdHVyZUZyYW1lLCB7XHJcbiAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjIuMjI4MywgNy42MDMyNSwgMjAuOTMyNilcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcGFpbnRpbmdIaW50ID0gbmV3IEltYWdlSGludChnYW1lQ2FudmFzLCByZXNvdXJjZXMudGV4dHVyZXMuZmVybkhpbnQpO1xyXG4gIHBhaW50aW5nSGludC5jb250YWluZXIudmlzaWJsZSA9IGZhbHNlO1xyXG4gIHBhaW50aW5nLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBPblBvaW50ZXJEb3duKCgpOiB2b2lkID0+IHtcclxuICAgICAgcGFpbnRpbmdIaW50LmNvbnRhaW5lci52aXNpYmxlID0gdHJ1ZTtcclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgLy8gRSB1bSB0YXBldGUgcXVlIGNvYnJlIHVtIGJpbGhldGUgZGUgcmVjYWRvXHJcbiAgY29uc3QgY2FycGV0ID0gbmV3IFJvdGF0YWJsZUVudGl0eShcclxuICAgIHJlc291cmNlcy5tb2RlbHMuY2FycGV0LFxyXG4gICAge1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjAuNzA3OSwgNS41MDU3OSwgMjQuNjI3MyksXHJcbiAgICAgIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLklkZW50aXR5XHJcbiAgICB9LFxyXG4gICAgdW5kZWZpbmVkLFxyXG4gICAgUXVhdGVybmlvbi5FdWxlcigwLCAtMTAsIDApXHJcbiAgKTtcclxuICBjYXJwZXQuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBjYXJwZXQuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIE8gYmlsaGV0ZSBkZSByZWNhZG8gY29udMOpbSBhIHNlZ3VuZGEgZGljYVxyXG4gIGNvbnN0IHBvc3RpdCA9IG5ldyBNb2RlbChyZXNvdXJjZXMubW9kZWxzLnBvc3RpdCwge1xyXG4gICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDIxLjU3MSwgNS41MDg1NywgMjUuOTUzNClcclxuICB9KTtcclxuXHJcbiAgY29uc3QgcG9zdGl0SGludCA9IG5ldyBJbWFnZUhpbnQoZ2FtZUNhbnZhcywgcmVzb3VyY2VzLnRleHR1cmVzLnBvc3RpdEhpbnQpO1xyXG4gIHBvc3RpdEhpbnQuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuICBwb3N0aXQuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd25cclxuICAgICgoKTogdm9pZCA9PiB7XHJcbiAgICAgIHBvc3RpdEhpbnQuY29udGFpbmVyLnZpc2libGUgPSB0cnVlO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxuICAvLyBQcmVwYXJhbmRvIGEgaW50ZXJmYWNlIGRvIHRlY2xhZG8gbnVtw6lyaWNvXHJcbiAgY29uc3Qga2V5cGFkID0gbmV3IEtleXBhZChnYW1lQ2FudmFzKTtcclxuICBrZXlwYWQuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgLy8gQWRpY2lvbmFuZG8gdW0gcGFpbmVsIHF1ZSBhYnJlIGEgaW50ZXJmYWNlIGFvIHNlciBjbGljYWRvXHJcbiAgY29uc3QgbnVtUGFkTG9jayA9IG5ldyBOdW1QYWRMb2NrKHJlc291cmNlcy5tb2RlbHMubnVtcGFkMSk7XHJcbiAgbnVtUGFkTG9jay5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIGtleXBhZC5jb250YWluZXIudmlzaWJsZSA9IHRydWU7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IGJvb2tzaGVsZiA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5kb29yNCxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMTguOCwgNS40LCAyMy42NSksXHJcbiAgICAgIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLkV1bGVyKDAsIDkwLCAwKSAvLyBSb3RhY2lvbmEgZW0gMTgwIGdyYXVzIGVtIHRvcm5vIGRvIGVpeG8gWVxyXG4gICAgfSksXHJcbiAgICByZXNvdXJjZXMuc291bmRzLm1vdmVPYmplY3QxLFxyXG4gICAgbmV3IFZlY3RvcjMoMCwgMCwgLTQpLFxyXG4gICAgM1xyXG4gICk7XHJcbiAgXHJcblxyXG4gIC8vIENvbmVjdGFuZG8gYSBsw7NnaWNhIGRvIHRlY2xhZG8gbnVtw6lyaWNvXHJcbiAgbGV0IGN1cnJlbnRJbnB1dCA9IFwiXCI7XHJcbiAga2V5cGFkLm9uSW5wdXQgPSAodmFsdWU6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgY3VycmVudElucHV0ICs9IHZhbHVlO1xyXG4gICAga2V5cGFkLmRpc3BsYXkoY3VycmVudElucHV0KTtcclxuICAgIG51bVBhZExvY2sucGxheUJ1dHRvblByZXNzZWQoKTtcclxuICB9O1xyXG4gIGtleXBhZC5vblJlc2V0ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgY3VycmVudElucHV0ID0gXCJcIjtcclxuICAgIGtleXBhZC5kaXNwbGF5KGN1cnJlbnRJbnB1dCk7XHJcbiAgICBudW1QYWRMb2NrLnBsYXlCdXR0b25QcmVzc2VkKCk7XHJcbiAgfTtcclxuICBrZXlwYWQub25TdWJtaXQgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoY3VycmVudElucHV0ID09IFwiMTU1XCIpIHtcclxuICAgICAgLy8gQ29ycmV0byFcclxuICAgICAga2V5cGFkLmRpc3BsYXkoXCJPSyFcIiwgQ29sb3I0LkdyZWVuKCkpO1xyXG4gICAgICBudW1QYWRMb2NrLnBsYXlBY2Nlc3NHcmFudGVkKCk7XHJcbiAgICAgIG51bVBhZExvY2suYWRkQ29tcG9uZW50T3JSZXBsYWNlKFxyXG4gICAgICAgIG5ldyB1dGlscy5FeHBpcmVJbigyMDAwLCAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICBrZXlwYWQuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgIGRvb3Iub3BlbkRvb3IoKTtcclxuICAgICAgICAgIGJvb2tzaGVsZi5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQSBzZW5oYSBlc3TDoSBpbmNvcnJldGFcclxuICAgICAga2V5cGFkLmRpc3BsYXkoXCJFcnJcIiwgQ29sb3I0LlJlZCgpKTtcclxuICAgICAgbnVtUGFkTG9jay5wbGF5QWNjZXNzRGVuaWVkKCk7XHJcbiAgICAgIGN1cnJlbnRJbnB1dCA9IFwiXCI7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iLCIvLyBJbXBvcnRhbmRvIHV0aWxpdMOhcmlvcyBlIHJlY3Vyc29zIG5lY2Vzc8Ohcmlvc1xyXG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcbmltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5pbXBvcnQge1xyXG4gIE1vdmFibGVFbnRpdHksXHJcbiAgTnVtUGFkTG9jayxcclxuICBEb29yLFxyXG4gIFNwb3RsaWdodFxyXG59IGZyb20gXCIuLi9nYW1lT2JqZWN0cy9pbmRleFwiO1xyXG5pbXBvcnQgeyBLZXlwYWQsIE11bmFEaWFsb2cgfSBmcm9tIFwiLi4vdWkvaW5kZXhcIjtcclxuXHJcbi8vIEZ1bsOnw6NvIHBhcmEgY3JpYXIgYSBzYWxhIDYsIHJlY2ViZW5kbyBvIGNhbnZhcyBkbyBqb2dvIGNvbW8gcGFyw6JtZXRyb1xyXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlUm9vbTYoZ2FtZUNhbnZhczogVUlDYW52YXMpOiB2b2lkIHtcclxuICAvLyBDcmlhbmRvIGEgcG9ydGEgZSBjb25maWd1cmFuZG8gbyBjb21wb3J0YW1lbnRvIGRlIGFiZXJ0dXJhIGFvIGNsaWNhciBuZWxhXHJcbiAgY29uc3QgZG9vciA9IG5ldyBEb29yKFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5kb29yNixcclxuICAgIHtcclxuICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDI4LjMsIDAuMjUsIDE5Ljc1KSxcclxuICAgICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMCwgMTgwLCAwKVxyXG4gICAgfSxcclxuICAgIHJlc291cmNlcy5zb3VuZHMuZG9vclNxdWVha1xyXG4gICk7XHJcblxyXG4gIC8vIFVtYSBlc3TDoXR1YSBibG9xdWVpYSBhIHBhc3NhZ2VtXHJcbiAgY29uc3QgbXVuYVN0YXR1ZSA9IG5ldyBNb3ZhYmxlRW50aXR5KFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5tdW5hLFxyXG4gICAgeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjcuMCwgMC4xMDU0LCAyMC43NjUpIH0sXHJcbiAgICByZXNvdXJjZXMuc291bmRzLm1vdmVPYmplY3QxLFxyXG4gICAgbmV3IFZlY3RvcjMoMCwgMCwgMiksXHJcbiAgICAxLjVcclxuICApO1xyXG5cclxuICAvLyBQcmVwYXJhbmRvIGEgaW50ZXJmYWNlIGRvIHRlY2xhZG8gbnVtw6lyaWNvXHJcbiAgY29uc3Qga2V5cGFkID0gbmV3IEtleXBhZChnYW1lQ2FudmFzKTtcclxuICBrZXlwYWQuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuXHJcbiAgLy8gQWRpY2lvbmFuZG8gdW0gcGFpbmVsIHF1ZSBhYnJlIGEgaW50ZXJmYWNlIGFvIHNlciBjbGljYWRvXHJcbiAgY29uc3QgbnVtUGFkTG9jayA9IG5ldyBOdW1QYWRMb2NrKHJlc291cmNlcy5tb2RlbHMubnVtcGFkMik7XHJcbiAgbnVtUGFkTG9jay5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgIGtleXBhZC5jb250YWluZXIudmlzaWJsZSA9IHRydWU7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIENvbmVjdGFuZG8gYSBsw7NnaWNhIGRvIHRlY2xhZG8gbnVtw6lyaWNvXHJcbiAgbGV0IGN1cnJlbnRJbnB1dCA9IFwiXCI7XHJcbiAga2V5cGFkLm9uSW5wdXQgPSAodmFsdWU6IG51bWJlcik6IHZvaWQgPT4ge1xyXG4gICAgY3VycmVudElucHV0ICs9IHZhbHVlO1xyXG4gICAga2V5cGFkLmRpc3BsYXkoY3VycmVudElucHV0KTtcclxuICAgIG51bVBhZExvY2sucGxheUJ1dHRvblByZXNzZWQoKTtcclxuICB9O1xyXG4gIGtleXBhZC5vblJlc2V0ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgY3VycmVudElucHV0ID0gXCJcIjtcclxuICAgIGtleXBhZC5kaXNwbGF5KGN1cnJlbnRJbnB1dCk7XHJcbiAgICBudW1QYWRMb2NrLnBsYXlCdXR0b25QcmVzc2VkKCk7XHJcbiAgfTtcclxuICBrZXlwYWQub25TdWJtaXQgPSAoKTogdm9pZCA9PiB7XHJcbiAgICBpZiAoY3VycmVudElucHV0ID09IFwiMTA0XCIpIHtcclxuICAgICAgLy8gQ29ycmV0byFcclxuICAgICAga2V5cGFkLmRpc3BsYXkoXCJPSyFcIiwgQ29sb3I0LkdyZWVuKCkpO1xyXG4gICAgICBudW1QYWRMb2NrLnBsYXlBY2Nlc3NHcmFudGVkKCk7XHJcbiAgICAgIG51bVBhZExvY2sucmVtb3ZlQ29tcG9uZW50KE9uUG9pbnRlckRvd24pO1xyXG4gICAgICBtdW5hU3RhdHVlLmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgICBudW1QYWRMb2NrLmFkZENvbXBvbmVudE9yUmVwbGFjZShcclxuICAgICAgICBuZXcgdXRpbHMuRGVsYXkoMjAwMCwgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAga2V5cGFkLmNvbnRhaW5lci52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICBkb29yLm9wZW5Eb29yKCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEEgc2VuaGEgZXN0w6EgaW5jb3JyZXRhXHJcbiAgICAgIGtleXBhZC5kaXNwbGF5KFwiRXJyb1wiLCBDb2xvcjQuUmVkKCkpO1xyXG4gICAgICBudW1QYWRMb2NrLnBsYXlBY2Nlc3NEZW5pZWQoKTtcclxuICAgICAgY3VycmVudElucHV0ID0gXCJcIjtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBSZWZsZXRvcmVzXHJcbiAgY29uc3Qgc3BvdExpZ2h0MSA9IG5ldyBTcG90bGlnaHQoXHJcbiAgICB7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygtMC4wNCwgMCwgMClcclxuICAgIH0sXHJcbiAgICBcIjFcIlxyXG4gICk7XHJcbiAgc3BvdExpZ2h0MS5zZXRQYXJlbnQobXVuYVN0YXR1ZSk7XHJcbiAgY29uc3Qgc3BvdExpZ2h0MiA9IG5ldyBTcG90bGlnaHQoXHJcbiAgICB7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygtMC4wMiwgMCwgMCksXHJcbiAgICAgIHJvdGF0aW9uOiBRdWF0ZXJuaW9uLkV1bGVyKDAsIDkwLCAwKVxyXG4gICAgfSxcclxuICAgIFwiMFwiXHJcbiAgKTtcclxuICBzcG90TGlnaHQyLnNldFBhcmVudChtdW5hU3RhdHVlKTtcclxuICBjb25zdCBzcG90TGlnaHQzID0gbmV3IFNwb3RsaWdodChcclxuICAgIHtcclxuICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKC0wLjAzLCAwLCAwKSxcclxuICAgICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMCwgMTgwLCAwKVxyXG4gICAgfSxcclxuICAgIFwiNFwiXHJcbiAgKTtcclxuICBzcG90TGlnaHQzLnNldFBhcmVudChtdW5hU3RhdHVlKTtcclxuXHJcbiAgLy8gRGVmaW5pbmRvIGEgZXN0cnV0dXJhIGRhIMOhcnZvcmUgZGUgZGnDoWxvZ29cclxuICBjb25zdCBkaWFsb2cgPSBuZXcgTXVuYURpYWxvZyhnYW1lQ2FudmFzKTtcclxuXHJcbiAgLy8gSW5pY2lhbmRvIG8gZGnDoWxvZ28gcXVhbmRvIGEgZXN0w6F0dWEgw6kgY2xpY2FkYVxyXG4gIG11bmFTdGF0dWUuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBkaWFsb2cucnVuKCk7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIFJldmVsYW5kbyBhcyBkaWNhcyBjb25mb3JtZSBvIGpvZ2Fkb3IgcmVzcG9uZGUgY29ycmV0YW1lbnRlIMOgcyBwZXJndW50YXMuXHJcbiAgZGlhbG9nLm9uQ29ycmVjdEFuc3dlciA9IChxdWVzdGlvbklkOiBudW1iZXIpID0+IHtcclxuICAgIGlmIChxdWVzdGlvbklkID09PSAwKSB7XHJcbiAgICAgIHNwb3RMaWdodDEuZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkuc2V0KHV0aWxzLlRvZ2dsZVN0YXRlLk9uKTtcclxuICAgIH0gZWxzZSBpZiAocXVlc3Rpb25JZCA9PT0gMSkge1xyXG4gICAgICBzcG90TGlnaHQyLmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnNldCh1dGlscy5Ub2dnbGVTdGF0ZS5Pbik7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzcG90TGlnaHQzLmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnNldCh1dGlscy5Ub2dnbGVTdGF0ZS5Pbik7XHJcbiAgICB9XHJcbiAgfTtcclxufVxyXG4iLCIvLyBJbXBvcnRhbmRvIHJlY3Vyc29zIG5lY2Vzc8Ohcmlvc1xyXG5pbXBvcnQgcmVzb3VyY2VzIGZyb20gXCIuLi9yZXNvdXJjZXNcIjtcclxuaW1wb3J0IHsgRG9vciwgVG9nZ2xlRW50aXR5LCBCdXR0b24gfSBmcm9tIFwiLi4vZ2FtZU9iamVjdHMvaW5kZXhcIjtcclxuaW1wb3J0IHsgVG9nZ2xlTW9kZWxDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy90b2dnbGVNb2RlbENvbXBvbmVudFwiO1xyXG5cclxuLy8gUG9zacOnw7VlcyBkb3MgYm90w7VlcyBlIGzDom1wYWRhc1xyXG5jb25zdCBidXR0b25Qb3NpdGlvbnMgPSBbXHJcbiAgbmV3IFZlY3RvcjMoMjMuMDg5MSwgMS41ODUwNywgMTAuMjUyNiksXHJcbiAgbmV3IFZlY3RvcjMoMjMuMDg5MSwgMS40ODIwNSwgMTEuMjU1NyksXHJcbiAgbmV3IFZlY3RvcjMoMjMuMDg5MSwgMS4zODEyMywgMTIuMjg1NSksXHJcbiAgbmV3IFZlY3RvcjMoMjMuMDg5MSwgMS41MjI1MywgMTMuMjk0MSlcclxuXTtcclxuY29uc3QgYnVsYlBvc2l0aW9ucyA9IFtcclxuICBuZXcgVmVjdG9yMygyMy40MDgsIDIuMjYwMDYsIDEwLjMyNzMpLFxyXG4gIG5ldyBWZWN0b3IzKDIzLjQwOCwgMi4yMjEyMiwgMTEuMTY4MiksXHJcbiAgbmV3IFZlY3RvcjMoMjMuNDA4LCAyLjEwNjkzLCAxMi4xNTY4KSxcclxuICBuZXcgVmVjdG9yMygyMy40MDgsIDIuMjQ1NDIsIDEzLjE4ODgpXHJcbl07XHJcblxyXG4vLyBGdW7Dp8OjbyBwYXJhIGNyaWFyIGEgc2FsYSA3XHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVSb29tNygpOiB2b2lkIHtcclxuICAvLyBDcmlhbmRvIGEgcG9ydGEgZSBjb25maWd1cmFuZG8gbyBjb21wb3J0YW1lbnRvIGRlIGFiZXJ0dXJhIGFvIGNsaWNhciBuZWxhXHJcbiAgY29uc3QgZG9vciA9IG5ldyBEb29yKFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy5kb29yNyxcclxuICAgIHtcclxuICAgICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDI2LjMwODcsIDAsIDE0Ljk0NDkpLFxyXG4gICAgICByb3RhdGlvbjogUXVhdGVybmlvbi5FdWxlcigwLCAtMTAuMiwgMClcclxuICAgIH0sXHJcbiAgICByZXNvdXJjZXMuc291bmRzLmRvb3JTcXVlZWtcclxuICApO1xyXG4gIGRvb3IuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICBpZiAoIWRvb3IuaXNPcGVuKSB7XHJcbiAgICAgICAgZG9vci5vcGVuRG9vcigpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIEzDom1wYWRhcyBkbyBxdWVicmEtY2FiZcOnYVxyXG4gIGNvbnN0IGxpZ2h0YnVsYnM6IFRvZ2dsZUVudGl0eVtdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgIGxpZ2h0YnVsYnMucHVzaChcclxuICAgICAgbmV3IFRvZ2dsZUVudGl0eShcclxuICAgICAgICB7IHBvc2l0aW9uOiBidWxiUG9zaXRpb25zW2ldIH0sXHJcbiAgICAgICAgbmV3IEdMVEZTaGFwZShyZXNvdXJjZXMubW9kZWxzLmxpZ2h0T25TcmMpLFxyXG4gICAgICAgIG5ldyBHTFRGU2hhcGUocmVzb3VyY2VzLm1vZGVscy5saWdodE9mZlNyYylcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIEludGVyYcOnw7VlcyBkb3MgYm90w7VlcyBjb20gYXMgbMOibXBhZGFzXHJcbiAgY29uc3QgYnV0dG9uSW50ZXJhY3Rpb25zID0gW1xyXG4gICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICBsaWdodGJ1bGJzWzFdLmdldENvbXBvbmVudChUb2dnbGVNb2RlbENvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICAgIGxpZ2h0YnVsYnNbMl0uZ2V0Q29tcG9uZW50KFRvZ2dsZU1vZGVsQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgICAgbGlnaHRidWxic1szXS5nZXRDb21wb25lbnQoVG9nZ2xlTW9kZWxDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgfSxcclxuICAgICgpOiB2b2lkID0+IHtcclxuICAgICAgbGlnaHRidWxic1syXS5nZXRDb21wb25lbnQoVG9nZ2xlTW9kZWxDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgICBsaWdodGJ1bGJzWzNdLmdldENvbXBvbmVudChUb2dnbGVNb2RlbENvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICB9LFxyXG4gICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICBsaWdodGJ1bGJzWzBdLmdldENvbXBvbmVudChUb2dnbGVNb2RlbENvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICAgIGxpZ2h0YnVsYnNbM10uZ2V0Q29tcG9uZW50KFRvZ2dsZU1vZGVsQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgIH0sXHJcbiAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgIGxpZ2h0YnVsYnNbMF0uZ2V0Q29tcG9uZW50KFRvZ2dsZU1vZGVsQ29tcG9uZW50KS50b2dnbGUoKTtcclxuICAgICAgbGlnaHRidWxic1syXS5nZXRDb21wb25lbnQoVG9nZ2xlTW9kZWxDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgICBsaWdodGJ1bGJzWzNdLmdldENvbXBvbmVudChUb2dnbGVNb2RlbENvbXBvbmVudCkudG9nZ2xlKCk7XHJcbiAgICB9XHJcbiAgXTtcclxuXHJcbiAgLy8gVmVyaWZpY2Egc2UgdG9kYXMgYXMgbMOibXBhZGFzIGVzdMOjbyBsaWdhZGFzXHJcbiAgY29uc3QgYXJlQWxsTGlnaHRzT24gPSAoKTogYm9vbGVhbiA9PiB7XHJcbiAgICBmb3IgKGNvbnN0IGJ1bGIgb2YgbGlnaHRidWxicykge1xyXG4gICAgICBpZiAoIWJ1bGIuZ2V0Q29tcG9uZW50KFRvZ2dsZU1vZGVsQ29tcG9uZW50KS5pc09uKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH07XHJcblxyXG4gIC8vIEEgVFYgZXhpYmUgYSBkaWNhIHF1YW5kbyBhdGl2YWRhXHJcbiAgY29uc3QgdHZTY3JlZW4gPSBuZXcgVG9nZ2xlRW50aXR5KFxyXG4gICAgeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjYuOTEsIDAsIDEwLjQ0KSB9LFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy50dk9uLFxyXG4gICAgcmVzb3VyY2VzLm1vZGVscy50dk9mZlxyXG4gICk7XHJcblxyXG4gIGxldCBhcmVCdXR0b25zRW5hYmxlZCA9IHRydWU7XHJcbiAgLy8gQ3JpYW5kbyBvcyBib3TDtWVzIGUgY29uZmlndXJhbmRvIG8gY29tcG9ydGFtZW50byBhbyBjbGljYXIgbmVsZXNcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1dHRvblBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgYnV0dG9uID0gbmV3IEJ1dHRvbihyZXNvdXJjZXMubW9kZWxzLnJvdW5kQnV0dG9uLCB7XHJcbiAgICAgIHBvc2l0aW9uOiBidXR0b25Qb3NpdGlvbnNbaV1cclxuICAgIH0pO1xyXG4gICAgYnV0dG9uLmFkZENvbXBvbmVudChcclxuICAgICAgbmV3IE9uUG9pbnRlckRvd24oKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGlmIChhcmVCdXR0b25zRW5hYmxlZCkge1xyXG4gICAgICAgICAgYnV0dG9uSW50ZXJhY3Rpb25zW2ldKCk7XHJcbiAgICAgICAgICBidXR0b24ucHJlc3MoKTtcclxuXHJcbiAgICAgICAgICBpZiAoYXJlQWxsTGlnaHRzT24oKSkge1xyXG4gICAgICAgICAgICBhcmVCdXR0b25zRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0dlNjcmVlbi5nZXRDb21wb25lbnQoVG9nZ2xlTW9kZWxDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE1vdXNlRm9sbG93UGF0aENvbXBvbmVudCB9IGZyb20gXCIuL21vdXNlRm9sbG93UGF0aENvbXBvbmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vdXNlRm9sbG93UGF0aFN5c3RlbSBpbXBsZW1lbnRzIElTeXN0ZW0ge1xyXG4gIHVwZGF0ZShkdDogbnVtYmVyKTogdm9pZCB7XHJcbiAgICBjb25zdCBtb3VzZUdyb3VwID0gZW5naW5lLmdldENvbXBvbmVudEdyb3VwKE1vdXNlRm9sbG93UGF0aENvbXBvbmVudCk7XHJcbiAgICBmb3IgKGNvbnN0IG1vdXNlRW50aXR5IG9mIG1vdXNlR3JvdXAuZW50aXRpZXMpIHtcclxuICAgICAgbW91c2VFbnRpdHlcclxuICAgICAgICAuZ2V0Q29tcG9uZW50KE1vdXNlRm9sbG93UGF0aENvbXBvbmVudClcclxuICAgICAgICAudXBkYXRlKGR0LCBtb3VzZUVudGl0eSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE1vdXNlRm9sbG93UGF0aENvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL21vdXNlRm9sbG93UGF0aENvbXBvbmVudFwiO1xyXG5pbXBvcnQgeyBNb3VzZUZvbGxvd1BhdGhTeXN0ZW0gfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb3VzZUZvbGxvd1BhdGhTeXN0ZW1cIjtcclxuXHJcbmV4cG9ydCB7IE1vdXNlRm9sbG93UGF0aENvbXBvbmVudCwgTW91c2VGb2xsb3dQYXRoU3lzdGVtIH07XHJcbiIsIi8vIEltcG9ydGFuZG8gcmVjdXJzb3MgbmVjZXNzw6FyaW9zXHJcbmltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5pbXBvcnQgeyBEb29yLCBUaWNrZXQsIE1vdXNlLCBBcmNhZGVTY3JlZW4gfSBmcm9tIFwiLi4vZ2FtZU9iamVjdHMvaW5kZXhcIjtcclxuaW1wb3J0IHtcclxuICBNb3VzZUZvbGxvd1BhdGhDb21wb25lbnQsXHJcbiAgTW91c2VGb2xsb3dQYXRoU3lzdGVtXHJcbn0gZnJvbSBcIi4uL2NvbXBvbmVudHMvaW5kZXhcIjtcclxuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleFwiO1xyXG5cclxuLy8gRnVuw6fDo28gcGFyYSBjcmlhciBhIHNhbGEgOFxyXG5leHBvcnQgZnVuY3Rpb24gQ3JlYXRlUm9vbTgoKTogdm9pZCB7XHJcbiAgLy8gQ3JpYW5kbyBhIHBvcnRhIGUgY29uZmlndXJhbmRvIG8gY29tcG9ydGFtZW50byBkZSBhYmVydHVyYSBhbyBjbGljYXIgbmVsYVxyXG4gIGNvbnN0IGRvb3IgPSBuZXcgRG9vcihcclxuICAgIHJlc291cmNlcy5tb2RlbHMuZG9vcjgsXHJcbiAgICB7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMi42MTIsIDAsIDE0LjkyMDUpLFxyXG4gICAgICByb3RhdGlvbjogUXVhdGVybmlvbi5FdWxlcigwLCAxMzUsIDApXHJcbiAgICB9LFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5kb29yU3F1ZWVrXHJcbiAgKTtcclxuICBkb29yLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBPblBvaW50ZXJEb3duKCgpOiB2b2lkID0+IHtcclxuICAgICAgZG9vci5vcGVuRG9vcigpO1xyXG4gICAgfSlcclxuICApO1xyXG5cclxuICAvLyBPIGJpbGhldGUgcmV2ZWxhcsOhIGEgZGljYSBwYXJhIGVzdGEgc2FsYVxyXG4gIGNvbnN0IHRpY2tldCA9IG5ldyBUaWNrZXQoe1xyXG4gICAgcG9zaXRpb246IG5ldyBWZWN0b3IzKDE4LjE5MDMsIDAuMzk3Mjc0LCAxMS43NzEpLFxyXG4gICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMCwgNjMuNiwgMClcclxuICB9KTtcclxuXHJcbiAgLy8gQWRpY2lvbmFuZG8gdW1hIHRlbGEgZGUgZmxpcGVyYW1hXHJcbiAgY29uc3QgY29sdW1uQ291bnQgPSA1O1xyXG4gIGNvbnN0IHJvd0NvdW50ID0gNTtcclxuXHJcbiAgY29uc3QgYXJjYWRlID0gbmV3IEFyY2FkZVNjcmVlbihcclxuICAgIG5ldyBWZWN0b3IzKDAuMywgMC4zLCAxKSxcclxuICAgIGNvbHVtbkNvdW50LFxyXG4gICAgcm93Q291bnQsXHJcbiAgICBuZXcgVmVjdG9yMygwLjA5LCAwLjA1LCAwKSxcclxuICAgIG5ldyBWZWN0b3IzKDE3Ljc5MTMsIDAuODcxMjY2LCAxMC42OTU2KSxcclxuICAgIFF1YXRlcm5pb24uRXVsZXIoMTE4LCAtNDUsIDEyNy4zKVxyXG4gICk7XHJcblxyXG4gIC8vIEFkaWNpb25hbmRvIHJhdG9zIHBhcmEgY29ycmVyIHBlbGEgdGVsYVxyXG4gIGNvbnN0IG1vdXNlMSA9IG5ldyBNb3VzZSh7XHJcbiAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjUuODIsIDEuNDYsIDQuMjUpLFxyXG4gICAgc2NhbGU6IG5ldyBWZWN0b3IzKDAuOCwgMC44LCAwLjgpXHJcbiAgfSk7XHJcbiAgY29uc3QgbW91c2UyID0gbmV3IE1vdXNlKHtcclxuICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyNi41NCwgMC44NSwgMy45KSxcclxuICAgIHNjYWxlOiBuZXcgVmVjdG9yMygwLjgsIDAuOCwgMC44KVxyXG4gIH0pO1xyXG5cclxuICAvLyBBZGljaW9uYW5kbyBzaXN0ZW1hIGRlIGNvbXBvcnRhbWVudG8gcGFyYSBvcyByYXRvc1xyXG4gIGNvbnN0IG1vdXNlQmVoYXZpb3JTeXN0ZW0gPSBuZXcgTW91c2VGb2xsb3dQYXRoU3lzdGVtKCk7XHJcbiAgZW5naW5lLmFkZFN5c3RlbShtb3VzZUJlaGF2aW9yU3lzdGVtKTtcclxuXHJcbiAgLy8gQ3JpYW5kbyBvcyBjb21wb25lbnRlcyBkZSBzZWd1aXIgY2FtaW5obyBwYXJhIG9zIHJhdG9zXHJcbiAgbW91c2UxLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBNb3VzZUZvbGxvd1BhdGhDb21wb25lbnQoXHJcbiAgICAgIDcuNSxcclxuICAgICAgNyxcclxuICAgICAgW1xyXG4gICAgICAgIG5ldyBWZWN0b3IzKDE3LjM3LCAxLjY5LCAxMC4wNiksXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMTYuNywgMS43LCAxMS40NyksXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMTYuMywgMi4yNCwgMTEuMjgpXHJcbiAgICAgIF0sXHJcbiAgICAgIDJcclxuICAgIClcclxuICApO1xyXG4gIG1vdXNlMi5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgTW91c2VGb2xsb3dQYXRoQ29tcG9uZW50KFxyXG4gICAgICAwLFxyXG4gICAgICA2LFxyXG4gICAgICBbXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMTcuNDksIDAuNiwgMTEuODUpLFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDE2LjcsIDEuNywgMTEuNDcpLFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDE2LjM2LCAxLjcsIDEyLjE3KVxyXG4gICAgICBdLFxyXG4gICAgICA1XHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgLy8gUXVhbmRvIG8gam9nYWRvciB2ZW5jZSBvIGpvZ29cclxuICBhcmNhZGUub25Db21wbGV0aW9uID0gKCkgPT4ge1xyXG4gICAgLy8gUmV2ZWxhciBhIGRpY2FcclxuICAgIHRpY2tldC5lbWl0VGlja2V0KCk7XHJcblxyXG4gICAgLy8gUmVtb3ZlciBvcyBjb21wb25lbnRlcyBwYXJhIHBhcmFyIG9zIHJhdG9zXHJcbiAgICBtb3VzZTEucmVtb3ZlQ29tcG9uZW50KHV0aWxzLkZvbGxvd1BhdGhDb21wb25lbnQpO1xyXG4gICAgbW91c2UyLnJlbW92ZUNvbXBvbmVudCh1dGlscy5Gb2xsb3dQYXRoQ29tcG9uZW50KTtcclxuICAgIGVuZ2luZS5yZW1vdmVTeXN0ZW0obW91c2VCZWhhdmlvclN5c3RlbSk7XHJcbiAgfTtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgU3RhdGVNYWNoaW5lIGltcGxlbWVudHMgSVN5c3RlbXtcclxuICBwcml2YXRlIGN1cnJlbnRTdGF0ZTogU3RhdGVNYWNoaW5lLlN0YXRlXHJcblxyXG4gIC8qKlxyXG4gICAqIGdldCBjdXJyZW50IHN0YXRlXHJcbiAgICovXHJcbiAgZ2V0IHN0YXRlKCk6IFJlYWRvbmx5PFN0YXRlTWFjaGluZS5TdGF0ZT4ge3JldHVybiB0aGlzLmN1cnJlbnRTdGF0ZX1cclxuXHJcbiAgLyoqXHJcbiAgICogc2V0IGEgbmV3IHN0YXRlXHJcbiAgICogQHBhcmFtIHN0YXRlIG5ldyBzdGF0ZVxyXG4gICAqL1xyXG4gIHNldFN0YXRlKHN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGUpe1xyXG4gICAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgIT0gbnVsbCl7XHJcbiAgICAgICAgICB0aGlzLmN1cnJlbnRTdGF0ZS5vbktpbGwoKVxyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuY3VycmVudFN0YXRlID0gc3RhdGVcclxuICAgICAgaWYgKHRoaXMuY3VycmVudFN0YXRlICE9IG51bGwpe1xyXG4gICAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUub25TdGFydCgpXHJcbiAgICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGhhbmRsZSBhIGN1c3RvbSBldmVudFxyXG4gICAqIEBwYXJhbSBldmVudCBldmVudCB0byBoYW5kbGVcclxuICAgKi9cclxuICBoYW5kbGVFdmVudChldmVudDogU3RhdGVNYWNoaW5lLklTdGF0ZUV2ZW50KXtcclxuICAgICAgaWYgKHRoaXMuY3VycmVudFN0YXRlICE9IG51bGwpe1xyXG4gICAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUub25IYW5kbGVFdmVudChldmVudClcclxuICAgICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGR0OiBudW1iZXIpe1xyXG4gICAgICBpZiAodGhpcy5jdXJyZW50U3RhdGUgIT0gbnVsbCl7XHJcbiAgICAgICAgICBpZiAoIXRoaXMuY3VycmVudFN0YXRlLm9uVXBkYXRlU3RhdGUoZHQpKXtcclxuICAgICAgICAgICAgICBsZXQgdGVtcCA9IHRoaXMuY3VycmVudFN0YXRlXHJcbiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RhdGUgPSBudWxsXHJcbiAgICAgICAgICAgICAgdGVtcC5vbkVuZCgpXHJcbiAgICAgICAgICAgICAgaWYgKHRlbXAubmV4dFN0YXRlKXtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh0ZW1wLm5leHRTdGF0ZSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgU3RhdGVNYWNoaW5le1xyXG4gIGV4cG9ydCBjbGFzcyBTdGF0ZSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBuZXh0IHN0YXRlIHRvIHN0YXJ0IHdoZW4gdGhpcyBzdGF0ZSBpcyBmaW5pc2hlZFxyXG4gICAgICAgKi9cclxuICAgICAgbmV4dFN0YXRlOiBTdGF0ZSA9IG51bGxcclxuICAgICAgLyoqXHJcbiAgICAgICAqIGNhbGxlZCB3aGVuIHN0YXRlIG1hY2hpbmUgc3RhcnQgdGhpcyBzdGF0ZS5cclxuICAgICAgICovXHJcbiAgICAgIG9uU3RhcnQoKTogdm9pZCB7XHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIGNhbGxlZCB3aGVuIHN0YXRlIG1hY2hpbmUgdXBkYXRlcyB0aGlzIHN0YXRlLlxyXG4gICAgICAgKiByZXR1cm4gdHJ1ZSBpZiBzdGF0ZSBpcyBzdGlsbCBhY3RpdmUgb3IgZmFsc2UgaWYgc3RhdGUgc2hvdWxkIGZpbmlzaFxyXG4gICAgICAgKiBAcGFyYW0gZHQgZGVsdGEgdGltZVxyXG4gICAgICAgKi8gICAgXHJcbiAgICAgIG9uVXBkYXRlU3RhdGUoZHQ6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH1cclxuICAgICAgLyoqXHJcbiAgICAgICAqIGNhbGxlZCB3aGVuIHN0YXRlIGhhcyBmaW5pc2hcclxuICAgICAgICovXHJcbiAgICAgIG9uRW5kKCk6IHZvaWQge1xyXG4gICAgICB9XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBjYWxsZWQgd2hlbiBzdGF0ZSBtYWNoaW5lIGtpbGwgdGhpcyBzdGF0ZSB0byBzdGFydCBhbm90aGVyIHN0YXRlXHJcbiAgICAgICAqL1xyXG4gICAgICBvbktpbGwoKTogdm9pZHtcclxuICAgICAgfVxyXG4gICAgICAvKipcclxuICAgICAgICogaGFuZGxlIGV2ZW50IHJlY2VpdmVkIGJ5IHRoZSBzdGF0ZSBtYWNoaW5lXHJcbiAgICAgICAqIEBwYXJhbSBldmVudCBldmVudCByZWNlaXZlZCBieSB0aGUgc3RhdGUgbWFjaGluZVxyXG4gICAgICAgKi9cclxuICAgICAgb25IYW5kbGVFdmVudChldmVudDogSVN0YXRlRXZlbnQpe1xyXG4gICAgICB9XHJcbiAgfVxyXG5cclxuICBleHBvcnQgaW50ZXJmYWNlIElTdGF0ZUV2ZW50e1xyXG4gICAgICAvKipcclxuICAgICAgICogcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IHN0YXRlIG1hY2hpbmVcclxuICAgICAgICovXHJcbiAgICAgIHN0YXRlTWFjaGluZTogU3RhdGVNYWNoaW5lXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgU3RhdGVNYWNoaW5lIH0gZnJvbSBcIi4uL21vZHVsZXMvc3RhdGVNYWNoaW5lXCI7XHJcblxyXG4vKipcclxuICogRXZlbnRvIHBhcmEgYSBtw6FxdWluYSBkZSBlc3RhZG9zIHF1YW5kbyB1bWEgY29saXPDo28gw6kgYWNpb25hZGEuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgU3RhdGVNYWNoaW5lQ29sbGlzaW9uRXZlbnQgaW1wbGVtZW50cyBTdGF0ZU1hY2hpbmUuSVN0YXRlRXZlbnQge1xyXG4gIHN0YXRpYyByZWFkb25seSBQSUtFUyA9IDA7XHJcbiAgc3RhdGljIHJlYWRvbmx5IEJPWEVTID0gMTtcclxuICBzdGF0aWMgcmVhZG9ubHkgRkFOUyA9IDI7XHJcbiAgc3RhdGljIHJlYWRvbmx5IENBR0UgPSAzO1xyXG5cclxuICBzdGF0ZU1hY2hpbmU6IFN0YXRlTWFjaGluZTtcclxuICBlbnRpdHk6IEVudGl0eTtcclxuICB0cmlnZ2VyVHlwZTogbnVtYmVyO1xyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBzdGF0ZU1hY2hpbmUgUmVmZXLDqm5jaWEgZGEgbcOhcXVpbmEgZGUgZXN0YWRvc1xyXG4gICAqIEBwYXJhbSBlbnRpdHkgUmVmZXLDqm5jaWEgZGEgZW50aWRhZGUgY29tIGEgcXVhbCBjb2xpZGltb3NcclxuICAgKiBAcGFyYW0gdHJpZ2dlclR5cGUgVGlwbyBkbyBnYXRpbGhvIGNvbSBvIHF1YWwgY29saWRpbW9zXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioc3RhdGVNYWNoaW5lOiBTdGF0ZU1hY2hpbmUsIGVudGl0eTogRW50aXR5LCB0cmlnZ2VyVHlwZTogbnVtYmVyKSB7XHJcbiAgICB0aGlzLnN0YXRlTWFjaGluZSA9IHN0YXRlTWFjaGluZTtcclxuICAgIHRoaXMuZW50aXR5ID0gZW50aXR5O1xyXG4gICAgdGhpcy50cmlnZ2VyVHlwZSA9IHRyaWdnZXJUeXBlO1xyXG4gIH1cclxufVxyXG4iLCIvKipcclxuICogSW1wb3J0YcOnw6NvIGRhIG3DoXF1aW5hIGRlIGVzdGFkb3MuXHJcbiAqL1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmUgfSBmcm9tIFwiLi4vbW9kdWxlcy9zdGF0ZU1hY2hpbmVcIjtcclxuXHJcbi8qKlxyXG4gKiBFdmVudG8gcGFyYSBhIG3DoXF1aW5hIGRlIGVzdGFkb3MgcXVhbmRvIGNsaWNhbW9zIG5vIG1vdXNlIG91IG5hIGJvbGhhLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFN0YXRlTWFjaGluZU9uQ2xpY2tFdmVudCBpbXBsZW1lbnRzIFN0YXRlTWFjaGluZS5JU3RhdGVFdmVudCB7XHJcbiAgc3RhdGVNYWNoaW5lOiBTdGF0ZU1hY2hpbmU7XHJcbiAgYnViYmxlU3RhdGU6IFN0YXRlTWFjaGluZS5TdGF0ZTtcclxuICBidXJzdFN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnN0cnV0b3IgZGEgY2xhc3NlLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHN0YXRlTWFjaGluZSBSZWZlcsOqbmNpYSDDoCBtw6FxdWluYSBkZSBlc3RhZG9zLlxyXG4gICAqIEBwYXJhbSBidWJibGVTdGF0ZSBSZWZlcsOqbmNpYSBhbyBlc3RhZG8gcGFyYSBjcmlhciBhIGJvbGhhLlxyXG4gICAqIEBwYXJhbSBidXJzdFN0YXRlIFJlZmVyw6puY2lhIGFvIGVzdGFkbyBwYXJhIGVzdG91cmFyIGEgYm9saGEuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzdGF0ZU1hY2hpbmU6IFN0YXRlTWFjaGluZSxcclxuICAgIGJ1YmJsZVN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGUsXHJcbiAgICBidXJzdFN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGVcclxuICApIHtcclxuICAgIHRoaXMuc3RhdGVNYWNoaW5lID0gc3RhdGVNYWNoaW5lO1xyXG4gICAgdGhpcy5idWJibGVTdGF0ZSA9IGJ1YmJsZVN0YXRlO1xyXG4gICAgdGhpcy5idXJzdFN0YXRlID0gYnVyc3RTdGF0ZTtcclxuICB9XHJcbn1cclxuIiwiQENvbXBvbmVudChcIm1vdXNlQ29tcG9uZW50XCIpXHJcbmV4cG9ydCBjbGFzcyBNb3VzZUNvbXBvbmVudCB7XHJcbiAgZGlyZWN0aW9uOiBWZWN0b3IzO1xyXG4gIG1vdXNlRW50aXR5OiBFbnRpdHk7XHJcbiAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XHJcbiAgYnViYmxlOiBFbnRpdHkgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihtb3VzZUVudGl0eTogRW50aXR5KSB7XHJcbiAgICB0aGlzLnRyYW5zZm9ybSA9IG1vdXNlRW50aXR5LmdldENvbXBvbmVudChUcmFuc2Zvcm0pO1xyXG4gICAgdGhpcy5tb3VzZUVudGl0eSA9IG1vdXNlRW50aXR5O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTdGF0ZU1hY2hpbmUgfSBmcm9tIFwiLi4vbW9kdWxlcy9zdGF0ZU1hY2hpbmVcIjtcclxuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgeyBNb3VzZUNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL21vdXNlQ29tcG9uZW50XCI7XHJcblxyXG4vKipcclxuICogRXN0YWRvIGRlIGFwYXJlY2ltZW50byBkbyByYXRvLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vdXNlU3RhdGVBcHBlYXIgZXh0ZW5kcyBTdGF0ZU1hY2hpbmUuU3RhdGUge1xyXG4gIG1vdXNlQ29tcG9uZW50OiBNb3VzZUNvbXBvbmVudDtcclxuXHJcbiAgY29uc3RydWN0b3IobW91c2VDb21wb25lbnQ6IE1vdXNlQ29tcG9uZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudCA9IG1vdXNlQ29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBlc3RhZG8gY29tZcOnYS5cclxuICAgKi9cclxuICBvblN0YXJ0KCkge1xyXG4gICAgLy8gRGVmaW5lIGEgcG9zacOnw6NvIGluaWNpYWwgZG8gcmF0b1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24gPSBuZXcgVmVjdG9yMyhcclxuICAgICAgLTAuODcyMDgzLFxyXG4gICAgICAxLFxyXG4gICAgICAtMC41Nzk0MzlcclxuICAgICk7XHJcbiAgICAvLyBEZWZpbmUgYSBlc2NhbGEgaW5pY2lhbCBkbyByYXRvXHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5zY2FsZSA9IFZlY3RvcjMuWmVybygpO1xyXG4gICAgLy8gRGVmaW5lIGEgZGlyZcOnw6NvIGNvbW8gemVyb1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC5kaXJlY3Rpb24gPSBWZWN0b3IzLlplcm8oKTtcclxuICAgIC8vIEluaWNpYSBhIGVzY2FsYSBkbyByYXRvIGUgZGVmaW5lIHN1YSBkaXJlw6fDo28gcXVhbmRvIHRlcm1pbmFyIGRlIGVzY2Fsb25hclxyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC5tb3VzZUVudGl0eS5hZGRDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5TY2FsZVRyYW5zZm9ybUNvbXBvbmVudChcclxuICAgICAgICBWZWN0b3IzLlplcm8oKSxcclxuICAgICAgICBWZWN0b3IzLk9uZSgpLFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC5kaXJlY3Rpb24gPSBWZWN0b3IzLlJpZ2h0KCk7XHJcbiAgICAgICAgICB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5sb29rQXQoXHJcbiAgICAgICAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLmFkZChcclxuICAgICAgICAgICAgICB0aGlzLm1vdXNlQ29tcG9uZW50LmRpcmVjdGlvblxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdXRpbHMuSW50ZXJwb2xhdGlvblR5cGUuRUFTRVFVQURcclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RhdGVNYWNoaW5lIH0gZnJvbSBcIi4uL21vZHVsZXMvc3RhdGVNYWNoaW5lXCI7XHJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IHsgTW91c2VDb21wb25lbnQgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb3VzZUNvbXBvbmVudFwiO1xyXG5cclxuLyoqXHJcbiAqIEVzdGFkbyBwYXJhIHF1YW5kbyBvIHJhdG8gbW9ycmUuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW91c2VEZWFkU3RhdGUgZXh0ZW5kcyBTdGF0ZU1hY2hpbmUuU3RhdGUge1xyXG4gIG1vdXNlQ29tcG9uZW50OiBNb3VzZUNvbXBvbmVudDtcclxuICBpc1N0YXRlUnVubmluZzogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IobW91c2VDb21wb25lbnQ6IE1vdXNlQ29tcG9uZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudCA9IG1vdXNlQ29tcG9uZW50O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBlc3RhZG8gY29tZcOnYS5cclxuICAgKi9cclxuICBvblN0YXJ0KCkge1xyXG4gICAgLy8gRXN0YWRvIGVzdMOhIGVtIGV4ZWN1w6fDo29cclxuICAgIHRoaXMuaXNTdGF0ZVJ1bm5pbmcgPSB0cnVlO1xyXG4gICAgLy8gRGVmaW5lIG8gdGVtcG8gcGFyYSBvcyBjb21wb25lbnRlcyBkZSB0cmFuc2Zvcm1hw6fDo28gZG8gc2lzdGVtYVxyXG4gICAgY29uc3QgdGltZSA9IDEuNTtcclxuICAgIC8vIFJvdGFjaW9uYSBvIHJhdG9cclxuICAgIHRoaXMubW91c2VDb21wb25lbnQubW91c2VFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgICBuZXcgdXRpbHMuUm90YXRlVHJhbnNmb3JtQ29tcG9uZW50KFxyXG4gICAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnJvdGF0aW9uLFxyXG4gICAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnJvdGF0aW9uLm11bHRpcGx5KFxyXG4gICAgICAgICAgUXVhdGVybmlvbi5FdWxlcigwLCAyNzAsIDApXHJcbiAgICAgICAgKSxcclxuICAgICAgICB0aW1lXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICAvLyBFIGRpbWVuc2lvbmEgbyByYXRvIHBhcmEgYmFpeG9cclxuICAgIHRoaXMubW91c2VDb21wb25lbnQubW91c2VFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgICBuZXcgdXRpbHMuU2NhbGVUcmFuc2Zvcm1Db21wb25lbnQoXHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0uc2NhbGUsXHJcbiAgICAgICAgVmVjdG9yMy5aZXJvKCksXHJcbiAgICAgICAgdGltZSxcclxuICAgICAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAvLyBBZ29yYSBvIGVzdGFkbyBkZXZlIHRlcm1pbmFyXHJcbiAgICAgICAgICB0aGlzLmlzU3RhdGVSdW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1dGlscy5JbnRlcnBvbGF0aW9uVHlwZS5FQVNFSU5RVUFEXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyDDqSBhdHVhbGl6YWRvLlxyXG4gICAqIEBwYXJhbSBkdCBEZWx0YS5cclxuICAgKiBSZXRvcm5hIFRSVUUgcGFyYSBjb250aW51YXIgbyBlc3RhZG8sIEZBTFNFIHBhcmEgZmluYWxpemFyIG8gZXN0YWRvLlxyXG4gICAqL1xyXG4gIG9uVXBkYXRlU3RhdGUoKSB7XHJcbiAgICAvLyBPIGVzdGFkbyBlc3TDoSBlbSBleGVjdcOnw6NvP1xyXG4gICAgcmV0dXJuIHRoaXMuaXNTdGF0ZVJ1bm5pbmc7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gXCIuLi9tb2R1bGVzL3N0YXRlTWFjaGluZVwiO1xyXG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcbmltcG9ydCB7IE1vdXNlQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW91c2VDb21wb25lbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBFc3RhZG8gcGFyYSBmYXplciBvIHJhdG8gZW50cmFyIG5hIGdhaW9sYS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb3VzZUVudGVyQ2FnZVN0YXRlIGV4dGVuZHMgU3RhdGVNYWNoaW5lLlN0YXRlIHtcclxuICBtb3VzZUNvbXBvbmVudDogTW91c2VDb21wb25lbnQ7XHJcbiAgaXNTdGF0ZVJ1bm5pbmc6IGJvb2xlYW47XHJcbiAgb25TdGF0ZUZpbmlzaDogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JpYSB1bWEgaW5zdMOibmNpYSBkbyBlc3RhZG8uXHJcbiAgICogQHBhcmFtIG1vdXNlQ29tcG9uZW50IENvbXBvbmVudGUgZG8gcmF0by5cclxuICAgKiBAcGFyYW0gb25TdGF0ZUZpbmlzaCBDYWxsYmFjayBxdWFuZG8gbyBlc3RhZG8gdGVybWluYS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihtb3VzZUNvbXBvbmVudDogTW91c2VDb21wb25lbnQsIG9uU3RhdGVGaW5pc2g6ICgpID0+IHZvaWQpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50ID0gbW91c2VDb21wb25lbnQ7XHJcbiAgICB0aGlzLm9uU3RhdGVGaW5pc2ggPSBvblN0YXRlRmluaXNoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBlc3RhZG8gY29tZcOnYS5cclxuICAgKi9cclxuICBvblN0YXJ0KCkge1xyXG4gICAgLy8gTyBlc3RhZG8gZXN0w6EgZW0gZXhlY3XDp8Ojb1xyXG4gICAgdGhpcy5pc1N0YXRlUnVubmluZyA9IHRydWU7XHJcbiAgICAvLyBWYW1vcyBtb3ZlciBvIHJhdG8gcGFyYSBkZW50cm8gZGEgZ2Fpb2xhXHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50Lm1vdXNlRW50aXR5LmFkZENvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLk1vdmVUcmFuc2Zvcm1Db21wb25lbnQoXHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24sXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMS44NTI3NSwgMS4wNjk2NSwgLTAuMDQpLFxyXG4gICAgICAgIDEuNSxcclxuICAgICAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAvLyBPIGVzdGFkbyBkZXZlIHRlcm1pbmFyIGFnb3JhXHJcbiAgICAgICAgICB0aGlzLmlzU3RhdGVSdW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1dGlscy5JbnRlcnBvbGF0aW9uVHlwZS5FQVNFUVVBRFxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBlc3RhZG8gw6kgYXR1YWxpemFkby5cclxuICAgKiBAcGFyYW0gZHQgRGVsdGEuXHJcbiAgICogUmV0b3JuYSBUUlVFIHBhcmEgY29udGludWFyIG8gZXN0YWRvLCBGQUxTRSBwYXJhIGZpbmFsaXphciBvIGVzdGFkby5cclxuICAgKi9cclxuICBvblVwZGF0ZVN0YXRlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaXNTdGF0ZVJ1bm5pbmc7XHJcbiAgfVxyXG5cclxuICBvbkVuZCgpIHtcclxuICAgIC8vIENoYW1hZGEgZGUgcmV0b3Jub1xyXG4gICAgaWYgKHRoaXMub25TdGF0ZUZpbmlzaCkgdGhpcy5vblN0YXRlRmluaXNoKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gXCIuLi9tb2R1bGVzL3N0YXRlTWFjaGluZVwiO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50XCI7XHJcbmltcG9ydCB7IFN0YXRlTWFjaGluZU9uQ2xpY2tFdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZU9uQ2xpY2tFdmVudFwiO1xyXG5pbXBvcnQgeyBNb3VzZUNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL21vdXNlQ29tcG9uZW50XCI7XHJcblxyXG4vKipcclxuICogRXN0YWRvIGRlIGNhbWluaGFkYSBkbyByYXRvLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vdXNlU3RhdGVXYWxraW5nIGV4dGVuZHMgU3RhdGVNYWNoaW5lLlN0YXRlIHtcclxuICBtb3VzZUNvbXBvbmVudDogTW91c2VDb21wb25lbnQ7XHJcbiAgZGVhZFN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGU7XHJcbiAgY2FnZVN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGU7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyaWFyIHVtYSBpbnN0w6JuY2lhIGRvIGVzdGFkb1xyXG4gICAqIEBwYXJhbSBtb3VzZUNvbXBvbmVudCBDb21wb25lbnRlIGRvIHJhdG9cclxuICAgKiBAcGFyYW0gZGVhZFN0YXRlIEVzdGFkbyBwYXJhIG8gcmF0byBtb3JyZXJcclxuICAgKiBAcGFyYW0gY2FnZVN0YXRlIEVzdGFkbyBwYXJhIGVudHJhciBuYSBnYWlvbGFcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIG1vdXNlQ29tcG9uZW50OiBNb3VzZUNvbXBvbmVudCxcclxuICAgIGRlYWRTdGF0ZTogU3RhdGVNYWNoaW5lLlN0YXRlLFxyXG4gICAgY2FnZVN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGVcclxuICApIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50ID0gbW91c2VDb21wb25lbnQ7XHJcbiAgICB0aGlzLmRlYWRTdGF0ZSA9IGRlYWRTdGF0ZTtcclxuICAgIHRoaXMuY2FnZVN0YXRlID0gY2FnZVN0YXRlO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyBjb21lw6dhLlxyXG4gICAqL1xyXG4gIG9uU3RhcnQoKSB7XHJcbiAgICAvLyBSb3RhIG8gcmF0byBwYXJhIG9saGFyIG5hIGRpcmXDp8Ojb1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ubG9va0F0KFxyXG4gICAgICB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQodGhpcy5tb3VzZUNvbXBvbmVudC5kaXJlY3Rpb24pXHJcbiAgICApO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyDDqSBhdHVhbGl6YWRvLlxyXG4gICAqIEBwYXJhbSBkdCBkZWx0YVxyXG4gICAqIFJldG9ybmEgVFJVRSBwYXJhIG1hbnRlciBvIGVzdGFkbyBlbSBleGVjdcOnw6NvLCBGQUxTRSBwYXJhIGZpbmFsaXphciBvIGVzdGFkb1xyXG4gICAqL1xyXG4gIG9uVXBkYXRlU3RhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgLy8gTW92ZSBvIHJhdG9cclxuICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uID0gdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24uYWRkKFxyXG4gICAgICB0aGlzLm1vdXNlQ29tcG9uZW50LmRpcmVjdGlvbi5zY2FsZSgwLjUgKiBkdClcclxuICAgICk7XHJcbiAgICAvLyBWZXJpZmljYSBvcyBsaW1pdGVzIGRvIGNlbsOhcmlvIHBhcmEgZmF6ZXIgbyByYXRvIHF1aWNhciBlIGlyIG5hIG91dHJhIGRpcmXDp8Ojb1xyXG4gICAgaWYgKHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnggPCAtMS4xMikge1xyXG4gICAgICB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5wb3NpdGlvbi54ID0gLTEuMTI7XHJcbiAgICAgIHRoaXMuY2hhbmdlRGlyZWN0aW9uKCk7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnggPiAwLjk4KSB7XHJcbiAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnggPSAwLjk4O1xyXG4gICAgICB0aGlzLmNoYW5nZURpcmVjdGlvbigpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnogPiAxLjMzKSB7XHJcbiAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnogPSAxLjMzO1xyXG4gICAgICB0aGlzLmNoYW5nZURpcmVjdGlvbigpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5wb3NpdGlvbi56IDwgLTEuMzcpIHtcclxuICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueiA9IC0xLjM3O1xyXG4gICAgICB0aGlzLmNoYW5nZURpcmVjdGlvbigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIExpZGEgY29tIG9zIGV2ZW50b3MgcmVjZWJpZG9zIHBlbGEgbcOhcXVpbmEgZGUgZXN0YWRvcy5cclxuICAgKiBAcGFyYW0gZXZlbnQgRXZlbnRvIGEgc2VyIHRyYXRhZG9cclxuICAgKi9cclxuICBvbkhhbmRsZUV2ZW50KGV2ZW50OiBTdGF0ZU1hY2hpbmUuSVN0YXRlRXZlbnQpIHtcclxuICAgIC8vIFNlIHVtYSBjb2xpc8OjbyBmb3IgcmVjZWJpZGFcclxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIFN0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50KSB7XHJcbiAgICAgIC8vIFNlIGZvciBQSUtFUywgbyByYXRvIGRldmUgbW9ycmVyXHJcbiAgICAgIGlmIChldmVudC50cmlnZ2VyVHlwZSA9PSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5QSUtFUykge1xyXG4gICAgICAgIGV2ZW50LnN0YXRlTWFjaGluZS5zZXRTdGF0ZSh0aGlzLmRlYWRTdGF0ZSk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gU2UgZm9yIHVtYSBjYWl4YSwgbyByYXRvIGRldmUgbXVkYXIgc3VhIGRpcmXDp8OjbyBkZSBtb3ZpbWVudG9cclxuICAgICAgZWxzZSBpZiAoZXZlbnQudHJpZ2dlclR5cGUgPT0gU3RhdGVNYWNoaW5lQ29sbGlzaW9uRXZlbnQuQk9YRVMpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZURpcmVjdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFNlIGZvciBhIEdBSU9MQSwgY2hhbWFtb3MgbyBlc3RhZG8gcGFyYSBmaW5hbGl6YXIgbyBxdWVicmEtY2FiZcOnYVxyXG4gICAgICBlbHNlIGlmIChldmVudC50cmlnZ2VyVHlwZSA9PSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5DQUdFKSB7XHJcbiAgICAgICAgY29uc3QgbW91c2VGb3J3YXJkID0gVmVjdG9yMy5Gb3J3YXJkKCkucm90YXRlKFxyXG4gICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucm90YXRpb25cclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChtb3VzZUZvcndhcmQueCA+PSAwLjkpIHtcclxuICAgICAgICAgIGV2ZW50LnN0YXRlTWFjaGluZS5zZXRTdGF0ZSh0aGlzLmNhZ2VTdGF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBTZSBvIHJhdG8gZm9yIGNsaWNhZG8sIGEgYm9saGEgZGV2ZSBhcGFyZWNlclxyXG4gICAgZWxzZSBpZiAoZXZlbnQgaW5zdGFuY2VvZiBTdGF0ZU1hY2hpbmVPbkNsaWNrRXZlbnQpIHtcclxuICAgICAgZXZlbnQuc3RhdGVNYWNoaW5lLnNldFN0YXRlKGV2ZW50LmJ1YmJsZVN0YXRlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE11ZGEgYSBkaXJlw6fDo28gZGUgbW92aW1lbnRvIGRvIHJhdG8gZSBhIHJvdGHDp8OjbyBkbyByYXRvLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgY2hhbmdlRGlyZWN0aW9uKCkge1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC5kaXJlY3Rpb24gPSB0aGlzLm1vdXNlQ29tcG9uZW50LmRpcmVjdGlvbi5zY2FsZSgtMSk7XHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5sb29rQXQoXHJcbiAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLmFkZCh0aGlzLm1vdXNlQ29tcG9uZW50LmRpcmVjdGlvbilcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gXCIuLi9tb2R1bGVzL3N0YXRlTWFjaGluZVwiO1xyXG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcbmltcG9ydCB7IE1vdXNlQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW91c2VDb21wb25lbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBFc3RhZG8gZGUgZXN0b3VybyBkYSBib2xoYS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb3VzZUJ1cnN0QnViYmxlU3RhdGUgZXh0ZW5kcyBTdGF0ZU1hY2hpbmUuU3RhdGUge1xyXG4gIG1vdXNlQ29tcG9uZW50OiBNb3VzZUNvbXBvbmVudDtcclxuICBpc1N0YXRlUnVubmluZzogYm9vbGVhbjtcclxuICBhdWRpb0NsaXBQb3A6IEF1ZGlvQ2xpcDtcclxuICBidXJzdFBhcnRpY2xlOiBFbnRpdHk7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyaWEgdW1hIGluc3TDom5jaWEgZG8gZXN0YWRvLlxyXG4gICAqIEBwYXJhbSBtb3VzZUNvbXBvbmVudCBDb21wb25lbnRlIGRvIHJhdG8uXHJcbiAgICogQHBhcmFtIGJ1cnN0UGFydGljbGVTeXN0ZW0gU2lzdGVtYSBkZSBwYXJ0w61jdWxhcyBwYXJhIHVzYXIgcXVhbmRvIGEgYm9saGEgZXN0b3VyYXIuXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IobW91c2VDb21wb25lbnQ6IE1vdXNlQ29tcG9uZW50KSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudCA9IG1vdXNlQ29tcG9uZW50O1xyXG4gICAgdGhpcy5hdWRpb0NsaXBQb3AgPSBuZXcgQXVkaW9DbGlwKFwic291bmRzL3BvcC5tcDNcIik7XHJcblxyXG4gICAgY29uc3QgYnViYmxlUGFydGljbGVNYXRlcmlhbCA9IG5ldyBNYXRlcmlhbCgpO1xyXG4gICAgYnViYmxlUGFydGljbGVNYXRlcmlhbC5hbGJlZG9UZXh0dXJlID0gbmV3IFRleHR1cmUoXHJcbiAgICAgIFwiaW1hZ2VzL3Jvb205L2J1YmJsZVBhcnRpY2xlLnBuZ1wiLFxyXG4gICAgICB7IGhhc0FscGhhOiB0cnVlIH1cclxuICAgICk7XHJcbiAgICBidWJibGVQYXJ0aWNsZU1hdGVyaWFsLnRyYW5zcGFyZW5jeU1vZGUgPSAyO1xyXG4gICAgYnViYmxlUGFydGljbGVNYXRlcmlhbC5lbWlzc2l2ZUNvbG9yID0gQ29sb3IzLldoaXRlKCk7XHJcblxyXG4gICAgdGhpcy5idXJzdFBhcnRpY2xlID0gbmV3IEVudGl0eSgpO1xyXG4gICAgdGhpcy5idXJzdFBhcnRpY2xlLmFkZENvbXBvbmVudChuZXcgUGxhbmVTaGFwZSgpKTtcclxuICAgIHRoaXMuYnVyc3RQYXJ0aWNsZS5hZGRDb21wb25lbnQobmV3IEJpbGxib2FyZCgpKTtcclxuICAgIHRoaXMuYnVyc3RQYXJ0aWNsZS5hZGRDb21wb25lbnQoYnViYmxlUGFydGljbGVNYXRlcmlhbCk7XHJcbiAgICB0aGlzLmJ1cnN0UGFydGljbGUuYWRkQ29tcG9uZW50KG5ldyBUcmFuc2Zvcm0oeyBzY2FsZTogVmVjdG9yMy5aZXJvKCkgfSkpO1xyXG4gICAgdGhpcy5idXJzdFBhcnRpY2xlLnNldFBhcmVudChtb3VzZUNvbXBvbmVudC5tb3VzZUVudGl0eS5nZXRQYXJlbnQoKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyBjb21lw6dhLlxyXG4gICAqL1xyXG4gIG9uU3RhcnQoKSB7XHJcbiAgICAvLyBEZWZpbmUgbyBlc3RhZG8gY29tbyBlbSBleGVjdcOnw6NvXHJcbiAgICB0aGlzLmlzU3RhdGVSdW5uaW5nID0gdHJ1ZTtcclxuICAgIC8vIEVzY2FsYSBhIGJvbGhhIHBhcmEgYmFpeG9cclxuICAgIHRoaXMubW91c2VDb21wb25lbnQuYnViYmxlLmFkZENvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlNjYWxlVHJhbnNmb3JtQ29tcG9uZW50KFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDAuNSwgMC41LCAwLjUpLFxyXG4gICAgICAgIFZlY3RvcjMuT25lKCksXHJcbiAgICAgICAgMC41LFxyXG4gICAgICAgICgpOiB2b2lkID0+IHtcclxuICAgICAgICAgIC8vIE8gZXN0YWRvIGRldmUgdGVybWluYXIgYWdvcmFcclxuICAgICAgICAgIHRoaXMuaXNTdGF0ZVJ1bm5pbmcgPSBmYWxzZTtcclxuICAgICAgICAgIC8vIERlZmluZSBhIGJvbGhhIGNvbW8gaW52aXPDrXZlbFxyXG4gICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC5idWJibGUuZ2V0Q29tcG9uZW50KFNwaGVyZVNoYXBlKS52aXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAvLyBEZWZpbmUgYSBwb3Npw6fDo28gZGEgcGFydMOtY3VsYVxyXG4gICAgICAgICAgY29uc3QgcGFydGljbGVUcmFuc2Zvcm0gPSB0aGlzLmJ1cnN0UGFydGljbGUuZ2V0Q29tcG9uZW50KFRyYW5zZm9ybSk7XHJcbiAgICAgICAgICBwYXJ0aWNsZVRyYW5zZm9ybS5wb3NpdGlvbiA9IHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgICAgLy8gUmVwcm9kdXogbyBlZmVpdG8gZGUgcGFydMOtY3VsYVxyXG4gICAgICAgICAgdGhpcy5idXJzdFBhcnRpY2xlLmFkZENvbXBvbmVudChcclxuICAgICAgICAgICAgbmV3IHV0aWxzLlNjYWxlVHJhbnNmb3JtQ29tcG9uZW50KFxyXG4gICAgICAgICAgICAgIFZlY3RvcjMuWmVybygpLFxyXG4gICAgICAgICAgICAgIG5ldyBWZWN0b3IzKDAuNCwgMC40LCAwLjQpLFxyXG4gICAgICAgICAgICAgIDAuMyxcclxuICAgICAgICAgICAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgICBwYXJ0aWNsZVRyYW5zZm9ybS5zY2FsZSA9IFZlY3RvcjMuWmVybygpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIC8vIFJlcHJvZHV6IG8gc29tXHJcbiAgICAgICAgICBjb25zdCBhdWRpb1NvdXJjZSA9IG5ldyBBdWRpb1NvdXJjZSh0aGlzLmF1ZGlvQ2xpcFBvcCk7XHJcbiAgICAgICAgICB0aGlzLm1vdXNlQ29tcG9uZW50Lm1vdXNlRW50aXR5LmFkZENvbXBvbmVudE9yUmVwbGFjZShhdWRpb1NvdXJjZSk7XHJcbiAgICAgICAgICBhdWRpb1NvdXJjZS5wbGF5T25jZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoYW1hZG8gcXVhbmRvIG8gZXN0YWRvIMOpIGF0dWFsaXphZG8uXHJcbiAgICogQHBhcmFtIGR0IERlbHRhLlxyXG4gICAqIFJldG9ybmEgVFJVRSBwYXJhIGNvbnRpbnVhciBvIGVzdGFkbywgRkFMU0UgcGFyYSBmaW5hbGl6YXIgbyBlc3RhZG8uXHJcbiAgICovXHJcbiAgb25VcGRhdGVTdGF0ZSgpIHtcclxuICAgIC8vIE8gZXN0YWRvIGFpbmRhIGVzdMOhIGVtIGV4ZWN1w6fDo28/XHJcbiAgICByZXR1cm4gdGhpcy5pc1N0YXRlUnVubmluZztcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RhdGVNYWNoaW5lIH0gZnJvbSBcIi4uL21vZHVsZXMvc3RhdGVNYWNoaW5lXCI7XHJcbmltcG9ydCB7IFN0YXRlTWFjaGluZU9uQ2xpY2tFdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZU9uQ2xpY2tFdmVudFwiO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50XCI7XHJcbmltcG9ydCB7IE1vdXNlQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW91c2VDb21wb25lbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBFc3RhZG8gZGUgYm9saGEgZmx1dHVhbmRvIGFvIHJlZG9yIGltcHVsc2lvbmFkYSBwb3IgYWxndW0gdmVudG8gZG9zIHZlbnRpbGFkb3Jlcy5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBNb3VzZUJ1YmJsZVN0YXRlIGV4dGVuZHMgU3RhdGVNYWNoaW5lLlN0YXRlIHtcclxuICBtb3VzZUNvbXBvbmVudDogTW91c2VDb21wb25lbnQ7XHJcbiAgYnViYmxlQnVyc3RTdGF0ZTogU3RhdGVNYWNoaW5lLlN0YXRlO1xyXG4gIHRpbWU6IG51bWJlcjtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JpYSB1bWEgaW5zdMOibmNpYSBkbyBlc3RhZG8uXHJcbiAgICogQHBhcmFtIG1vdXNlQ29tcG9uZW50IENvbXBvbmVudGUgZG8gcmF0by5cclxuICAgKiBAcGFyYW0gYnViYmxlQnVyc3RTdGF0ZSBFc3RhZG8gZGUgZXN0b3VybyBkYSBib2xoYS5cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIG1vdXNlQ29tcG9uZW50OiBNb3VzZUNvbXBvbmVudCxcclxuICAgIGJ1YmJsZUJ1cnN0U3RhdGU6IFN0YXRlTWFjaGluZS5TdGF0ZVxyXG4gICkge1xyXG4gICAgc3VwZXIoKTtcclxuICAgIHRoaXMubW91c2VDb21wb25lbnQgPSBtb3VzZUNvbXBvbmVudDtcclxuICAgIHRoaXMuYnViYmxlQnVyc3RTdGF0ZSA9IGJ1YmJsZUJ1cnN0U3RhdGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyBjb21lw6dhLlxyXG4gICAqL1xyXG4gIG9uU3RhcnQoKSB7XHJcbiAgICB0aGlzLnRpbWUgPSAwLjU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyDDqSBhdHVhbGl6YWRvLlxyXG4gICAqIEBwYXJhbSBkdCBEZWx0YS5cclxuICAgKiBSZXRvcm5hIFRSVUUgcGFyYSBjb250aW51YXIgbyBlc3RhZG8sIEZBTFNFIHBhcmEgZmluYWxpemFyIG8gZXN0YWRvLlxyXG4gICAqL1xyXG4gIG9uVXBkYXRlU3RhdGUoZHQ6IG51bWJlcikge1xyXG4gICAgLy8gSW5jcmVtZW50YSBvIHRlbXBvLlxyXG4gICAgdGhpcy50aW1lICs9IGR0O1xyXG4gICAgLy8gQ2FsY3VsYSBhIG5vdmEgcG9zacOnw6NvIGRlIGFjb3JkbyBjb20gYSBkaXJlw6fDo28gZG8gcmF0bywgdmVsb2NpZGFkZSBlIHRlbXBvLlxyXG4gICAgY29uc3QgbmV3UG9zaXRpb24gPSB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5wb3NpdGlvbi5hZGQoXHJcbiAgICAgIHRoaXMubW91c2VDb21wb25lbnQuZGlyZWN0aW9uLnNjYWxlKDAuMiAqIGR0KVxyXG4gICAgKTtcclxuICAgIC8vIFZhbW9zIHVzYXIgYSBmdW7Dp8OjbyBTRU5PIHBhcmEgbW92ZXIgbyByYXRvIHVtIHBvdWNvIHBhcmEgY2ltYSBlIHBhcmEgYmFpeG8uXHJcbiAgICBuZXdQb3NpdGlvbi55ID0gMS41ICsgTWF0aC5zaW4odGhpcy50aW1lKSAqIDAuMTtcclxuICAgIC8vIERlZmluZSBhIG5vdmEgcG9zacOnw6NvIHBhcmEgbyByYXRvLlxyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcclxuICAgIC8vIFZlcmlmaWNhIG9zIGxpbWl0ZXMgZG8gYW1iaWVudGUuXHJcbiAgICBpZiAodGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueCA8IC0xLjEyKSB7XHJcbiAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnggPSAtMS4xMjtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueCA+IDAuOTgpIHtcclxuICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueCA9IDAuOTg7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueiA+IDEuMzMpIHtcclxuICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueiA9IDEuMzM7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLnogPCAtMS4zNykge1xyXG4gICAgICB0aGlzLm1vdXNlQ29tcG9uZW50LnRyYW5zZm9ybS5wb3NpdGlvbi56ID0gLTEuMzc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1hbmlwdWxhIG9zIGV2ZW50b3MgcmVjZWJpZG9zIHBlbGEgbcOhcXVpbmEgZGUgZXN0YWRvcy5cclxuICAgKiBAcGFyYW0gZXZlbnQgRXZlbnRvIGEgc2VyIHRyYXRhZG8uXHJcbiAgICovXHJcbiAgb25IYW5kbGVFdmVudChldmVudDogU3RhdGVNYWNoaW5lLklTdGF0ZUV2ZW50KSB7XHJcbiAgICAvLyBTZSBhIGJvbGhhIGZvciBjbGljYWRhLCBhIGVzdG91cmFtb3MuXHJcbiAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBTdGF0ZU1hY2hpbmVPbkNsaWNrRXZlbnQpIHtcclxuICAgICAgZXZlbnQuc3RhdGVNYWNoaW5lLnNldFN0YXRlKHRoaXMuYnViYmxlQnVyc3RTdGF0ZSk7XHJcbiAgICB9XHJcbiAgICAvLyBTZSByZWNlYmVybW9zIHVtIGV2ZW50byBkZSBjb2xpc8Ojby5cclxuICAgIGVsc2UgaWYgKGV2ZW50IGluc3RhbmNlb2YgU3RhdGVNYWNoaW5lQ29sbGlzaW9uRXZlbnQpIHtcclxuICAgICAgLy8gU2UgZm9yIHVtIFZFTlRJTEFET1IsIGVudMOjbyBub3MgbW92ZW1vcyBuYSBkaXJlw6fDo28gw6AgZnJlbnRlIGRlbGUuXHJcbiAgICAgIGlmIChldmVudC50cmlnZ2VyVHlwZSA9PSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5GQU5TKSB7XHJcbiAgICAgICAgY29uc3QgcGFyZW50Rm9yd2FyZCA9IFZlY3RvcjMuRm9yd2FyZCgpLnJvdGF0ZShcclxuICAgICAgICAgIGV2ZW50LmVudGl0eS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5yb3RhdGlvblxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC5kaXJlY3Rpb24gPSBwYXJlbnRGb3J3YXJkO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIFNlIGZvciB1bWEgQVJNQURJTEhBLCBlbnTDo28gYSBib2xoYSBkZXZlIGVzdG91cmFyLlxyXG4gICAgICBlbHNlIGlmIChldmVudC50cmlnZ2VyVHlwZSA9PSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5QSUtFUykge1xyXG4gICAgICAgIGV2ZW50LnN0YXRlTWFjaGluZS5zZXRTdGF0ZSh0aGlzLmJ1YmJsZUJ1cnN0U3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gXCIuLi9tb2R1bGVzL3N0YXRlTWFjaGluZVwiO1xyXG5pbXBvcnQgdXRpbHMgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9kZWNlbnRyYWxhbmQtZWNzLXV0aWxzL2luZGV4XCI7XHJcbmltcG9ydCB7IFN0YXRlTWFjaGluZU9uQ2xpY2tFdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZU9uQ2xpY2tFdmVudFwiO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50XCI7XHJcbmltcG9ydCB7IE1vdXNlQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW91c2VDb21wb25lbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBFc3RhZG8gcGFyYSBhIGJvbGhhIGFwYXJlY2VyIGUgZGVwb2lzIHN1YmlyIG5vIGFyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1vdXNlQnViYmxlU3RhcnRTdGF0ZSBleHRlbmRzIFN0YXRlTWFjaGluZS5TdGF0ZSB7XHJcbiAgbW91c2VDb21wb25lbnQ6IE1vdXNlQ29tcG9uZW50O1xyXG4gIGJ1YmJsZVN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGU7XHJcbiAgaXNVcDogYm9vbGVhbjtcclxuICBhdWRpb0NsaXBJbmZsYXRlOiBBdWRpb0NsaXA7XHJcblxyXG4gIC8qKlxyXG4gICAqIENyaWEgdW1hIGluc3TDom5jaWEgZG8gZXN0YWRvLlxyXG4gICAqIEBwYXJhbSBtb3VzZUNvbXBvbmVudCBjb21wb25lbnRlIGRvIHJhdG9cclxuICAgKiBAcGFyYW0gYnViYmxlU3RhdGUgZXN0YWRvIHBhcmEgbyByYXRvIGRlbnRybyBkYSBib2xoYSBmbHV0dWFuZG8gbm8gbHVnYXJcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihtb3VzZUNvbXBvbmVudDogTW91c2VDb21wb25lbnQsIGJ1YmJsZVN0YXRlOiBTdGF0ZU1hY2hpbmUuU3RhdGUpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50ID0gbW91c2VDb21wb25lbnQ7XHJcbiAgICB0aGlzLmJ1YmJsZVN0YXRlID0gYnViYmxlU3RhdGU7XHJcbiAgICB0aGlzLmF1ZGlvQ2xpcEluZmxhdGUgPSBuZXcgQXVkaW9DbGlwKFwic291bmRzL2luZmxhdG9yLm1wM1wiKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoYW1hZG8gcXVhbmRvIG8gZXN0YWRvIGNvbWXDp2EuXHJcbiAgICovXHJcbiAgb25TdGFydCgpIHtcclxuICAgIC8vIE8gcmF0byBhaW5kYSBuw6NvIGVzdMOhIHRvdGFsbWVudGUgbm8gYXJcclxuICAgIHRoaXMuaXNVcCA9IGZhbHNlO1xyXG4gICAgLy8gVmFtb3MgZmF6ZXIgYSBib2xoYSBhcGFyZWNlclxyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudC5idWJibGUuZ2V0Q29tcG9uZW50KFNwaGVyZVNoYXBlKS52aXNpYmxlID0gdHJ1ZTtcclxuICAgIC8vIEVzY2FsYW1vcyBhIGJvbGhhIHBhcmEgc3VhIGVzY2FsYSBwYWRyw6NvXHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50LmJ1YmJsZS5hZGRDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5TY2FsZVRyYW5zZm9ybUNvbXBvbmVudChcclxuICAgICAgICBWZWN0b3IzLlplcm8oKSxcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjMsIDAuMywgMC4zKSxcclxuICAgICAgICAxLjUsXHJcbiAgICAgICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgLy8gUXVhbmRvIGEgYm9saGEgdGVybWluYXIgZGUgZXNjYWxhciwgbGV2YW50YW1vcyBvIHJhdG8gbm8gYXJcclxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uO1xyXG4gICAgICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBuZXcgVmVjdG9yMyhcclxuICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uLngsXHJcbiAgICAgICAgICAgIDEuNCxcclxuICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uLnpcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICB0aGlzLm1vdXNlQ29tcG9uZW50Lm1vdXNlRW50aXR5LmFkZENvbXBvbmVudChcclxuICAgICAgICAgICAgbmV3IHV0aWxzLk1vdmVUcmFuc2Zvcm1Db21wb25lbnQoXHJcbiAgICAgICAgICAgICAgY3VycmVudFBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gQWdvcmEgbyByYXRvIGVzdMOhIHRvdGFsbWVudGUgbm8gYXJcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNVcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIC8vIFRvY2Ftb3MgbyBzb21cclxuICAgIGNvbnN0IGF1ZGlvU291cmNlID0gbmV3IEF1ZGlvU291cmNlKHRoaXMuYXVkaW9DbGlwSW5mbGF0ZSk7XHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50Lm1vdXNlRW50aXR5LmFkZENvbXBvbmVudE9yUmVwbGFjZShhdWRpb1NvdXJjZSk7XHJcbiAgICBhdWRpb1NvdXJjZS5wbGF5T25jZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBlc3RhZG8gw6kgYXR1YWxpemFkby5cclxuICAgKiBAcGFyYW0gZHQgZGVsdGFcclxuICAgKiBSZXRvcm5hIFRSVUUgcGFyYSBjb250aW51YXIgbyBlc3RhZG8sIEZBTFNFIHBhcmEgZmluYWxpemFyIG8gZXN0YWRvXHJcbiAgICovXHJcbiAgb25VcGRhdGVTdGF0ZShkdDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1hbmlwdWxhIG9zIGV2ZW50b3MgcmVjZWJpZG9zIHBlbGEgbcOhcXVpbmEgZGUgZXN0YWRvcy5cclxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRvIGEgc2VyIHRyYXRhZG9cclxuICAgKi9cclxuICBvbkhhbmRsZUV2ZW50KGV2ZW50OiBTdGF0ZU1hY2hpbmUuSVN0YXRlRXZlbnQpIHtcclxuICAgIC8vIFNlIGEgYm9saGEgZm9yIGNsaWNhZGFcclxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIFN0YXRlTWFjaGluZU9uQ2xpY2tFdmVudCkge1xyXG4gICAgICAvLyBFIGVzdGl2ZXJtb3MgdG90YWxtZW50ZSBubyBhclxyXG4gICAgICBpZiAodGhpcy5pc1VwKSB7XHJcbiAgICAgICAgLy8gRXN0b3VyYW1vcyBhIGJvbGhhXHJcbiAgICAgICAgZXZlbnQuc3RhdGVNYWNoaW5lLnNldFN0YXRlKGV2ZW50LmJ1cnN0U3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBTZSByZWNlYmVybW9zIHVtIGV2ZW50byBkZSBjb2xpc8Ojb1xyXG4gICAgZWxzZSBpZiAoZXZlbnQgaW5zdGFuY2VvZiBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudCkge1xyXG4gICAgICAvLyBFIGEgY29saXPDo28gZm9yIGNvbSB1bSBnYXRpbGhvIGRlIHVtIHZlbnRpbGFkb3JcclxuICAgICAgaWYgKGV2ZW50LnRyaWdnZXJUeXBlID09IFN0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50LkZBTlMpIHtcclxuICAgICAgICAvLyBPYnRlbW9zIG8gdmV0b3IgZGUgZnJlbnRlIGRvIHZlbnRpbGFkb3IgZSBkZWZpbmltb3MgY29tbyBhIGRpcmXDp8OjbyBkbyByYXRvXHJcbiAgICAgICAgY29uc3QgcGFyZW50Rm9yd2FyZCA9IFZlY3RvcjMuRm9yd2FyZCgpLnJvdGF0ZShcclxuICAgICAgICAgIGV2ZW50LmVudGl0eS5nZXRDb21wb25lbnQoVHJhbnNmb3JtKS5yb3RhdGlvblxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC5kaXJlY3Rpb24gPSBwYXJlbnRGb3J3YXJkO1xyXG4gICAgICAgIC8vIEUgbXVkYW1vcyBvIGVzdGFkbyBwYXJhIG8gZXN0YWRvIGRlIGJvbGhhIGZsdXR1YW50ZSBhbyByZWRvclxyXG4gICAgICAgIGV2ZW50LnN0YXRlTWFjaGluZS5zZXRTdGF0ZSh0aGlzLmJ1YmJsZVN0YXRlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTdGF0ZU1hY2hpbmUgfSBmcm9tIFwiLi4vbW9kdWxlcy9zdGF0ZU1hY2hpbmVcIjtcclxuaW1wb3J0IHV0aWxzIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvZGVjZW50cmFsYW5kLWVjcy11dGlscy9pbmRleFwiO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudCB9IGZyb20gXCIuL3N0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50XCI7XHJcbmltcG9ydCB7IE1vdXNlQ29tcG9uZW50IH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvbW91c2VDb21wb25lbnRcIjtcclxuXHJcbi8qKlxyXG4gKiBFc3RhZG8gcGFyYSBvIHJhdG8gY2FpbmRvIGFww7NzIGEgYm9saGEgZXhwbG9kaXIuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTW91c2VGYWxsaW5nU3RhdGUgZXh0ZW5kcyBTdGF0ZU1hY2hpbmUuU3RhdGUge1xyXG4gIG1vdXNlQ29tcG9uZW50OiBNb3VzZUNvbXBvbmVudDtcclxuICBpc1N0YXRlUnVubmluZzogYm9vbGVhbjtcclxuICBkZWFkU3RhdGU6IFN0YXRlTWFjaGluZS5TdGF0ZTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ3JpYSB1bWEgaW5zdMOibmNpYSBkbyBlc3RhZG8uXHJcbiAgICogQHBhcmFtIG1vdXNlQ29tcG9uZW50IENvbXBvbmVudGUgZG8gcmF0by5cclxuICAgKiBAcGFyYW0gZGVhZFN0YXRlIEVzdGFkbyBwYXJhIGluaWNpYXIgc2UgbyByYXRvIG1vcnJlci5cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihtb3VzZUNvbXBvbmVudDogTW91c2VDb21wb25lbnQsIGRlYWRTdGF0ZTogU3RhdGVNYWNoaW5lLlN0YXRlKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5tb3VzZUNvbXBvbmVudCA9IG1vdXNlQ29tcG9uZW50O1xyXG4gICAgdGhpcy5kZWFkU3RhdGUgPSBkZWFkU3RhdGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGVzdGFkbyBjb21lw6dhLlxyXG4gICAqL1xyXG4gIG9uU3RhcnQoKSB7XHJcbiAgICAvLyBEZWZpbmUgbyBlc3RhZG8gY29tbyBlbSBleGVjdcOnw6NvXHJcbiAgICB0aGlzLmlzU3RhdGVSdW5uaW5nID0gdHJ1ZTtcclxuICAgIC8vIE1vdmUgbyByYXRvIHVtIHBvdWNvIHBhcmEgY2ltYSBjb20gdW1hIHNhw61kYSBzdWF2ZSAoZWFzZSBvdXQpXHJcbiAgICB0aGlzLm1vdXNlQ29tcG9uZW50Lm1vdXNlRW50aXR5LmFkZENvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLk1vdmVUcmFuc2Zvcm1Db21wb25lbnQoXHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24sXHJcbiAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24uYWRkKG5ldyBWZWN0b3IzKDAsIDAuMSwgMCkpLFxyXG4gICAgICAgIDAuMixcclxuICAgICAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAvLyBDYWxjdWxhIGEgcG9zacOnw6NvIGF0w6kgbyBjaMOjb1xyXG4gICAgICAgICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSBuZXcgVmVjdG9yMyhcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24ueCxcclxuICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC50cmFuc2Zvcm0ucG9zaXRpb24uelxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIC8vIE1vdmUgbyByYXRvIGF0w6kgbyBjaMOjb1xyXG4gICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC5tb3VzZUVudGl0eS5hZGRDb21wb25lbnQoXHJcbiAgICAgICAgICAgIG5ldyB1dGlscy5Nb3ZlVHJhbnNmb3JtQ29tcG9uZW50KFxyXG4gICAgICAgICAgICAgIHRoaXMubW91c2VDb21wb25lbnQudHJhbnNmb3JtLnBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLFxyXG4gICAgICAgICAgICAgIDAuNSxcclxuICAgICAgICAgICAgICAoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBPIGVzdGFkbyBkZXZlIHRlcm1pbmFyIGFnb3JhXHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzU3RhdGVSdW5uaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICB1dGlscy5JbnRlcnBvbGF0aW9uVHlwZS5FQVNFSU5RVUFEXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1dGlscy5JbnRlcnBvbGF0aW9uVHlwZS5FQVNFT1VUUVVBRFxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBlc3RhZG8gw6kgYXR1YWxpemFkby5cclxuICAgKiBAcGFyYW0gZHQgRGVsdGEuXHJcbiAgICogUmV0b3JuYSBUUlVFIHBhcmEgY29udGludWFyIG8gZXN0YWRvLCBGQUxTRSBwYXJhIGZpbmFsaXphciBvIGVzdGFkby5cclxuICAgKi9cclxuICBvblVwZGF0ZVN0YXRlKCkge1xyXG4gICAgLy8gTyBlc3RhZG8gYWluZGEgZXN0w6EgZW0gZXhlY3XDp8Ojbz9cclxuICAgIHJldHVybiB0aGlzLmlzU3RhdGVSdW5uaW5nO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFuaXB1bGEgZXZlbnRvcyByZWNlYmlkb3MgcGVsYSBtw6FxdWluYSBkZSBlc3RhZG9zLlxyXG4gICAqIEBwYXJhbSBldmVudCBFdmVudG8gYSBzZXIgdHJhdGFkby5cclxuICAgKi9cclxuICBvbkhhbmRsZUV2ZW50KGV2ZW50OiBTdGF0ZU1hY2hpbmUuSVN0YXRlRXZlbnQpIHtcclxuICAgIC8vIFNlIGRlc2VuY2FkZWFtb3MgdW1hIGNvbGlzw6NvIGVucXVhbnRvIGNhw61tb3NcclxuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIFN0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50KSB7XHJcbiAgICAgIC8vIFNlIGNvbGlkaW1vcyBjb20gdW1hIFwiUElLRVwiIG91IGNvbSB1bWEgXCJCT1hcIlxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgZXZlbnQudHJpZ2dlclR5cGUgPT0gU3RhdGVNYWNoaW5lQ29sbGlzaW9uRXZlbnQuUElLRVMgfHxcclxuICAgICAgICBldmVudC50cmlnZ2VyVHlwZSA9PSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5CT1hFU1xyXG4gICAgICApIHtcclxuICAgICAgICAvLyBQYXJhciBkZSBtb3ZlciBwYXJhIGJhaXhvXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdGhpcy5tb3VzZUNvbXBvbmVudC5tb3VzZUVudGl0eS5oYXNDb21wb25lbnQoXHJcbiAgICAgICAgICAgIHV0aWxzLk1vdmVUcmFuc2Zvcm1Db21wb25lbnRcclxuICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHRoaXMubW91c2VDb21wb25lbnQubW91c2VFbnRpdHkucmVtb3ZlQ29tcG9uZW50KFxyXG4gICAgICAgICAgICB1dGlscy5Nb3ZlVHJhbnNmb3JtQ29tcG9uZW50XHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPIHJhdG8gZGV2ZSBtb3JyZXJcclxuICAgICAgICBldmVudC5zdGF0ZU1hY2hpbmUuc2V0U3RhdGUodGhpcy5kZWFkU3RhdGUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB1dGlscyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2RlY2VudHJhbGFuZC1lY3MtdXRpbHMvaW5kZXhcIjtcclxuaW1wb3J0IHJlc291cmNlcyBmcm9tIFwiLi4vcmVzb3VyY2VzXCI7XHJcbmltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gXCIuLi9tb2R1bGVzL3N0YXRlTWFjaGluZVwiO1xyXG5pbXBvcnQgeyBEb29yIH0gZnJvbSBcIi4uL2dhbWVPYmplY3RzL2luZGV4XCI7XHJcbmltcG9ydCB7IFN0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50IH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9zdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudFwiO1xyXG5pbXBvcnQgeyBTdGF0ZU1hY2hpbmVPbkNsaWNrRXZlbnQgfSBmcm9tIFwiLi4vc3RhdGVNYWNoaW5lL3N0YXRlTWFjaGluZU9uQ2xpY2tFdmVudFwiO1xyXG5pbXBvcnQgeyBNb3VzZVN0YXRlQXBwZWFyIH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9tb3VzZVN0YXRlQXBwZWFyXCI7XHJcbmltcG9ydCB7IE1vdXNlRGVhZFN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9tb3VzZURlYWRTdGF0ZVwiO1xyXG5pbXBvcnQgeyBNb3VzZUVudGVyQ2FnZVN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9tb3VzZUVudGVyQ2FnZVN0YXRlXCI7XHJcbmltcG9ydCB7IE1vdXNlU3RhdGVXYWxraW5nIH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9tb3VzZVN0YXRlV2Fsa2luZ1wiO1xyXG5pbXBvcnQgeyBNb3VzZUJ1cnN0QnViYmxlU3RhdGUgfSBmcm9tIFwiLi4vc3RhdGVNYWNoaW5lL21vdXNlQnVyc3RCdWJibGVTdGF0ZVwiO1xyXG5pbXBvcnQgeyBNb3VzZUJ1YmJsZVN0YXRlIH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9tb3VzZUJ1YmJsZVN0YXRlXCI7XHJcbmltcG9ydCB7IE1vdXNlQnViYmxlU3RhcnRTdGF0ZSB9IGZyb20gXCIuLi9zdGF0ZU1hY2hpbmUvbW91c2VCdWJibGVTdGFydFN0YXRlXCI7XHJcbmltcG9ydCB7IE1vdXNlRmFsbGluZ1N0YXRlIH0gZnJvbSBcIi4uL3N0YXRlTWFjaGluZS9tb3VzZUZhbGxpbmdTdGF0ZVwiO1xyXG5pbXBvcnQgeyBNb3VzZUNvbXBvbmVudCB9IGZyb20gXCIuLi9jb21wb25lbnRzL21vdXNlQ29tcG9uZW50XCI7XHJcblxyXG4vLyBEZWZpbmlyIGNhbWFkYXMgZGUgZ2F0aWxob1xyXG5jb25zdCBNb3VzZUxheWVyID0gODsgLy8gMTAwMCBlbSBiaW7DoXJpb1xyXG5jb25zdCBQaWtlc0xheWVyID0gMTY7IC8vIDEwMDAwXHJcbmNvbnN0IEJveExheWVyID0gMzI7IC8vIDEwMDAwMFxyXG5jb25zdCBGYW5MYXllciA9IDY0OyAvLyAxMDAwMDAwXHJcbmNvbnN0IENhZ2VMYXllciA9IDEyODsgLy8gMTAwMDAwMDBcclxuLy8gZXg6IDEwMTAwMDAwICgxNjApIHNpZ25pZmljYSBnYWlvbGEgb3UgY2FpeGFcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDcmVhdGVSb29tOSgpOiB2b2lkIHtcclxuICAvLyBDcmlhciBlbnRpZGFkZSBkYSBwb3J0YVxyXG4gIGNvbnN0IGRvb3IgPSBuZXcgRG9vcihcclxuICAgIHJlc291cmNlcy5tb2RlbHMuZG9vcjksXHJcbiAgICB7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygyMy4yMjE1LCAwLCAyNS4wNTIyKSB9LFxyXG4gICAgcmVzb3VyY2VzLnNvdW5kcy5kb29yU3F1ZWVrXHJcbiAgKTtcclxuXHJcbiAgLy8gT3V2aXIgZXZlbnRvIGRlIGNsaXF1ZSBwYXJhIGFsdGVybmFyIG8gZXN0YWRvIGRhIHBvcnRhXHJcbiAgZG9vci5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgT25Qb2ludGVyRG93bigoKSA9PiB7XHJcbiAgICAgIGRvb3Iub3BlbkRvb3IoKTtcclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgLy8gQ3JpYXIgZ2F2ZXRhIHBhcmEgZGljYVxyXG4gIGNvbnN0IGRyYXdlciA9IG5ldyBFbnRpdHkoKTtcclxuICBjb25zdCBkcmF3ZXJDbGlwID0gbmV3IEFuaW1hdGlvblN0YXRlKFwiRHJhd2VyX0FjdGlvblwiLCB7IGxvb3Bpbmc6IGZhbHNlIH0pO1xyXG4gIGNvbnN0IGRyYXdlckFuaW1hdG9yID0gbmV3IEFuaW1hdG9yKCk7XHJcbiAgZHJhd2VyQW5pbWF0b3IuYWRkQ2xpcChkcmF3ZXJDbGlwKTtcclxuICBkcmF3ZXIuYWRkQ29tcG9uZW50KG5ldyBHTFRGU2hhcGUoXCJtb2RlbHMvcm9vbTkvRHJhd2VyLmdsYlwiKSk7XHJcbiAgZHJhd2VyLmFkZENvbXBvbmVudChcclxuICAgIG5ldyBUcmFuc2Zvcm0oeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMjAuNTQ4NywgMC41NjM3OTUsIDI4LjY1NTYpIH0pXHJcbiAgKTtcclxuICBkcmF3ZXIuYWRkQ29tcG9uZW50KGRyYXdlckFuaW1hdG9yKTtcclxuICBlbmdpbmUuYWRkRW50aXR5KGRyYXdlcik7XHJcblxyXG4gIC8vIENyaWFyIGVudGlkYWRlIGRhIHNhbGFcclxuICBjb25zdCByb29tRW50aXR5ID0gbmV3IEVudGl0eSgpO1xyXG4gIC8vIEFkaWNpb25hciBmb3JtYSBHTFRGXHJcbiAgcm9vbUVudGl0eS5hZGRDb21wb25lbnQobmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tOS9QdXp6bGUwOV9HYW1lLmdsYlwiKSk7XHJcbiAgLy8gQWRpY2lvbmFyIGUgZGVmaW5pciB0cmFuc2Zvcm1hw6fDo29cclxuICByb29tRW50aXR5LmFkZENvbXBvbmVudChcclxuICAgIG5ldyBUcmFuc2Zvcm0oeyBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMTkuMDkyOCwgMCwgMjguNjU4MikgfSlcclxuICApO1xyXG4gIC8vIENyaWFyIGFuaW1hZG9yXHJcbiAgY29uc3Qgcm9vbUFuaW1hdG9yID0gbmV3IEFuaW1hdG9yKCk7XHJcbiAgLy8gQ3JpYXIgZXN0YWRvIGRlIGFuaW1hw6fDo28gcGFyYSBhIHNhbGFcclxuICBjb25zdCByb29tQW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvblN0YXRlKFwiU3Bpa2VzX0FjdGlvblwiLCB7IGxvb3Bpbmc6IHRydWUgfSk7XHJcbiAgLy8gQWRpY2lvbmFyIGNsaXBlIGFvIGFuaW1hZG9yXHJcbiAgcm9vbUFuaW1hdG9yLmFkZENsaXAocm9vbUFuaW1hdGlvbik7XHJcbiAgLy8gQWRpY2lvbmFyIGFuaW1hZG9yIMOgIGVudGlkYWRlXHJcbiAgcm9vbUVudGl0eS5hZGRDb21wb25lbnQocm9vbUFuaW1hdG9yKTtcclxuICAvLyBSZXByb2R1emlyIGFuaW1hw6fDo29cclxuICByb29tQW5pbWF0aW9uLnBsYXkoKTtcclxuICAvLyBBZGljaW9uYXIgc2FsYSBhbyBtb3RvclxyXG4gIGVuZ2luZS5hZGRFbnRpdHkocm9vbUVudGl0eSk7XHJcblxyXG4gIC8vIENyaWFyIHJhdG9cclxuICBjb25zdCBtb3VzZUVudGl0eSA9IG5ldyBFbnRpdHkoXCJtb3VzZVwiKTtcclxuICAvLyBEZWZpbmlyIHJhdG8gY29tbyBmaWxobyBkYSBzYWxhXHJcbiAgbW91c2VFbnRpdHkuc2V0UGFyZW50KHJvb21FbnRpdHkpO1xyXG4gIC8vIEFkaWNpb25hciBmb3JtYSBHTFRGXHJcbiAgbW91c2VFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IEdMVEZTaGFwZShcIm1vZGVscy9yb29tOS9QdXp6bGUwOV9Nb3VzZVdpbGwuZ2xiXCIpXHJcbiAgKTtcclxuICAvLyBDcmlhciBlIGFkaWNpb25hciB0cmFuc2Zvcm1hw6fDo29cclxuICBjb25zdCBtb3VzZVRyYW5zZm9ybSA9IG5ldyBUcmFuc2Zvcm0oKTtcclxuICBtb3VzZUVudGl0eS5hZGRDb21wb25lbnQobW91c2VUcmFuc2Zvcm0pO1xyXG4gIC8vIENyaWFyIGUgYWRpY2lvbmFyIGNvbXBvbmVudGUgZGUgcmF0b1xyXG4gIGNvbnN0IG1vdXNlQ29tcG9uZW50ID0gbmV3IE1vdXNlQ29tcG9uZW50KG1vdXNlRW50aXR5KTtcclxuICBtb3VzZUVudGl0eS5hZGRDb21wb25lbnQobW91c2VDb21wb25lbnQpO1xyXG5cclxuICAvLyBDcmlhciBtw6FxdWluYSBkZSBlc3RhZG9zXHJcbiAgY29uc3QgbW91c2VTdGF0ZU1hY2hpbmUgPSBuZXcgU3RhdGVNYWNoaW5lKCk7XHJcbiAgZW5naW5lLmFkZFN5c3RlbShtb3VzZVN0YXRlTWFjaGluZSk7XHJcblxyXG4gIC8vIEFkaWNpb25hciBnYXRpbGhvIHBhcmEgbyByYXRvXHJcbiAgbW91c2VFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IHV0aWxzLlRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5UcmlnZ2VyQm94U2hhcGUoXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMC4yLCAwLjEsIDAuMiksXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMCwgMCwgMClcclxuICAgICAgKSxcclxuICAgICAgTW91c2VMYXllcixcclxuICAgICAgUGlrZXNMYXllciB8IEJveExheWVyIHwgRmFuTGF5ZXIgfCBDYWdlTGF5ZXIsXHJcbiAgICAgIChlbnRpdHlFbnRlcikgPT4ge1xyXG4gICAgICAgIGxldCB0cmlnZ2VyVHlwZSA9IFN0YXRlTWFjaGluZUNvbGxpc2lvbkV2ZW50LkJPWEVTO1xyXG4gICAgICAgIGNvbnN0IHRyaWdnZXJMYXllciA9IGVudGl0eUVudGVyLmdldENvbXBvbmVudChcclxuICAgICAgICAgIHV0aWxzLlRyaWdnZXJDb21wb25lbnRcclxuICAgICAgICApLmxheWVyO1xyXG4gICAgICAgIGlmICh0cmlnZ2VyTGF5ZXIgPT0gUGlrZXNMYXllcikge1xyXG4gICAgICAgICAgdHJpZ2dlclR5cGUgPSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5QSUtFUztcclxuICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXJMYXllciA9PSBGYW5MYXllcikge1xyXG4gICAgICAgICAgdHJpZ2dlclR5cGUgPSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5GQU5TO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlckxheWVyID09IENhZ2VMYXllcikge1xyXG4gICAgICAgICAgdHJpZ2dlclR5cGUgPSBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudC5DQUdFO1xyXG4gICAgICAgIH1cclxuICAgICAgICBtb3VzZVN0YXRlTWFjaGluZS5oYW5kbGVFdmVudChcclxuICAgICAgICAgIG5ldyBTdGF0ZU1hY2hpbmVDb2xsaXNpb25FdmVudChcclxuICAgICAgICAgICAgbW91c2VTdGF0ZU1hY2hpbmUsXHJcbiAgICAgICAgICAgIGVudGl0eUVudGVyLFxyXG4gICAgICAgICAgICB0cmlnZ2VyVHlwZVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgIClcclxuICApO1xyXG5cclxuICAvLyBDcmlhciBlc3RhZG9zIGRvIHJhdG9cclxuICAvLyBFc3RhZG8gcGFyYSBvIHJhdG8gYXBhcmVjZXIgcXVhbmRvIG8gam9nbyBjb21lw6dhXHJcbiAgY29uc3QgbW91c2VTdGF0ZUFwcGVhciA9IG5ldyBNb3VzZVN0YXRlQXBwZWFyKG1vdXNlQ29tcG9uZW50KTtcclxuICAvLyBFc3RhZG8gcGFyYSBxdWFuZG8gbyByYXRvIG1vcnJlXHJcbiAgY29uc3QgbW91c2VTdGF0ZURpZSA9IG5ldyBNb3VzZURlYWRTdGF0ZShtb3VzZUNvbXBvbmVudCk7XHJcbiAgLy8gRXN0YWRvIHBhcmEgbyByYXRvIGVudHJhciBuYSBnYWlvbGFcclxuICBjb25zdCBtb3VzZVN0YXRlRW50ZXJDYWdlID0gbmV3IE1vdXNlRW50ZXJDYWdlU3RhdGUobW91c2VDb21wb25lbnQsICgpID0+IHtcclxuICAgIGRyYXdlckNsaXAucGxheSgpO1xyXG4gIH0pO1xyXG4gIC8vIEVzdGFkbyBwYXJhIG8gcmF0byBhbmRhclxyXG4gIGNvbnN0IG1vdXNlU3RhdGVXYWxraW5nID0gbmV3IE1vdXNlU3RhdGVXYWxraW5nKFxyXG4gICAgbW91c2VDb21wb25lbnQsXHJcbiAgICBtb3VzZVN0YXRlRGllLFxyXG4gICAgbW91c2VTdGF0ZUVudGVyQ2FnZVxyXG4gICk7XHJcbiAgLy8gRXN0YWRvIHBhcmEgZXN0b3VyYXIgYSBib2xoYVxyXG4gIGNvbnN0IG1vdXNlU3RhdGVCdXJzdEJ1YmJsZSA9IG5ldyBNb3VzZUJ1cnN0QnViYmxlU3RhdGUobW91c2VDb21wb25lbnQpO1xyXG4gIC8vIEVzdGFkbyBwYXJhIG8gcmF0byBmbHV0dWFyIGRlbnRybyBkYSBib2xoYVxyXG4gIGNvbnN0IG1vdXNlU3RhdGVCdWJibGUgPSBuZXcgTW91c2VCdWJibGVTdGF0ZShcclxuICAgIG1vdXNlQ29tcG9uZW50LFxyXG4gICAgbW91c2VTdGF0ZUJ1cnN0QnViYmxlXHJcbiAgKTtcclxuICAvLyBFc3RhZG8gcGFyYSBhIGJvbGhhIGFwYXJlY2VyIGUgc3ViaXJcclxuICBjb25zdCBtb3VzZVN0YXRlQnViYmxlQXBwZWFyID0gbmV3IE1vdXNlQnViYmxlU3RhcnRTdGF0ZShcclxuICAgIG1vdXNlQ29tcG9uZW50LFxyXG4gICAgbW91c2VTdGF0ZUJ1YmJsZVxyXG4gICk7XHJcbiAgLy8gRXN0YWRvIHBhcmEgbyByYXRvIGNhaXIgbm8gY2jDo29cclxuICBjb25zdCBtb3VzZVN0YXRlRmFsbGluZyA9IG5ldyBNb3VzZUZhbGxpbmdTdGF0ZShcclxuICAgIG1vdXNlQ29tcG9uZW50LFxyXG4gICAgbW91c2VTdGF0ZURpZVxyXG4gICk7XHJcblxyXG4gIC8vIE91dmlyIGNsaXF1ZSBubyByYXRvXHJcbiAgbW91c2VFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKGV2ZW50KSA9PiB7XHJcbiAgICAgIG1vdXNlU3RhdGVNYWNoaW5lLmhhbmRsZUV2ZW50KFxyXG4gICAgICAgIG5ldyBTdGF0ZU1hY2hpbmVPbkNsaWNrRXZlbnQoXHJcbiAgICAgICAgICBtb3VzZVN0YXRlTWFjaGluZSxcclxuICAgICAgICAgIG1vdXNlU3RhdGVCdWJibGVBcHBlYXIsXHJcbiAgICAgICAgICBtb3VzZVN0YXRlQnVyc3RCdWJibGVcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIENyaWFyIGVudGlkYWRlIGRhIGJvbGhhXHJcbiAgY29uc3QgYnViYmxlRW50aXR5ID0gbmV3IEVudGl0eSgpO1xyXG4gIC8vIEFkaWNpb25hciB0cmFuc2Zvcm1hw6fDo29cclxuICBidWJibGVFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IFRyYW5zZm9ybSh7IHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLCAwLjEsIDAuMDUpIH0pXHJcbiAgKTtcclxuICAvLyBDcmlhciBmb3JtYSBlIGFkaWNpb25hciBjb21vIGNvbXBvbmVudGVcclxuICBjb25zdCBidWJibGVTaGFwZSA9IG5ldyBTcGhlcmVTaGFwZSgpO1xyXG4gIGJ1YmJsZUVudGl0eS5hZGRDb21wb25lbnQoYnViYmxlU2hhcGUpO1xyXG4gIC8vIERlZmluaXIgY29tbyBpbnZpc8OtdmVsXHJcbiAgYnViYmxlU2hhcGUudmlzaWJsZSA9IGZhbHNlO1xyXG4gIC8vIENyaWFyIG1hdGVyaWFsIGRhIGJvbGhhXHJcbiAgY29uc3QgYnViYmxlTWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwoKTtcclxuICBidWJibGVNYXRlcmlhbC5hbGJlZG9UZXh0dXJlID0gbmV3IFRleHR1cmUoXCJpbWFnZXMvcm9vbTkvYnViYmxlVGV4dHVyZS5wbmdcIiwge1xyXG4gICAgaGFzQWxwaGE6IGZhbHNlLFxyXG4gIH0pO1xyXG4gIGJ1YmJsZU1hdGVyaWFsLnRyYW5zcGFyZW5jeU1vZGUgPSAyO1xyXG4gIC8vIEFkaWNpb25hciBtYXRlcmlhbCBkYSBib2xoYVxyXG4gIGJ1YmJsZUVudGl0eS5hZGRDb21wb25lbnQoYnViYmxlTWF0ZXJpYWwpO1xyXG4gIC8vIERlZmluaXIgYm9saGEgY29tbyBmaWxobyBkbyByYXRvXHJcbiAgYnViYmxlRW50aXR5LnNldFBhcmVudChtb3VzZUVudGl0eSk7XHJcbiAgLy8gRGVmaW5pciBib2xoYSBwYXJhIG8gY29tcG9uZW50ZSBkZSByYXRvXHJcbiAgbW91c2VDb21wb25lbnQuYnViYmxlID0gYnViYmxlRW50aXR5O1xyXG5cclxuICAvLyBPdXZpciBjbGlxdWUgbmEgYm9saGFcclxuICBidWJibGVFbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IE9uUG9pbnRlckRvd24oKGV2ZW50KSA9PiB7XHJcbiAgICAgIG1vdXNlU3RhdGVNYWNoaW5lLmhhbmRsZUV2ZW50KFxyXG4gICAgICAgIG5ldyBTdGF0ZU1hY2hpbmVPbkNsaWNrRXZlbnQoXHJcbiAgICAgICAgICBtb3VzZVN0YXRlTWFjaGluZSxcclxuICAgICAgICAgIG1vdXNlU3RhdGVCdWJibGVBcHBlYXIsXHJcbiAgICAgICAgICBtb3VzZVN0YXRlQnVyc3RCdWJibGVcclxuICAgICAgICApXHJcbiAgICAgICk7XHJcbiAgICB9KVxyXG4gICk7XHJcblxyXG4gIC8vIFF1YWlzIGVzdGFkb3MgZGV2ZW0gaW5pY2lhciBhdXRvbWF0aWNhbWVudGUgcXVhbmRvIHVtIGVzdGFkbyB0ZXJtaW5hXHJcbiAgbW91c2VTdGF0ZUFwcGVhci5uZXh0U3RhdGUgPSBtb3VzZVN0YXRlV2Fsa2luZztcclxuICBtb3VzZVN0YXRlQnVyc3RCdWJibGUubmV4dFN0YXRlID0gbW91c2VTdGF0ZUZhbGxpbmc7XHJcbiAgbW91c2VTdGF0ZUZhbGxpbmcubmV4dFN0YXRlID0gbW91c2VTdGF0ZVdhbGtpbmc7XHJcbiAgbW91c2VTdGF0ZURpZS5uZXh0U3RhdGUgPSBtb3VzZVN0YXRlQXBwZWFyO1xyXG5cclxuICAvLyBEZWZpbmlyIGVzdGFkbyBpbmljaWFsXHJcbiAgbW91c2VTdGF0ZU1hY2hpbmUuc2V0U3RhdGUobW91c2VTdGF0ZUFwcGVhcik7XHJcblxyXG4gIC8vIENhcnJlZ2FyIGNsaXBlIGRlIMOhdWRpbyBkbyB2ZW50aWxhZG9yXHJcbiAgY29uc3QgYXVkaW9DbGlwRmFuID0gbmV3IEF1ZGlvQ2xpcChcInNvdW5kcy9mYW4ubXAzXCIpO1xyXG5cclxuICAvLyBDcmlhciBmb3JtYSBkbyB2ZW50aWxhZG9yXHJcbiAgY29uc3QgZmFuU2hhcGUgPSBuZXcgR0xURlNoYXBlKFwibW9kZWxzL3Jvb205L0Zhbi5nbGJcIik7XHJcblxyXG4gIC8vIENyaWFyIG1hdHJpeiBkZSBlbnRpZGFkZXMgZGUgdmVudGlsYWRvcmVzXHJcbiAgY29uc3QgZmFuczogRW50aXR5W10gPSBbXTtcclxuXHJcbiAgLy8gQ3JpYXIgdHJhbnNmb3JtYcOnw6NvIGRvcyB2ZW50aWxhZG9yZXNcclxuICBjb25zdCBmYW5zVHJhbnNmb3JtOiBUcmFuc2Zvcm1bXSA9IFtcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoLTMuMTg4NzUsIDEuMDE1MDIsIC0wLjU3OTUxKSxcclxuICAgICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMCwgOTAsIDApLFxyXG4gICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMC42LCAwLjYsIDAuNiksXHJcbiAgICB9KSxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoLTMuMTg4NzUsIDEuMDE1MDIsIDAuMDIpLFxyXG4gICAgICByb3RhdGlvbjogUXVhdGVybmlvbi5FdWxlcigwLCA5MCwgMCksXHJcbiAgICAgIHNjYWxlOiBuZXcgVmVjdG9yMygwLjYsIDAuNiwgMC42KSxcclxuICAgIH0pLFxyXG4gICAgbmV3IFRyYW5zZm9ybSh7XHJcbiAgICAgIHBvc2l0aW9uOiBuZXcgVmVjdG9yMygwLjE2OTUxOCwgMS4wMTUwMiwgLTIuOTQ3OTQpLFxyXG4gICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMC42LCAwLjYsIDAuNiksXHJcbiAgICB9KSxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMC43NTIwMywgMS4wMTUwMiwgLTIuOTQ3OTQpLFxyXG4gICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMC42LCAwLjYsIDAuNiksXHJcbiAgICB9KSxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoLTAuODczMDI3LCAxLjAxNTAyLCAzLjA3MzUpLFxyXG4gICAgICByb3RhdGlvbjogUXVhdGVybmlvbi5FdWxlcigwLCAxODAsIDApLFxyXG4gICAgICBzY2FsZTogbmV3IFZlY3RvcjMoMC42LCAwLjYsIDAuNiksXHJcbiAgICB9KSxcclxuICAgIG5ldyBUcmFuc2Zvcm0oe1xyXG4gICAgICBwb3NpdGlvbjogbmV3IFZlY3RvcjMoMS45NTU2LCAxLjAxNTAyLCAxLjA4ODM1KSxcclxuICAgICAgcm90YXRpb246IFF1YXRlcm5pb24uRXVsZXIoMCwgLTkwLCAwKSxcclxuICAgICAgc2NhbGU6IG5ldyBWZWN0b3IzKDAuNiwgMC42LCAwLjYpLFxyXG4gICAgfSksXHJcbiAgXTtcclxuXHJcbiAgZmFuc1RyYW5zZm9ybS5mb3JFYWNoKCh0cmFuc2Zvcm0pID0+IHtcclxuICAgIC8vIEluc3RhbmNpYXIgYW5pbWHDp8Ojb1xyXG4gICAgY29uc3QgZmFuQW5pbWF0aW9uID0gbmV3IEFuaW1hdGlvblN0YXRlKFwiRmFuX0FjdGlvblwiLCB7IGxvb3Bpbmc6IHRydWUgfSk7XHJcbiAgICAvLyBDcmlhciBhbmltYWRvclxyXG4gICAgY29uc3QgZmFuQW5pbWF0b3IgPSBuZXcgQW5pbWF0b3IoKTtcclxuICAgIC8vIEFkaWNpb25hciBjbGlwZSBhbyBhbmltYWRvclxyXG4gICAgZmFuQW5pbWF0b3IuYWRkQ2xpcChmYW5BbmltYXRpb24pO1xyXG4gICAgLy8gQ3JpYXIgZW50aWRhZGVcclxuICAgIGNvbnN0IGZhbkVudGl0eSA9IG5ldyBFbnRpdHkoKTtcclxuICAgIC8vIEFkaWNpb25hciBmb3JtYVxyXG4gICAgZmFuRW50aXR5LmFkZENvbXBvbmVudChmYW5TaGFwZSk7XHJcbiAgICAvLyBBZGljaW9uYXIgYW5pbWFkb3JcclxuICAgIGZhbkVudGl0eS5hZGRDb21wb25lbnQoZmFuQW5pbWF0b3IpO1xyXG4gICAgLy8gQWRpY2lvbmFyIHRyYW5zZm9ybWHDp8Ojb1xyXG4gICAgZmFuRW50aXR5LmFkZENvbXBvbmVudCh0cmFuc2Zvcm0pO1xyXG4gICAgLy8gQWRpY2lvbmFyIGZvbnRlIGRlIMOhdWRpb1xyXG4gICAgZmFuRW50aXR5LmFkZENvbXBvbmVudChuZXcgQXVkaW9Tb3VyY2UoYXVkaW9DbGlwRmFuKSk7XHJcbiAgICAvLyBEZWZpbmlyIHNhbGEgY29tbyBwYWlcclxuICAgIGZhbkVudGl0eS5zZXRQYXJlbnQocm9vbUVudGl0eSk7XHJcbiAgICAvLyBDYWxjdWxhciB0YW1hbmhvIGUgcG9zacOnw6NvIGRvIGdhdGlsaG9cclxuICAgIGNvbnN0IHRyaWdnZXJTaXplID0gbmV3IFZlY3RvcjMoMC41LCAwLjUsIDIuMjUpLnJvdGF0ZSh0cmFuc2Zvcm0ucm90YXRpb24pO1xyXG4gICAgdHJpZ2dlclNpemUueCA9IE1hdGguYWJzKHRyaWdnZXJTaXplLngpO1xyXG4gICAgdHJpZ2dlclNpemUueSA9IE1hdGguYWJzKHRyaWdnZXJTaXplLnkpO1xyXG4gICAgdHJpZ2dlclNpemUueiA9IE1hdGguYWJzKHRyaWdnZXJTaXplLnopO1xyXG4gICAgY29uc3QgdHJpZ2dlclBvc2l0aW9uID0gbmV3IFZlY3RvcjMoMC4yLCAwLjY1LCAxLjM1KS5yb3RhdGUoXHJcbiAgICAgIHRyYW5zZm9ybS5yb3RhdGlvblxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBDcmlhciBjb21wb25lbnRlIGRlIGdhdGlsaG9cclxuICAgIGNvbnN0IHRyaWdnZXJDb21wb25lbnQgPSBuZXcgdXRpbHMuVHJpZ2dlckNvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZSh0cmlnZ2VyU2l6ZSwgdHJpZ2dlclBvc2l0aW9uKSxcclxuICAgICAgRmFuTGF5ZXJcclxuICAgICk7XHJcbiAgICB0cmlnZ2VyQ29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcclxuICAgIGZhbkVudGl0eS5hZGRDb21wb25lbnQodHJpZ2dlckNvbXBvbmVudCk7XHJcblxyXG4gICAgLy8gQWRpY2lvbmFyIGNvbXBvbmVudGUgZGUgYWx0ZXJuw6JuY2lhXHJcbiAgICBmYW5FbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgICBuZXcgdXRpbHMuVG9nZ2xlQ29tcG9uZW50KHV0aWxzLlRvZ2dsZVN0YXRlLk9mZiwgKG5ld1ZhbHVlKSA9PiB7XHJcbiAgICAgICAgaWYgKG5ld1ZhbHVlID09IHV0aWxzLlRvZ2dsZVN0YXRlLk9uKSB7XHJcbiAgICAgICAgICBmYW5BbmltYXRpb24ucGxheSgpO1xyXG4gICAgICAgICAgZmFuRW50aXR5LmdldENvbXBvbmVudChBdWRpb1NvdXJjZSkucGxheWluZyA9IHRydWU7XHJcbiAgICAgICAgICBmYW5FbnRpdHkuZ2V0Q29tcG9uZW50KEF1ZGlvU291cmNlKS5sb29wID0gdHJ1ZTtcclxuICAgICAgICAgIGZhbkVudGl0eS5nZXRDb21wb25lbnQoQXVkaW9Tb3VyY2UpLnZvbHVtZSA9IDAuMztcclxuICAgICAgICAgIHRyaWdnZXJDb21wb25lbnQuZW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZhbkVudGl0eS5nZXRDb21wb25lbnQoQXVkaW9Tb3VyY2UpLnBsYXlpbmcgPSBmYWxzZTtcclxuICAgICAgICAgIGZhbkFuaW1hdGlvbi5zdG9wKCk7XHJcbiAgICAgICAgICB0cmlnZ2VyQ29tcG9uZW50LmVuYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgLy8gT3V2aXIgY2xpcXVlXHJcbiAgICBmYW5FbnRpdHkuYWRkQ29tcG9uZW50KFxyXG4gICAgICBuZXcgT25Qb2ludGVyRG93bigoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgZmFuRW50aXR5LmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnRvZ2dsZSgpO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBBZGljaW9uYXIgZW50aWRhZGUgYW8gYXJyYXlcclxuICAgIGZhbnMucHVzaChmYW5FbnRpdHkpO1xyXG4gIH0pO1xyXG5cclxuICAvLyBEZWZpbmlyIGFsZ3VucyB2ZW50aWxhZG9yZXMgY29tbyBlc3RhZG8gT05cclxuICBmYW5zWzBdLmdldENvbXBvbmVudCh1dGlscy5Ub2dnbGVDb21wb25lbnQpLnNldCh1dGlscy5Ub2dnbGVTdGF0ZS5Pbik7XHJcbiAgZmFuc1szXS5nZXRDb21wb25lbnQodXRpbHMuVG9nZ2xlQ29tcG9uZW50KS5zZXQodXRpbHMuVG9nZ2xlU3RhdGUuT24pO1xyXG4gIGZhbnNbNF0uZ2V0Q29tcG9uZW50KHV0aWxzLlRvZ2dsZUNvbXBvbmVudCkuc2V0KHV0aWxzLlRvZ2dsZVN0YXRlLk9uKTtcclxuXHJcbiAgLy8gR2F0aWxob3MgZGEgc2FsYVxyXG4gIGNvbnN0IHJvb21UcmlnZ2VyRW50aXRpZXM6IEVudGl0eVtdID0gW1xyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gICAgbmV3IEVudGl0eSgpLFxyXG4gIF07XHJcblxyXG4gIC8vIENyaWFyIGdhdGlsaG9zIGRhcyBwb250YXNcclxuICByb29tVHJpZ2dlckVudGl0aWVzWzBdLmFkZENvbXBvbmVudChcclxuICAgIG5ldyB1dGlscy5UcmlnZ2VyQ29tcG9uZW50KFxyXG4gICAgICBuZXcgdXRpbHMuVHJpZ2dlckJveFNoYXBlKFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDAuNTIsIDAuMDYsIDAuNTIpLFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDAuMjEyNDgzLCAxLjE1MTYyLCAtMC4wNClcclxuICAgICAgKSxcclxuICAgICAgUGlrZXNMYXllclxyXG4gICAgKVxyXG4gICk7XHJcbiAgcm9vbVRyaWdnZXJFbnRpdGllc1sxXS5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgdXRpbHMuVHJpZ2dlckNvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZShcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjUyLCAwLjQsIDAuNTIpLFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKC0wLjg4NTc1NywgMS4xNzYwNSwgLTEuMTQ2NjYpXHJcbiAgICAgICksXHJcbiAgICAgIFBpa2VzTGF5ZXJcclxuICAgIClcclxuICApO1xyXG4gIHJvb21UcmlnZ2VyRW50aXRpZXNbMl0uYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IHV0aWxzLlRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5UcmlnZ2VyQm94U2hhcGUoXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMC41MiwgMC4wNiwgMC41MiksXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoLTAuMzQ3Njk2LCAxLjE1MTYyLCAtMC41NzUyNzkpXHJcbiAgICAgICksXHJcbiAgICAgIFBpa2VzTGF5ZXJcclxuICAgIClcclxuICApO1xyXG4gIHJvb21UcmlnZ2VyRW50aXRpZXNbM10uYWRkQ29tcG9uZW50KFxyXG4gICAgbmV3IHV0aWxzLlRyaWdnZXJDb21wb25lbnQoXHJcbiAgICAgIG5ldyB1dGlscy5UcmlnZ2VyQm94U2hhcGUoXHJcbiAgICAgICAgbmV3IFZlY3RvcjMoMC41MiwgMC40LCAwLjUyKSxcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjcyOTQ2NiwgMS4xNzYwNSwgMS4wODc2NilcclxuICAgICAgKSxcclxuICAgICAgUGlrZXNMYXllclxyXG4gICAgKVxyXG4gICk7XHJcbiAgcm9vbVRyaWdnZXJFbnRpdGllc1s0XS5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgdXRpbHMuVHJpZ2dlckNvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZShcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjUyLCAwLjA2LCAwLjUyKSxcclxuICAgICAgICBuZXcgVmVjdG9yMygtMC4zNDc2OTYsIDEuMTUxNjIsIDEuMDg5MDIpXHJcbiAgICAgICksXHJcbiAgICAgIFBpa2VzTGF5ZXJcclxuICAgIClcclxuICApO1xyXG5cclxuICAvLyBDcmlhciBnYXRpbGhvcyBkYXMgY2FpeGFzXHJcbiAgcm9vbVRyaWdnZXJFbnRpdGllc1s1XS5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgdXRpbHMuVHJpZ2dlckNvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZShcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjUyLCAwLjE2LCAwLjUyKSxcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjIxMjQ4MywgMS4wNDc0MiwgLTAuMDQpXHJcbiAgICAgICksXHJcbiAgICAgIEJveExheWVyXHJcbiAgICApXHJcbiAgKTtcclxuICByb29tVHJpZ2dlckVudGl0aWVzWzZdLmFkZENvbXBvbmVudChcclxuICAgIG5ldyB1dGlscy5UcmlnZ2VyQ29tcG9uZW50KFxyXG4gICAgICBuZXcgdXRpbHMuVHJpZ2dlckJveFNoYXBlKFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKDAuNTIsIDAuMTYsIDAuNTIpLFxyXG4gICAgICAgIG5ldyBWZWN0b3IzKC0wLjM0NzY5NiwgMS4wNDc0MiwgLTAuNTc1Mjc5KVxyXG4gICAgICApLFxyXG4gICAgICBCb3hMYXllclxyXG4gICAgKVxyXG4gICk7XHJcbiAgcm9vbVRyaWdnZXJFbnRpdGllc1s3XS5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgdXRpbHMuVHJpZ2dlckNvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZShcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjUyLCAwLjE2LCAwLjUyKSxcclxuICAgICAgICBuZXcgVmVjdG9yMygtMC4zNDc2OTYsIDEuMDQ3NDIsIDEuMDg5MDIpXHJcbiAgICAgICksXHJcbiAgICAgIEJveExheWVyXHJcbiAgICApXHJcbiAgKTtcclxuXHJcbiAgLy8gQ3JpYXIgZ2F0aWxobyBkYSBnYWlvbGFcclxuICBjb25zdCBjYWdlVHJpZ2dlciA9IG5ldyBFbnRpdHkoKTtcclxuICBjYWdlVHJpZ2dlci5hZGRDb21wb25lbnQoXHJcbiAgICBuZXcgdXRpbHMuVHJpZ2dlckNvbXBvbmVudChcclxuICAgICAgbmV3IHV0aWxzLlRyaWdnZXJCb3hTaGFwZShcclxuICAgICAgICBuZXcgVmVjdG9yMygwLjUyLCAwLjE2LCAwLjUyKSxcclxuICAgICAgICBuZXcgVmVjdG9yMygxLjAzMzEsIDEuMDQ3NDIsIC0wLjA0KVxyXG4gICAgICApLFxyXG4gICAgICBDYWdlTGF5ZXJcclxuICAgIClcclxuICApO1xyXG4gIGNhZ2VUcmlnZ2VyLnNldFBhcmVudChyb29tRW50aXR5KTtcclxuXHJcbiAgLy8gRGVmaW5pciBnYXRpbGhvcyBjb21vIGZpbGhvcyBkYSBlbnRpZGFkZSBkYSBzYWxhXHJcbiAgcm9vbVRyaWdnZXJFbnRpdGllcy5mb3JFYWNoKCh0cmlnZ2VyRW50aXR5KSA9PiB7XHJcbiAgICB0cmlnZ2VyRW50aXR5LnNldFBhcmVudChyb29tRW50aXR5KTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgeyBCYXNlU2NlbmUgfSBmcm9tIFwiLi9nYW1lT2JqZWN0cy9pbmRleFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tMSB9IGZyb20gXCIuL3NjZW5lcy9yb29tMVwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tMiB9IGZyb20gXCIuL3NjZW5lcy9yb29tMlwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tMyB9IGZyb20gXCIuL3NjZW5lcy9yb29tM1wiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tNCB9IGZyb20gXCIuL3NjZW5lcy9yb29tNFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tNSB9IGZyb20gXCIuL3NjZW5lcy9yb29tNVwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tNiB9IGZyb20gXCIuL3NjZW5lcy9yb29tNlwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tNyB9IGZyb20gXCIuL3NjZW5lcy9yb29tN1wiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tOCB9IGZyb20gXCIuL3NjZW5lcy9yb29tOFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVSb29tOSB9IGZyb20gXCIuL3NjZW5lcy9yb29tOVwiO1xyXG5cclxubmV3IEJhc2VTY2VuZSgpO1xyXG5jb25zdCBnYW1lQ2FudmFzID0gbmV3IFVJQ2FudmFzKCk7XHJcblxyXG5DcmVhdGVSb29tMSgpO1xyXG5DcmVhdGVSb29tMigpO1xyXG5DcmVhdGVSb29tMygpO1xyXG5DcmVhdGVSb29tNCgpO1xyXG5DcmVhdGVSb29tNShnYW1lQ2FudmFzKTtcclxuQ3JlYXRlUm9vbTYoZ2FtZUNhbnZhcyk7XHJcbkNyZWF0ZVJvb203KCk7XHJcbkNyZWF0ZVJvb204KCk7XHJcbkNyZWF0ZVJvb205KCk7XHJcbiIsImltcG9ydCByZXNvdXJjZXMgZnJvbSBcIi4uL3Jlc291cmNlc1wiO1xyXG5cclxuLy8gQ29uc3RhbnRlcyBwYXJhIHBvc2ljaW9uYW1lbnRvXHJcbmNvbnN0IHBhbmVsUG9zaXRpb24gPSBuZXcgVmVjdG9yMigxMiwgLTI0KTtcclxuY29uc3QgYnV0dG9uU2l6ZSA9IG5ldyBWZWN0b3IyKDU1LCA1NSk7XHJcbmNvbnN0IGJ1dHRvblNwYWNlID0gbmV3IFZlY3RvcjIoNSwgNSk7XHJcblxyXG5leHBvcnQgY2xhc3MgS2V5cGFkIHtcclxuICAvLyBFeHBvciBvIGNvbnTDqmluZXIgcGFyYSBhbHRlcmFyIGEgdmlzaWJpbGlkYWRlXHJcbiAgcHVibGljIGNvbnRhaW5lcjogVUlDb250YWluZXJSZWN0O1xyXG5cclxuICBwcml2YXRlIHBhbmVsSW5wdXRzOiBVSVRleHRbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gdW1hIHRlY2xhIGRlIHZhbG9yIMOpIHByZXNzaW9uYWRhLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvbklucHV0OiAodmFsdWU6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQ2hhbWFkbyBxdWFuZG8gbyBib3TDo28gZGUgcmVpbmljaWFyIMOpIHByZXNzaW9uYWRvLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvblJlc2V0OiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBDaGFtYWRvIHF1YW5kbyBvIGJvdMOjbyBkZSBlbnZpbyDDqSBwcmVzc2lvbmFkby5cclxuICAgKi9cclxuICBwdWJsaWMgb25TdWJtaXQ6ICgpID0+IHZvaWQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmVudDogVUlTaGFwZSkge1xyXG4gICAgdGhpcy5jb250YWluZXIgPSBuZXcgVUlDb250YWluZXJSZWN0KHBhcmVudCk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5wb3NpdGlvblggPSAtNTA7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5wb3NpdGlvblkgPSA1MDtcclxuICAgIHRoaXMuY29udGFpbmVyLndpZHRoID0gXCIxMDAlXCI7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5oZWlnaHQgPSBcIjEwMCVcIjtcclxuXHJcbiAgICAvLyBFeGliaXIgdW1hIGltYWdlbSBkZSBmdW5kbyBwYXJhIG8gdGVjbGFkbyBudW3DqXJpY29cclxuICAgIGNvbnN0IHBhbmVsQmFja2dyb3VuZCA9IG5ldyBVSUltYWdlKFxyXG4gICAgICB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLnBhbmVsQmFja2dyb3VuZFxyXG4gICAgKTtcclxuICAgIHBhbmVsQmFja2dyb3VuZC5zb3VyY2VXaWR0aCA9IDkxODtcclxuICAgIHBhbmVsQmFja2dyb3VuZC5zb3VyY2VIZWlnaHQgPSAxMzAwO1xyXG4gICAgcGFuZWxCYWNrZ3JvdW5kLndpZHRoID0gMzEwO1xyXG4gICAgcGFuZWxCYWNrZ3JvdW5kLmhlaWdodCA9IDQyMDtcclxuICAgIHBhbmVsQmFja2dyb3VuZC5wb3NpdGlvblggPSA3MDtcclxuICAgIHBhbmVsQmFja2dyb3VuZC5wb3NpdGlvblkgPSAtNTU7XHJcblxyXG4gICAgLy8gQWRpY2lvbmFyIHVtIGJvdMOjbyBkZSBmZWNoYXIgcHLDs3hpbW8gYW8gY2FudG8gc3VwZXJpb3IgZGlyZWl0b1xyXG4gICAgY29uc3QgY2xvc2VJbWFnZSA9IG5ldyBVSUltYWdlKFxyXG4gICAgICB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLmNsb3NlQnV0dG9uXHJcbiAgICApO1xyXG4gICAgY2xvc2VJbWFnZS5zb3VyY2VXaWR0aCA9IDkyO1xyXG4gICAgY2xvc2VJbWFnZS5zb3VyY2VIZWlnaHQgPSA5MjtcclxuICAgIGNsb3NlSW1hZ2Uud2lkdGggPSAzMjtcclxuICAgIGNsb3NlSW1hZ2UuaGVpZ2h0ID0gMzI7XHJcbiAgICBjbG9zZUltYWdlLnBvc2l0aW9uWCA9IDE5NDtcclxuICAgIGNsb3NlSW1hZ2UucG9zaXRpb25ZID0gMTA4O1xyXG5cclxuICAgIC8vIFF1YW5kbyBvIGJvdMOjbyBkZSBmZWNoYXIgw6kgY2xpY2Fkbywgb2N1bHRhciBhIFVJXHJcbiAgICBjbG9zZUltYWdlLm9uQ2xpY2sgPSBuZXcgT25DbGljaygoKTogdm9pZCA9PiB7XHJcbiAgICAgIHRoaXMuY29udGFpbmVyLnZpc2libGUgPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIDMgY2FpeGFzIHBhcmEgbW9zdHJhciBvIGPDs2RpZ28gaW5zZXJpZG8gb3UgYSBtZW5zYWdlbSBhdHVhbFxyXG4gICAgdGhpcy5wYW5lbElucHV0cyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgY29uc3QgaW5wdXRJbWFnZSA9IG5ldyBVSUltYWdlKFxyXG4gICAgICAgIHRoaXMuY29udGFpbmVyLFxyXG4gICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5pbnB1dEJveFxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBpbnB1dFNsb3QgPSBuZXcgVUlUZXh0KHRoaXMuY29udGFpbmVyKTtcclxuICAgICAgaW5wdXRJbWFnZS5zb3VyY2VXaWR0aCA9IDE3MztcclxuICAgICAgaW5wdXRJbWFnZS5zb3VyY2VIZWlnaHQgPSAxNzM7XHJcbiAgICAgIGlucHV0SW1hZ2Uud2lkdGggPSBpbnB1dFNsb3Qud2lkdGggPSBidXR0b25TaXplLng7XHJcbiAgICAgIGlucHV0SW1hZ2UuaGVpZ2h0ID0gaW5wdXRTbG90LmhlaWdodCA9IGJ1dHRvblNpemUueTtcclxuICAgICAgaW5wdXRJbWFnZS5wb3NpdGlvblggPSBpbnB1dFNsb3QucG9zaXRpb25YID1cclxuICAgICAgICBpICogKGJ1dHRvblNwYWNlLnggKyBidXR0b25TaXplLngpICsgNTtcclxuICAgICAgaW5wdXRJbWFnZS5wb3NpdGlvblkgPSBpbnB1dFNsb3QucG9zaXRpb25ZID0gNDU7XHJcbiAgICAgIGlucHV0U2xvdC5mb250QXV0b1NpemUgPSB0cnVlO1xyXG4gICAgICBpbnB1dFNsb3QuaFRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgIHRoaXMucGFuZWxJbnB1dHMucHVzaChpbnB1dFNsb3QpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEJvdMO1ZXMgZGUgZW50cmFkYSBkbyB1c3XDoXJpb1xyXG4gICAgZm9yIChsZXQgY29sID0gMDsgY29sIDwgMzsgY29sKyspIHtcclxuICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgNDsgcm93KyspIHtcclxuICAgICAgICAvLyBPIHZhbG9yIHF1ZSBlc3RlIGJvdMOjbyByZXByZXNlbnRhXHJcbiAgICAgICAgbGV0IHZhbHVlOiBudW1iZXI7XHJcbiAgICAgICAgaWYgKGNvbCA9PSAxICYmIHJvdyA9PSAzKSB7XHJcbiAgICAgICAgICAvLyBPIGJvdMOjbyAwIMOpIHVtIGNhc28gZXNwZWNpYWxcclxuICAgICAgICAgIHZhbHVlID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFsdWUgPSByb3cgKiAzICsgY29sICsgMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENyaWFyIG8gYm90w6NvIGUgc2V1IGV2ZW50b1xyXG4gICAgICAgIGxldCBidXR0b25JbWFnZTogVUlJbWFnZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKGNvbCA9PSAwICYmIHJvdyA9PSAzKSB7XHJcbiAgICAgICAgICAvLyBPIGJvdMOjbyBkZSBsaW1wYXIgbm8gY2FudG8gaW5mZXJpb3IgZXNxdWVyZG9cclxuICAgICAgICAgIGJ1dHRvbkltYWdlID0gbmV3IFVJSW1hZ2UoXHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLFxyXG4gICAgICAgICAgICByZXNvdXJjZXMudGV4dHVyZXMuY2xlYXJCdXR0b25cclxuICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgLy8gQ2hhbWFyIG9uUmVzZXQgcXVhbmRvIGNsaWNhZG9cclxuICAgICAgICAgIGJ1dHRvbkltYWdlLm9uQ2xpY2sgPSBuZXcgT25DbGljaygoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25SZXNldCgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjb2wgPT0gMiAmJiByb3cgPT0gMykge1xyXG4gICAgICAgICAgLy8gTyBib3TDo28gZGUgZW52aW8gbm8gY2FudG8gaW5mZXJpb3IgZGlyZWl0b1xyXG4gICAgICAgICAgYnV0dG9uSW1hZ2UgPSBuZXcgVUlJbWFnZShcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIsXHJcbiAgICAgICAgICAgIHJlc291cmNlcy50ZXh0dXJlcy5lbnRlckJ1dHRvblxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAvLyBDaGFtYXIgb25TdWJtaXQgcXVhbmRvIGNsaWNhZG9cclxuICAgICAgICAgIGJ1dHRvbkltYWdlLm9uQ2xpY2sgPSBuZXcgT25DbGljaygoKTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMub25TdWJtaXQoKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyBVbSBib3TDo28gZGUgdmFsb3IgbnVtw6lyaWNvXHJcbiAgICAgICAgICBidXR0b25JbWFnZSA9IG5ldyBVSUltYWdlKFxyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lcixcclxuICAgICAgICAgICAgcmVzb3VyY2VzLnRleHR1cmVzLm51bWJlckJ1dHRvblxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBudW1iZXJUZXh0ID0gbmV3IFVJVGV4dChidXR0b25JbWFnZSk7XHJcbiAgICAgICAgICBudW1iZXJUZXh0LmlzUG9pbnRlckJsb2NrZXIgPSBmYWxzZTtcclxuICAgICAgICAgIG51bWJlclRleHQucG9zaXRpb25YID0gLTIzO1xyXG4gICAgICAgICAgbnVtYmVyVGV4dC5mb250QXV0b1NpemUgPSB0cnVlO1xyXG4gICAgICAgICAgbnVtYmVyVGV4dC5oVGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAgIG51bWJlclRleHQudmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgIC8vIENoYW1hciBvbklucHV0IHF1YW5kbyBjbGljYWRvXHJcbiAgICAgICAgICBidXR0b25JbWFnZS5vbkNsaWNrID0gbmV3IE9uQ2xpY2soKCk6IHZvaWQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9uSW5wdXQodmFsdWUpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb25maWd1cmFyIGEgaW1hZ2VtIGRvIGJvdMOjb1xyXG4gICAgICAgIGJ1dHRvbkltYWdlLnNvdXJjZVdpZHRoID0gMTcxO1xyXG4gICAgICAgIGJ1dHRvbkltYWdlLnNvdXJjZUhlaWdodCA9IDE3MTtcclxuICAgICAgICBidXR0b25JbWFnZS53aWR0aCA9IGJ1dHRvblNpemUueDtcclxuICAgICAgICBidXR0b25JbWFnZS5oZWlnaHQgPSBidXR0b25TaXplLnk7XHJcbiAgICAgICAgYnV0dG9uSW1hZ2UucG9zaXRpb25YID1cclxuICAgICAgICAgIHBhbmVsUG9zaXRpb24ueCArIGNvbCAqIChidXR0b25TcGFjZS54ICsgYnV0dG9uU2l6ZS54KTtcclxuICAgICAgICBidXR0b25JbWFnZS5wb3NpdGlvblkgPVxyXG4gICAgICAgICAgcGFuZWxQb3NpdGlvbi55IC0gcm93ICogKGJ1dHRvblNwYWNlLnkgKyBidXR0b25TaXplLnkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBFeGliaXIgdW1hIG1lbnNhZ2VtIGFjaW1hIGRvIHRlY2xhZG8gbnVtw6lyaWNvLCBhdMOpIDMgY2FyYWN0ZXJlc1xyXG4gIHB1YmxpYyBkaXNwbGF5KG1lc3NhZ2U6IHN0cmluZywgY29sb3I6IENvbG9yNCA9IENvbG9yNC5XaGl0ZSgpKTogdm9pZCB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFuZWxJbnB1dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgY2hhcmFjdGVyID0gbWVzc2FnZS5sZW5ndGggPiBpID8gbWVzc2FnZVtpXSA6IFwiXCI7XHJcbiAgICAgIHRoaXMucGFuZWxJbnB1dHNbaV0udmFsdWUgPSBjaGFyYWN0ZXI7XHJcbiAgICAgIHRoaXMucGFuZWxJbnB1dHNbaV0uY29sb3IgPSBjb2xvcjtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19",
    "sha256": "e52650e9a64c90ae93024ba88d9c50b45393f124915f9698812004974d4222aa"
  }
]